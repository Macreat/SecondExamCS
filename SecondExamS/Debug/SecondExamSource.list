
SecondExamSource.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a5c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001540  08006bec  08006bec  00007bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800812c  0800812c  0000a0a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800812c  0800812c  0000912c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008134  08008134  0000a0a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008134  08008134  00009134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008138  08008138  00009138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  0800813c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000680  200000a0  080081dc  0000a0a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000720  080081dc  0000a720  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a29  00000000  00000000  0000a0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b2b  00000000  00000000  0001baf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  0001e628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ba1  00000000  00000000  0001f558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d51  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001413e  00000000  00000000  00047e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000edb30  00000000  00000000  0005bf88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00149ab8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004704  00000000  00000000  00149afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0014e200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006bd4 	.word	0x08006bd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	08006bd4 	.word	0x08006bd4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <keypad_debounce>:

#include "main.h"


static uint8_t keypad_debounce(uint16_t GPIO_Pin)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	80fb      	strh	r3, [r7, #6]
	 */
	//just managemente for DEBOUNCE delay
	static uint16_t last_pressed = 0xFFFF;
	static uint32_t last_tick = 0;

	if (last_pressed == GPIO_Pin) {
 800056a:	4b0e      	ldr	r3, [pc, #56]	@ (80005a4 <keypad_debounce+0x44>)
 800056c:	881b      	ldrh	r3, [r3, #0]
 800056e:	88fa      	ldrh	r2, [r7, #6]
 8000570:	429a      	cmp	r2, r3
 8000572:	d109      	bne.n	8000588 <keypad_debounce+0x28>
		if (HAL_GetTick() < (last_tick + 200)) {
 8000574:	f001 f806 	bl	8001584 <HAL_GetTick>
 8000578:	4602      	mov	r2, r0
 800057a:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <keypad_debounce+0x48>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	33c8      	adds	r3, #200	@ 0xc8
 8000580:	429a      	cmp	r2, r3
 8000582:	d201      	bcs.n	8000588 <keypad_debounce+0x28>
			return 0;
 8000584:	2300      	movs	r3, #0
 8000586:	e008      	b.n	800059a <keypad_debounce+0x3a>
		}
	}
	last_pressed = GPIO_Pin;
 8000588:	4a06      	ldr	r2, [pc, #24]	@ (80005a4 <keypad_debounce+0x44>)
 800058a:	88fb      	ldrh	r3, [r7, #6]
 800058c:	8013      	strh	r3, [r2, #0]
	last_tick = HAL_GetTick();
 800058e:	f000 fff9 	bl	8001584 <HAL_GetTick>
 8000592:	4603      	mov	r3, r0
 8000594:	4a04      	ldr	r2, [pc, #16]	@ (80005a8 <keypad_debounce+0x48>)
 8000596:	6013      	str	r3, [r2, #0]

	return 1;
 8000598:	2301      	movs	r3, #1
}
 800059a:	4618      	mov	r0, r3
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000010 	.word	0x20000010
 80005a8:	200000bc 	.word	0x200000bc

080005ac <keypad_scan_row>:
If a key press is detected, the function returns the row number where the key was pressed.
 *
 *
 */
uint8_t keypad_scan_row(GPIO_TypeDef *COLx_GPIO_Port, uint16_t COLx_Pin)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	807b      	strh	r3, [r7, #2]
	uint8_t row_pressed = 0xFF;
 80005b8:	23ff      	movs	r3, #255	@ 0xff
 80005ba:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2180      	movs	r1, #128	@ 0x80
 80005c0:	4830      	ldr	r0, [pc, #192]	@ (8000684 <keypad_scan_row+0xd8>)
 80005c2:	f001 fb61 	bl	8001c88 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLx_GPIO_Port, COLx_Pin) == 0) {
 80005c6:	887b      	ldrh	r3, [r7, #2]
 80005c8:	4619      	mov	r1, r3
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f001 fb44 	bl	8001c58 <HAL_GPIO_ReadPin>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d102      	bne.n	80005dc <keypad_scan_row+0x30>
		row_pressed =  1;
 80005d6:	2301      	movs	r3, #1
 80005d8:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 80005da:	e035      	b.n	8000648 <keypad_scan_row+0x9c>
	}
	HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, GPIO_PIN_RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e6:	f001 fb4f 	bl	8001c88 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLx_GPIO_Port, COLx_Pin) == 0) {
 80005ea:	887b      	ldrh	r3, [r7, #2]
 80005ec:	4619      	mov	r1, r3
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f001 fb32 	bl	8001c58 <HAL_GPIO_ReadPin>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d102      	bne.n	8000600 <keypad_scan_row+0x54>
		row_pressed =  2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 80005fe:	e023      	b.n	8000648 <keypad_scan_row+0x9c>
	}
	HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000606:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800060a:	f001 fb3d 	bl	8001c88 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLx_GPIO_Port, COLx_Pin) == 0) {
 800060e:	887b      	ldrh	r3, [r7, #2]
 8000610:	4619      	mov	r1, r3
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f001 fb20 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d102      	bne.n	8000624 <keypad_scan_row+0x78>
		row_pressed =  3;
 800061e:	2303      	movs	r3, #3
 8000620:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 8000622:	e011      	b.n	8000648 <keypad_scan_row+0x9c>
	}
	HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800062a:	4817      	ldr	r0, [pc, #92]	@ (8000688 <keypad_scan_row+0xdc>)
 800062c:	f001 fb2c 	bl	8001c88 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLx_GPIO_Port, COLx_Pin) == 0) {
 8000630:	887b      	ldrh	r3, [r7, #2]
 8000632:	4619      	mov	r1, r3
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f001 fb0f 	bl	8001c58 <HAL_GPIO_ReadPin>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d102      	bne.n	8000646 <keypad_scan_row+0x9a>
		row_pressed =  4;
 8000640:	2304      	movs	r3, #4
 8000642:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 8000644:	e000      	b.n	8000648 <keypad_scan_row+0x9c>
	}
row_scan_end:
 8000646:	bf00      	nop
	HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, GPIO_PIN_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	2180      	movs	r1, #128	@ 0x80
 800064c:	480d      	ldr	r0, [pc, #52]	@ (8000684 <keypad_scan_row+0xd8>)
 800064e:	f001 fb1b 	bl	8001c88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, GPIO_PIN_SET);
 8000652:	2201      	movs	r2, #1
 8000654:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000658:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800065c:	f001 fb14 	bl	8001c88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000666:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800066a:	f001 fb0d 	bl	8001c88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000674:	4804      	ldr	r0, [pc, #16]	@ (8000688 <keypad_scan_row+0xdc>)
 8000676:	f001 fb07 	bl	8001c88 <HAL_GPIO_WritePin>
	return row_pressed; // not detected
 800067a:	7bfb      	ldrb	r3, [r7, #15]
}
 800067c:	4618      	mov	r0, r3
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	48000800 	.word	0x48000800
 8000688:	48000400 	.word	0x48000400

0800068c <keypad_scan>:
 *
 *
 *
 */
uint8_t keypad_scan(uint16_t GPIO_Pin)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	80fb      	strh	r3, [r7, #6]
	uint8_t key_pressed = 0xFF;
 8000696:	23ff      	movs	r3, #255	@ 0xff
 8000698:	73fb      	strb	r3, [r7, #15]

	if (keypad_debounce(GPIO_Pin) == 0) { // to ensure the press is valid,
 800069a:	88fb      	ldrh	r3, [r7, #6]
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff ff5f 	bl	8000560 <keypad_debounce>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d101      	bne.n	80006ac <keypad_scan+0x20>
		return key_pressed;
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	e04b      	b.n	8000744 <keypad_scan+0xb8>
	}
	uint8_t row = 0xFF;
 80006ac:	23ff      	movs	r3, #255	@ 0xff
 80006ae:	73bb      	strb	r3, [r7, #14]
	switch (GPIO_Pin) {
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006b6:	d033      	beq.n	8000720 <keypad_scan+0x94>
 80006b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006bc:	dc40      	bgt.n	8000740 <keypad_scan+0xb4>
 80006be:	2b20      	cmp	r3, #32
 80006c0:	d012      	beq.n	80006e8 <keypad_scan+0x5c>
 80006c2:	2b20      	cmp	r3, #32
 80006c4:	dc3c      	bgt.n	8000740 <keypad_scan+0xb4>
 80006c6:	2b08      	cmp	r3, #8
 80006c8:	d01c      	beq.n	8000704 <keypad_scan+0x78>
 80006ca:	2b10      	cmp	r3, #16
 80006cc:	d138      	bne.n	8000740 <keypad_scan+0xb4>
	case COL_1_Pin:
		row = keypad_scan_row(COL_1_GPIO_Port, COL_1_Pin);
 80006ce:	2110      	movs	r1, #16
 80006d0:	481e      	ldr	r0, [pc, #120]	@ (800074c <keypad_scan+0xc0>)
 80006d2:	f7ff ff6b 	bl	80005ac <keypad_scan_row>
 80006d6:	4603      	mov	r3, r0
 80006d8:	73bb      	strb	r3, [r7, #14]
		key_pressed = keypad_chars[row - 1][1 - 1];
 80006da:	7bbb      	ldrb	r3, [r7, #14]
 80006dc:	3b01      	subs	r3, #1
 80006de:	4a1c      	ldr	r2, [pc, #112]	@ (8000750 <keypad_scan+0xc4>)
 80006e0:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80006e4:	73fb      	strb	r3, [r7, #15]
		break;
 80006e6:	e02c      	b.n	8000742 <keypad_scan+0xb6>

	case COL_2_Pin:
		row = keypad_scan_row(COL_2_GPIO_Port, COL_2_Pin);
 80006e8:	2120      	movs	r1, #32
 80006ea:	4818      	ldr	r0, [pc, #96]	@ (800074c <keypad_scan+0xc0>)
 80006ec:	f7ff ff5e 	bl	80005ac <keypad_scan_row>
 80006f0:	4603      	mov	r3, r0
 80006f2:	73bb      	strb	r3, [r7, #14]
		key_pressed = keypad_chars[row - 1][2 - 1];
 80006f4:	7bbb      	ldrb	r3, [r7, #14]
 80006f6:	3b01      	subs	r3, #1
 80006f8:	4a15      	ldr	r2, [pc, #84]	@ (8000750 <keypad_scan+0xc4>)
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	4413      	add	r3, r2
 80006fe:	785b      	ldrb	r3, [r3, #1]
 8000700:	73fb      	strb	r3, [r7, #15]
		break;
 8000702:	e01e      	b.n	8000742 <keypad_scan+0xb6>

	case COL_3_Pin:
			row = keypad_scan_row(COL_3_GPIO_Port, COL_3_Pin);
 8000704:	2108      	movs	r1, #8
 8000706:	4811      	ldr	r0, [pc, #68]	@ (800074c <keypad_scan+0xc0>)
 8000708:	f7ff ff50 	bl	80005ac <keypad_scan_row>
 800070c:	4603      	mov	r3, r0
 800070e:	73bb      	strb	r3, [r7, #14]
			key_pressed = keypad_chars[row - 1][3 - 1];
 8000710:	7bbb      	ldrb	r3, [r7, #14]
 8000712:	3b01      	subs	r3, #1
 8000714:	4a0e      	ldr	r2, [pc, #56]	@ (8000750 <keypad_scan+0xc4>)
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	4413      	add	r3, r2
 800071a:	789b      	ldrb	r3, [r3, #2]
 800071c:	73fb      	strb	r3, [r7, #15]
			break;
 800071e:	e010      	b.n	8000742 <keypad_scan+0xb6>

	case COL_4_Pin:
			row = keypad_scan_row(COL_4_GPIO_Port, COL_4_Pin);
 8000720:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000724:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000728:	f7ff ff40 	bl	80005ac <keypad_scan_row>
 800072c:	4603      	mov	r3, r0
 800072e:	73bb      	strb	r3, [r7, #14]
			key_pressed = keypad_chars[row - 1][4 - 1];
 8000730:	7bbb      	ldrb	r3, [r7, #14]
 8000732:	3b01      	subs	r3, #1
 8000734:	4a06      	ldr	r2, [pc, #24]	@ (8000750 <keypad_scan+0xc4>)
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	4413      	add	r3, r2
 800073a:	78db      	ldrb	r3, [r3, #3]
 800073c:	73fb      	strb	r3, [r7, #15]
			break;
 800073e:	e000      	b.n	8000742 <keypad_scan+0xb6>
	default:
		break;
 8000740:	bf00      	nop
	}
	return key_pressed;
 8000742:	7bfb      	ldrb	r3, [r7, #15]
}
 8000744:	4618      	mov	r0, r3
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	48000400 	.word	0x48000400
 8000750:	20000000 	.word	0x20000000

08000754 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// weak function to transmit via UART
int _write(int file, char *ptr, int len)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	b29a      	uxth	r2, r3
 8000764:	230a      	movs	r3, #10
 8000766:	68b9      	ldr	r1, [r7, #8]
 8000768:	4803      	ldr	r0, [pc, #12]	@ (8000778 <_write+0x24>)
 800076a:	f003 fafb 	bl	8003d64 <HAL_UART_Transmit>
  return len;
 800076e:	687b      	ldr	r3, [r7, #4]
}
 8000770:	4618      	mov	r0, r3
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000114 	.word	0x20000114

0800077c <HAL_UART_RxCpltCallback>:

// implementing reception callback for USART entrys
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* Data received in USART2 */
  if (huart->Instance == USART2)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a22      	ldr	r2, [pc, #136]	@ (8000814 <HAL_UART_RxCpltCallback+0x98>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d13d      	bne.n	800080a <HAL_UART_RxCpltCallback+0x8e>
  {
    // selecting of arithmetic operation (2COND REQUIREMENT)
    if (usart2_data == '+' || usart2_data == '-' || usart2_data == '*' || usart2_data == '/')
 800078e:	4b22      	ldr	r3, [pc, #136]	@ (8000818 <HAL_UART_RxCpltCallback+0x9c>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b2b      	cmp	r3, #43	@ 0x2b
 8000794:	d00b      	beq.n	80007ae <HAL_UART_RxCpltCallback+0x32>
 8000796:	4b20      	ldr	r3, [pc, #128]	@ (8000818 <HAL_UART_RxCpltCallback+0x9c>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b2d      	cmp	r3, #45	@ 0x2d
 800079c:	d007      	beq.n	80007ae <HAL_UART_RxCpltCallback+0x32>
 800079e:	4b1e      	ldr	r3, [pc, #120]	@ (8000818 <HAL_UART_RxCpltCallback+0x9c>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80007a4:	d003      	beq.n	80007ae <HAL_UART_RxCpltCallback+0x32>
 80007a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000818 <HAL_UART_RxCpltCallback+0x9c>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b2f      	cmp	r3, #47	@ 0x2f
 80007ac:	d11a      	bne.n	80007e4 <HAL_UART_RxCpltCallback+0x68>
    {
      ring_buffer_write(&usart2_rb, usart2_data);
 80007ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000818 <HAL_UART_RxCpltCallback+0x9c>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	4619      	mov	r1, r3
 80007b4:	4819      	ldr	r0, [pc, #100]	@ (800081c <HAL_UART_RxCpltCallback+0xa0>)
 80007b6:	f000 fc00 	bl	8000fba <ring_buffer_write>
      if (ring_buffer_is_full(&usart2_rb) != 0)
 80007ba:	4818      	ldr	r0, [pc, #96]	@ (800081c <HAL_UART_RxCpltCallback+0xa0>)
 80007bc:	f000 fbd9 	bl	8000f72 <ring_buffer_is_full>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d006      	beq.n	80007d4 <HAL_UART_RxCpltCallback+0x58>
      {
        // Transmit "receiving data" message via USART2
        HAL_UART_Transmit(&huart2, (uint8_t *)"Operator received. Press '=' to calculate.\r\n", 46, HAL_MAX_DELAY);
 80007c6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ca:	222e      	movs	r2, #46	@ 0x2e
 80007cc:	4914      	ldr	r1, [pc, #80]	@ (8000820 <HAL_UART_RxCpltCallback+0xa4>)
 80007ce:	4815      	ldr	r0, [pc, #84]	@ (8000824 <HAL_UART_RxCpltCallback+0xa8>)
 80007d0:	f003 fac8 	bl	8003d64 <HAL_UART_Transmit>
      }
      HAL_UART_Transmit(&huart2, (uint8_t *)" data received from UART \r\n", 25, HAL_MAX_DELAY);
 80007d4:	f04f 33ff 	mov.w	r3, #4294967295
 80007d8:	2219      	movs	r2, #25
 80007da:	4913      	ldr	r1, [pc, #76]	@ (8000828 <HAL_UART_RxCpltCallback+0xac>)
 80007dc:	4811      	ldr	r0, [pc, #68]	@ (8000824 <HAL_UART_RxCpltCallback+0xa8>)
 80007de:	f003 fac1 	bl	8003d64 <HAL_UART_Transmit>
 80007e2:	e00d      	b.n	8000800 <HAL_UART_RxCpltCallback+0x84>
    }
    else if (usart2_data == '=') // validate when user press ==
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <HAL_UART_RxCpltCallback+0x9c>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b3d      	cmp	r3, #61	@ 0x3d
 80007ea:	d109      	bne.n	8000800 <HAL_UART_RxCpltCallback+0x84>
    {
      operation_flag = 1;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <HAL_UART_RxCpltCallback+0xb0>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	701a      	strb	r2, [r3, #0]
      HAL_UART_Transmit(&huart2, (uint8_t *)"calculating", 46, HAL_MAX_DELAY);
 80007f2:	f04f 33ff 	mov.w	r3, #4294967295
 80007f6:	222e      	movs	r2, #46	@ 0x2e
 80007f8:	490d      	ldr	r1, [pc, #52]	@ (8000830 <HAL_UART_RxCpltCallback+0xb4>)
 80007fa:	480a      	ldr	r0, [pc, #40]	@ (8000824 <HAL_UART_RxCpltCallback+0xa8>)
 80007fc:	f003 fab2 	bl	8003d64 <HAL_UART_Transmit>
    }
    HAL_UART_Receive_IT(&huart2, &usart2_data, 1);
 8000800:	2201      	movs	r2, #1
 8000802:	4905      	ldr	r1, [pc, #20]	@ (8000818 <HAL_UART_RxCpltCallback+0x9c>)
 8000804:	4807      	ldr	r0, [pc, #28]	@ (8000824 <HAL_UART_RxCpltCallback+0xa8>)
 8000806:	f003 fb37 	bl	8003e78 <HAL_UART_Receive_IT>
  }
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40004400 	.word	0x40004400
 8000818:	20000014 	.word	0x20000014
 800081c:	200001b4 	.word	0x200001b4
 8000820:	08006bec 	.word	0x08006bec
 8000824:	20000114 	.word	0x20000114
 8000828:	08006c1c 	.word	0x08006c1c
 800082c:	200001bc 	.word	0x200001bc
 8000830:	08006c38 	.word	0x08006c38

08000834 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	80fb      	strh	r3, [r7, #6]

  uint8_t key_pressed = keypad_scan(GPIO_Pin);
 800083e:	88fb      	ldrh	r3, [r7, #6]
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff23 	bl	800068c <keypad_scan>
 8000846:	4603      	mov	r3, r0
 8000848:	73fb      	strb	r3, [r7, #15]
  if (key_pressed != 0xFF)
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	2bff      	cmp	r3, #255	@ 0xff
 800084e:	d039      	beq.n	80008c4 <HAL_GPIO_EXTI_Callback+0x90>
  {
    if (key_pressed == '#')
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	2b23      	cmp	r3, #35	@ 0x23
 8000854:	d10f      	bne.n	8000876 <HAL_GPIO_EXTI_Callback+0x42>
    {
      ring_buffer_reset(&keypad_rb);
 8000856:	481d      	ldr	r0, [pc, #116]	@ (80008cc <HAL_GPIO_EXTI_Callback+0x98>)
 8000858:	f000 fb78 	bl	8000f4c <ring_buffer_reset>
      ring_buffer_reset(&keypad1_rb);
 800085c:	481c      	ldr	r0, [pc, #112]	@ (80008d0 <HAL_GPIO_EXTI_Callback+0x9c>)
 800085e:	f000 fb75 	bl	8000f4c <ring_buffer_reset>
      ring_buffer_reset(&usart2_rb);
 8000862:	481c      	ldr	r0, [pc, #112]	@ (80008d4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000864:	f000 fb72 	bl	8000f4c <ring_buffer_reset>
      printf("buffers reseted \r\n");
 8000868:	481b      	ldr	r0, [pc, #108]	@ (80008d8 <HAL_GPIO_EXTI_Callback+0xa4>)
 800086a:	f005 f979 	bl	8005b60 <puts>
      ssd1306_Fill(Black);
 800086e:	2000      	movs	r0, #0
 8000870:	f004 feb8 	bl	80055e4 <ssd1306_Fill>
      {
        printf("both buffers full, do some operation or press '=' if youre already did it\r\n"); // if ring buffer is full, continue with the second buffer
      }
    }
  }
}
 8000874:	e026      	b.n	80008c4 <HAL_GPIO_EXTI_Callback+0x90>
    else if (key_pressed >= '0' && key_pressed <= '9') // validation of numbers on HEXA keyboard
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	2b2f      	cmp	r3, #47	@ 0x2f
 800087a:	d923      	bls.n	80008c4 <HAL_GPIO_EXTI_Callback+0x90>
 800087c:	7bfb      	ldrb	r3, [r7, #15]
 800087e:	2b39      	cmp	r3, #57	@ 0x39
 8000880:	d820      	bhi.n	80008c4 <HAL_GPIO_EXTI_Callback+0x90>
      if (ring_buffer_is_full(&keypad_rb) == 0)
 8000882:	4812      	ldr	r0, [pc, #72]	@ (80008cc <HAL_GPIO_EXTI_Callback+0x98>)
 8000884:	f000 fb75 	bl	8000f72 <ring_buffer_is_full>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d108      	bne.n	80008a0 <HAL_GPIO_EXTI_Callback+0x6c>
        ring_buffer_write(&keypad_rb, key_pressed);
 800088e:	7bfb      	ldrb	r3, [r7, #15]
 8000890:	4619      	mov	r1, r3
 8000892:	480e      	ldr	r0, [pc, #56]	@ (80008cc <HAL_GPIO_EXTI_Callback+0x98>)
 8000894:	f000 fb91 	bl	8000fba <ring_buffer_write>
        keypad_data = key_pressed;
 8000898:	4a10      	ldr	r2, [pc, #64]	@ (80008dc <HAL_GPIO_EXTI_Callback+0xa8>)
 800089a:	7bfb      	ldrb	r3, [r7, #15]
 800089c:	7013      	strb	r3, [r2, #0]
}
 800089e:	e011      	b.n	80008c4 <HAL_GPIO_EXTI_Callback+0x90>
      else if (ring_buffer_is_full(&keypad1_rb) == 0)
 80008a0:	480b      	ldr	r0, [pc, #44]	@ (80008d0 <HAL_GPIO_EXTI_Callback+0x9c>)
 80008a2:	f000 fb66 	bl	8000f72 <ring_buffer_is_full>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d108      	bne.n	80008be <HAL_GPIO_EXTI_Callback+0x8a>
        ring_buffer_write(&keypad1_rb, key_pressed);
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	4619      	mov	r1, r3
 80008b0:	4807      	ldr	r0, [pc, #28]	@ (80008d0 <HAL_GPIO_EXTI_Callback+0x9c>)
 80008b2:	f000 fb82 	bl	8000fba <ring_buffer_write>
        keypad_data1 = key_pressed;
 80008b6:	4a0a      	ldr	r2, [pc, #40]	@ (80008e0 <HAL_GPIO_EXTI_Callback+0xac>)
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	7013      	strb	r3, [r2, #0]
}
 80008bc:	e002      	b.n	80008c4 <HAL_GPIO_EXTI_Callback+0x90>
        printf("both buffers full, do some operation or press '=' if youre already did it\r\n"); // if ring buffer is full, continue with the second buffer
 80008be:	4809      	ldr	r0, [pc, #36]	@ (80008e4 <HAL_GPIO_EXTI_Callback+0xb0>)
 80008c0:	f005 f94e 	bl	8005b60 <puts>
}
 80008c4:	bf00      	nop
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200001a0 	.word	0x200001a0
 80008d0:	200001a8 	.word	0x200001a8
 80008d4:	200001b4 	.word	0x200001b4
 80008d8:	08006c44 	.word	0x08006c44
 80008dc:	20000012 	.word	0x20000012
 80008e0:	20000013 	.word	0x20000013
 80008e4:	08006c58 	.word	0x08006c58

080008e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b092      	sub	sp, #72	@ 0x48
 80008ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ee:	f000 fdd9 	bl	80014a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f2:	f000 f97b 	bl	8000bec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f6:	f000 fa3b 	bl	8000d70 <MX_GPIO_Init>
  MX_I2C1_Init();
 80008fa:	f000 f9c9 	bl	8000c90 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80008fe:	f000 fa07 	bl	8000d10 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000902:	f004 fe05 	bl	8005510 <ssd1306_Init>
  ssd1306_Fill(Black);
 8000906:	2000      	movs	r0, #0
 8000908:	f004 fe6c 	bl	80055e4 <ssd1306_Fill>
  HAL_UART_Transmit(&huart2, HB, sizeof(HB) - 1, 100);
 800090c:	2364      	movs	r3, #100	@ 0x64
 800090e:	221f      	movs	r2, #31
 8000910:	49a1      	ldr	r1, [pc, #644]	@ (8000b98 <main+0x2b0>)
 8000912:	48a2      	ldr	r0, [pc, #648]	@ (8000b9c <main+0x2b4>)
 8000914:	f003 fa26 	bl	8003d64 <HAL_UART_Transmit>

  ssd1306_WriteString(" ARITHMETIC software...\r\n", Font_6x8, White);
 8000918:	4ba1      	ldr	r3, [pc, #644]	@ (8000ba0 <main+0x2b8>)
 800091a:	2201      	movs	r2, #1
 800091c:	9200      	str	r2, [sp, #0]
 800091e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000920:	48a0      	ldr	r0, [pc, #640]	@ (8000ba4 <main+0x2bc>)
 8000922:	f004 ff83 	bl	800582c <ssd1306_WriteString>

  ssd1306_UpdateScreen();
 8000926:	f004 fe75 	bl	8005614 <ssd1306_UpdateScreen>

  ring_buffer_init(&usart2_rb, usart2_buffer, USART2_RB_LEN);
 800092a:	2201      	movs	r2, #1
 800092c:	499e      	ldr	r1, [pc, #632]	@ (8000ba8 <main+0x2c0>)
 800092e:	489f      	ldr	r0, [pc, #636]	@ (8000bac <main+0x2c4>)
 8000930:	f000 faf8 	bl	8000f24 <ring_buffer_init>
  ring_buffer_init(&keypad_rb, keypad_buffer, KEYPAD_RB_LEN);
 8000934:	2203      	movs	r2, #3
 8000936:	499e      	ldr	r1, [pc, #632]	@ (8000bb0 <main+0x2c8>)
 8000938:	489e      	ldr	r0, [pc, #632]	@ (8000bb4 <main+0x2cc>)
 800093a:	f000 faf3 	bl	8000f24 <ring_buffer_init>
  HAL_UART_Receive_IT(&huart2, &usart2_data, 1);
 800093e:	2201      	movs	r2, #1
 8000940:	499d      	ldr	r1, [pc, #628]	@ (8000bb8 <main+0x2d0>)
 8000942:	4896      	ldr	r0, [pc, #600]	@ (8000b9c <main+0x2b4>)
 8000944:	f003 fa98 	bl	8003e78 <HAL_UART_Receive_IT>
  while (1)
  {

    // adding logic to implement heartbeat
    static uint32_t last_heartbeat_time = 0;
    if (HAL_GetTick() - last_heartbeat_time >= 500) // toggling for 1Hz (500ms on / 500ms off)
 8000948:	f000 fe1c 	bl	8001584 <HAL_GetTick>
 800094c:	4602      	mov	r2, r0
 800094e:	4b9b      	ldr	r3, [pc, #620]	@ (8000bbc <main+0x2d4>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	1ad3      	subs	r3, r2, r3
 8000954:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000958:	d309      	bcc.n	800096e <main+0x86>
    {
      HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 800095a:	2120      	movs	r1, #32
 800095c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000960:	f001 f9aa 	bl	8001cb8 <HAL_GPIO_TogglePin>
      last_heartbeat_time = HAL_GetTick();
 8000964:	f000 fe0e 	bl	8001584 <HAL_GetTick>
 8000968:	4603      	mov	r3, r0
 800096a:	4a94      	ldr	r2, [pc, #592]	@ (8000bbc <main+0x2d4>)
 800096c:	6013      	str	r3, [r2, #0]
      // HAL_UART_Transmit(&huart2, HB, sizeof(HB) - 1, 100);
    }
    // show entry data on OLED for UART and KEYPAD
    // Mostrar en OLED los datos del teclado
    if (keypad_data != 0xFF)
 800096e:	4b94      	ldr	r3, [pc, #592]	@ (8000bc0 <main+0x2d8>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2bff      	cmp	r3, #255	@ 0xff
 8000974:	d017      	beq.n	80009a6 <main+0xbe>
    {
      ssd1306_SetCursor(20, 20);
 8000976:	2114      	movs	r1, #20
 8000978:	2014      	movs	r0, #20
 800097a:	f004 ff7d 	bl	8005878 <ssd1306_SetCursor>
      char buffer[2] = {keypad_data, '\0'};
 800097e:	4b90      	ldr	r3, [pc, #576]	@ (8000bc0 <main+0x2d8>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8000986:	2300      	movs	r3, #0
 8000988:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
      ssd1306_WriteString(buffer, Font_11x18, White);
 800098c:	4b8d      	ldr	r3, [pc, #564]	@ (8000bc4 <main+0x2dc>)
 800098e:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000992:	2201      	movs	r2, #1
 8000994:	9200      	str	r2, [sp, #0]
 8000996:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000998:	f004 ff48 	bl	800582c <ssd1306_WriteString>
      ssd1306_UpdateScreen();
 800099c:	f004 fe3a 	bl	8005614 <ssd1306_UpdateScreen>
      keypad_data = 0xFF;
 80009a0:	4b87      	ldr	r3, [pc, #540]	@ (8000bc0 <main+0x2d8>)
 80009a2:	22ff      	movs	r2, #255	@ 0xff
 80009a4:	701a      	strb	r2, [r3, #0]
    }

    if (keypad_data1 != 0xFF)
 80009a6:	4b88      	ldr	r3, [pc, #544]	@ (8000bc8 <main+0x2e0>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2bff      	cmp	r3, #255	@ 0xff
 80009ac:	d017      	beq.n	80009de <main+0xf6>
    {
      ssd1306_SetCursor(40, 20);
 80009ae:	2114      	movs	r1, #20
 80009b0:	2028      	movs	r0, #40	@ 0x28
 80009b2:	f004 ff61 	bl	8005878 <ssd1306_SetCursor>
      char buffer[2] = {keypad_data1, '\0'};
 80009b6:	4b84      	ldr	r3, [pc, #528]	@ (8000bc8 <main+0x2e0>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80009be:	2300      	movs	r3, #0
 80009c0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
      ssd1306_WriteString(buffer, Font_11x18, White);
 80009c4:	4b7f      	ldr	r3, [pc, #508]	@ (8000bc4 <main+0x2dc>)
 80009c6:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80009ca:	2201      	movs	r2, #1
 80009cc:	9200      	str	r2, [sp, #0]
 80009ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009d0:	f004 ff2c 	bl	800582c <ssd1306_WriteString>
      ssd1306_UpdateScreen();
 80009d4:	f004 fe1e 	bl	8005614 <ssd1306_UpdateScreen>
      keypad_data1 = 0xFF;
 80009d8:	4b7b      	ldr	r3, [pc, #492]	@ (8000bc8 <main+0x2e0>)
 80009da:	22ff      	movs	r2, #255	@ 0xff
 80009dc:	701a      	strb	r2, [r3, #0]
    }

    // show UART entry on OLED
    if (usart2_data != 0xFF)
 80009de:	4b76      	ldr	r3, [pc, #472]	@ (8000bb8 <main+0x2d0>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2bff      	cmp	r3, #255	@ 0xff
 80009e4:	d017      	beq.n	8000a16 <main+0x12e>
    {
      ssd1306_SetCursor(20, 40);
 80009e6:	2128      	movs	r1, #40	@ 0x28
 80009e8:	2014      	movs	r0, #20
 80009ea:	f004 ff45 	bl	8005878 <ssd1306_SetCursor>
      char buffer[2] = {usart2_data, '\0'};
 80009ee:	4b72      	ldr	r3, [pc, #456]	@ (8000bb8 <main+0x2d0>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80009f6:	2300      	movs	r3, #0
 80009f8:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
      ssd1306_WriteString(buffer, Font_11x18, White);
 80009fc:	4b71      	ldr	r3, [pc, #452]	@ (8000bc4 <main+0x2dc>)
 80009fe:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000a02:	2201      	movs	r2, #1
 8000a04:	9200      	str	r2, [sp, #0]
 8000a06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a08:	f004 ff10 	bl	800582c <ssd1306_WriteString>
      ssd1306_UpdateScreen();
 8000a0c:	f004 fe02 	bl	8005614 <ssd1306_UpdateScreen>
      usart2_data = 0xFF;
 8000a10:	4b69      	ldr	r3, [pc, #420]	@ (8000bb8 <main+0x2d0>)
 8000a12:	22ff      	movs	r2, #255	@ 0xff
 8000a14:	701a      	strb	r2, [r3, #0]
    }

    // implementing arithmetic logic


    if (operation_flag == 1)
 8000a16:	4b6d      	ldr	r3, [pc, #436]	@ (8000bcc <main+0x2e4>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d193      	bne.n	8000948 <main+0x60>
    {
      uint32_t num1 = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
      uint32_t num2 = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	63bb      	str	r3, [r7, #56]	@ 0x38
      uint8_t digit;

      while (ring_buffer_is_empty(&keypad_rb) == 0)
 8000a28:	e010      	b.n	8000a4c <main+0x164>
      {
        ring_buffer_read(&keypad_rb, &digit);
 8000a2a:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4860      	ldr	r0, [pc, #384]	@ (8000bb4 <main+0x2cc>)
 8000a32:	f000 fb00 	bl	8001036 <ring_buffer_read>
        num1 = num1 * 10 + (digit - '0');
 8000a36:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000a38:	4613      	mov	r3, r2
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	4413      	add	r3, r2
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	461a      	mov	r2, r3
 8000a42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000a46:	4413      	add	r3, r2
 8000a48:	3b30      	subs	r3, #48	@ 0x30
 8000a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      while (ring_buffer_is_empty(&keypad_rb) == 0)
 8000a4c:	4859      	ldr	r0, [pc, #356]	@ (8000bb4 <main+0x2cc>)
 8000a4e:	f000 fa9c 	bl	8000f8a <ring_buffer_is_empty>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d0e8      	beq.n	8000a2a <main+0x142>
      }


      while (ring_buffer_is_empty(&keypad1_rb) == 0)
 8000a58:	e010      	b.n	8000a7c <main+0x194>
      {
        ring_buffer_read(&keypad1_rb, &digit);
 8000a5a:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 8000a5e:	4619      	mov	r1, r3
 8000a60:	485b      	ldr	r0, [pc, #364]	@ (8000bd0 <main+0x2e8>)
 8000a62:	f000 fae8 	bl	8001036 <ring_buffer_read>
        num2 = num2 * 10 + (digit - '0');
 8000a66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a68:	4613      	mov	r3, r2
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	4413      	add	r3, r2
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	461a      	mov	r2, r3
 8000a72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000a76:	4413      	add	r3, r2
 8000a78:	3b30      	subs	r3, #48	@ 0x30
 8000a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
      while (ring_buffer_is_empty(&keypad1_rb) == 0)
 8000a7c:	4854      	ldr	r0, [pc, #336]	@ (8000bd0 <main+0x2e8>)
 8000a7e:	f000 fa84 	bl	8000f8a <ring_buffer_is_empty>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d0e8      	beq.n	8000a5a <main+0x172>
      }

      // scanning uart operator
      uint8_t operator= 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
      ring_buffer_read(&usart2_rb, &operator);
 8000a8e:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 8000a92:	4619      	mov	r1, r3
 8000a94:	4845      	ldr	r0, [pc, #276]	@ (8000bac <main+0x2c4>)
 8000a96:	f000 face 	bl	8001036 <ring_buffer_read>

      // realize respective arithmetic operation
      int32_t result = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	637b      	str	r3, [r7, #52]	@ 0x34
      switch (operator)
 8000a9e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000aa2:	3b2a      	subs	r3, #42	@ 0x2a
 8000aa4:	2b05      	cmp	r3, #5
 8000aa6:	d83c      	bhi.n	8000b22 <main+0x23a>
 8000aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8000ab0 <main+0x1c8>)
 8000aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aae:	bf00      	nop
 8000ab0:	08000add 	.word	0x08000add
 8000ab4:	08000ac9 	.word	0x08000ac9
 8000ab8:	08000b23 	.word	0x08000b23
 8000abc:	08000ad3 	.word	0x08000ad3
 8000ac0:	08000b23 	.word	0x08000b23
 8000ac4:	08000ae9 	.word	0x08000ae9
      {
      case '+':
        result = num1 + num2;
 8000ac8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000acc:	4413      	add	r3, r2
 8000ace:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8000ad0:	e02b      	b.n	8000b2a <main+0x242>
      case '-':
        result = num1 - num2;
 8000ad2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8000ada:	e026      	b.n	8000b2a <main+0x242>
      case '*':
        result = num1 * num2;
 8000adc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ade:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000ae0:	fb02 f303 	mul.w	r3, r2, r3
 8000ae4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8000ae6:	e020      	b.n	8000b2a <main+0x242>
      case '/':
        if (num2 != 0) // Validamos división por cero
 8000ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d005      	beq.n	8000afa <main+0x212>
          result = num1 / num2;
 8000aee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af6:	637b      	str	r3, [r7, #52]	@ 0x34
          ssd1306_SetCursor(20, 30);
          ssd1306_WriteString("Error: Div 0", Font_11x18, White);
          ssd1306_UpdateScreen();
          break;
        }
        break;
 8000af8:	e017      	b.n	8000b2a <main+0x242>
          printf("Error: division by zero not avaliable.\r\n");
 8000afa:	4836      	ldr	r0, [pc, #216]	@ (8000bd4 <main+0x2ec>)
 8000afc:	f005 f830 	bl	8005b60 <puts>
          ssd1306_Fill(Black);
 8000b00:	2000      	movs	r0, #0
 8000b02:	f004 fd6f 	bl	80055e4 <ssd1306_Fill>
          ssd1306_SetCursor(20, 30);
 8000b06:	211e      	movs	r1, #30
 8000b08:	2014      	movs	r0, #20
 8000b0a:	f004 feb5 	bl	8005878 <ssd1306_SetCursor>
          ssd1306_WriteString("Error: Div 0", Font_11x18, White);
 8000b0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc4 <main+0x2dc>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	9200      	str	r2, [sp, #0]
 8000b14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b16:	4830      	ldr	r0, [pc, #192]	@ (8000bd8 <main+0x2f0>)
 8000b18:	f004 fe88 	bl	800582c <ssd1306_WriteString>
          ssd1306_UpdateScreen();
 8000b1c:	f004 fd7a 	bl	8005614 <ssd1306_UpdateScreen>
          break;
 8000b20:	e003      	b.n	8000b2a <main+0x242>
      default:
        printf("operator not validate \r\n");
 8000b22:	482e      	ldr	r0, [pc, #184]	@ (8000bdc <main+0x2f4>)
 8000b24:	f005 f81c 	bl	8005b60 <puts>
        break;
 8000b28:	bf00      	nop
      }
      // validating last functional requirement (CONTROL STATE LED)
      if (result >  0)
 8000b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	dd06      	ble.n	8000b3e <main+0x256>
            {
              HAL_GPIO_WritePin(GPIOA, LED3_Pin, 1); //  > 0
 8000b30:	2201      	movs	r2, #1
 8000b32:	2140      	movs	r1, #64	@ 0x40
 8000b34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b38:	f001 f8a6 	bl	8001c88 <HAL_GPIO_WritePin>
 8000b3c:	e005      	b.n	8000b4a <main+0x262>
            }
            else // less or equal
            {
              HAL_GPIO_WritePin(GPIOA, LED3_Pin, 0); // <=0
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2140      	movs	r1, #64	@ 0x40
 8000b42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b46:	f001 f89f 	bl	8001c88 <HAL_GPIO_WritePin>
            }

      // deploy result on  OLED and UART
      ssd1306_Fill(Black);
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f004 fd4a 	bl	80055e4 <ssd1306_Fill>
      char result_str[32];
      sprintf(result_str, "%ld () %ld = %ld", num1, num2, result);
 8000b50:	1d38      	adds	r0, r7, #4
 8000b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000b5a:	4921      	ldr	r1, [pc, #132]	@ (8000be0 <main+0x2f8>)
 8000b5c:	f005 f808 	bl	8005b70 <siprintf>
      ssd1306_SetCursor(30, 30);
 8000b60:	211e      	movs	r1, #30
 8000b62:	201e      	movs	r0, #30
 8000b64:	f004 fe88 	bl	8005878 <ssd1306_SetCursor>
      ssd1306_WriteString(result_str, Font_6x8, White);
 8000b68:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba0 <main+0x2b8>)
 8000b6a:	1d38      	adds	r0, r7, #4
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	9200      	str	r2, [sp, #0]
 8000b70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b72:	f004 fe5b 	bl	800582c <ssd1306_WriteString>
      ssd1306_UpdateScreen();
 8000b76:	f004 fd4d 	bl	8005614 <ssd1306_UpdateScreen>

      printf("Resultado: %ld\r\n", result); // display via UART
 8000b7a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000b7c:	4819      	ldr	r0, [pc, #100]	@ (8000be4 <main+0x2fc>)
 8000b7e:	f004 ff87 	bl	8005a90 <iprintf>
      printf("%ld () %ld = %s\r\n", num1 ,num2, result_str);
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000b86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000b88:	4817      	ldr	r0, [pc, #92]	@ (8000be8 <main+0x300>)
 8000b8a:	f004 ff81 	bl	8005a90 <iprintf>

      // reset operatioo flag

      operation_flag = 0;
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <main+0x2e4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
  {
 8000b94:	e6d8      	b.n	8000948 <main+0x60>
 8000b96:	bf00      	nop
 8000b98:	20000018 	.word	0x20000018
 8000b9c:	20000114 	.word	0x20000114
 8000ba0:	080080e0 	.word	0x080080e0
 8000ba4:	08006ca4 	.word	0x08006ca4
 8000ba8:	200001b0 	.word	0x200001b0
 8000bac:	200001b4 	.word	0x200001b4
 8000bb0:	2000019c 	.word	0x2000019c
 8000bb4:	200001a0 	.word	0x200001a0
 8000bb8:	20000014 	.word	0x20000014
 8000bbc:	200001c0 	.word	0x200001c0
 8000bc0:	20000012 	.word	0x20000012
 8000bc4:	080080ec 	.word	0x080080ec
 8000bc8:	20000013 	.word	0x20000013
 8000bcc:	200001bc 	.word	0x200001bc
 8000bd0:	200001a8 	.word	0x200001a8
 8000bd4:	08006cc0 	.word	0x08006cc0
 8000bd8:	08006ce8 	.word	0x08006ce8
 8000bdc:	08006cf8 	.word	0x08006cf8
 8000be0:	08006d10 	.word	0x08006d10
 8000be4:	08006d24 	.word	0x08006d24
 8000be8:	08006d38 	.word	0x08006d38

08000bec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b096      	sub	sp, #88	@ 0x58
 8000bf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	2244      	movs	r2, #68	@ 0x44
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f005 f8ca 	bl	8005d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c00:	463b      	mov	r3, r7
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c0e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c12:	f001 fd47 	bl	80026a4 <HAL_PWREx_ControlVoltageScaling>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c1c:	f000 f97c 	bl	8000f18 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c20:	2302      	movs	r3, #2
 8000c22:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c28:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c2a:	2310      	movs	r3, #16
 8000c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c32:	2302      	movs	r3, #2
 8000c34:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c36:	2301      	movs	r3, #1
 8000c38:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c3a:	230a      	movs	r3, #10
 8000c3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c3e:	2307      	movs	r3, #7
 8000c40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c42:	2302      	movs	r3, #2
 8000c44:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c46:	2302      	movs	r3, #2
 8000c48:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f001 fd7e 	bl	8002750 <HAL_RCC_OscConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c5a:	f000 f95d 	bl	8000f18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5e:	230f      	movs	r3, #15
 8000c60:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c62:	2303      	movs	r3, #3
 8000c64:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c72:	463b      	mov	r3, r7
 8000c74:	2104      	movs	r1, #4
 8000c76:	4618      	mov	r0, r3
 8000c78:	f002 f946 	bl	8002f08 <HAL_RCC_ClockConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c82:	f000 f949 	bl	8000f18 <Error_Handler>
  }
}
 8000c86:	bf00      	nop
 8000c88:	3758      	adds	r7, #88	@ 0x58
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c94:	4b1b      	ldr	r3, [pc, #108]	@ (8000d04 <MX_I2C1_Init+0x74>)
 8000c96:	4a1c      	ldr	r2, [pc, #112]	@ (8000d08 <MX_I2C1_Init+0x78>)
 8000c98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d04 <MX_I2C1_Init+0x74>)
 8000c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000d0c <MX_I2C1_Init+0x7c>)
 8000c9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ca0:	4b18      	ldr	r3, [pc, #96]	@ (8000d04 <MX_I2C1_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ca6:	4b17      	ldr	r3, [pc, #92]	@ (8000d04 <MX_I2C1_Init+0x74>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cac:	4b15      	ldr	r3, [pc, #84]	@ (8000d04 <MX_I2C1_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cb2:	4b14      	ldr	r3, [pc, #80]	@ (8000d04 <MX_I2C1_Init+0x74>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cb8:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <MX_I2C1_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	@ (8000d04 <MX_I2C1_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d04 <MX_I2C1_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cca:	480e      	ldr	r0, [pc, #56]	@ (8000d04 <MX_I2C1_Init+0x74>)
 8000ccc:	f001 f826 	bl	8001d1c <HAL_I2C_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cd6:	f000 f91f 	bl	8000f18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4809      	ldr	r0, [pc, #36]	@ (8000d04 <MX_I2C1_Init+0x74>)
 8000cde:	f001 fc3b 	bl	8002558 <HAL_I2CEx_ConfigAnalogFilter>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ce8:	f000 f916 	bl	8000f18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cec:	2100      	movs	r1, #0
 8000cee:	4805      	ldr	r0, [pc, #20]	@ (8000d04 <MX_I2C1_Init+0x74>)
 8000cf0:	f001 fc7d 	bl	80025ee <HAL_I2CEx_ConfigDigitalFilter>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cfa:	f000 f90d 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	200000c0 	.word	0x200000c0
 8000d08:	40005400 	.word	0x40005400
 8000d0c:	10d19ce4 	.word	0x10d19ce4

08000d10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d14:	4b14      	ldr	r3, [pc, #80]	@ (8000d68 <MX_USART2_UART_Init+0x58>)
 8000d16:	4a15      	ldr	r2, [pc, #84]	@ (8000d6c <MX_USART2_UART_Init+0x5c>)
 8000d18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d1a:	4b13      	ldr	r3, [pc, #76]	@ (8000d68 <MX_USART2_UART_Init+0x58>)
 8000d1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d22:	4b11      	ldr	r3, [pc, #68]	@ (8000d68 <MX_USART2_UART_Init+0x58>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	@ (8000d68 <MX_USART2_UART_Init+0x58>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d68 <MX_USART2_UART_Init+0x58>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d34:	4b0c      	ldr	r3, [pc, #48]	@ (8000d68 <MX_USART2_UART_Init+0x58>)
 8000d36:	220c      	movs	r2, #12
 8000d38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d68 <MX_USART2_UART_Init+0x58>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d40:	4b09      	ldr	r3, [pc, #36]	@ (8000d68 <MX_USART2_UART_Init+0x58>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d46:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <MX_USART2_UART_Init+0x58>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <MX_USART2_UART_Init+0x58>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d52:	4805      	ldr	r0, [pc, #20]	@ (8000d68 <MX_USART2_UART_Init+0x58>)
 8000d54:	f002 ffb8 	bl	8003cc8 <HAL_UART_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d5e:	f000 f8db 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000114 	.word	0x20000114
 8000d6c:	40004400 	.word	0x40004400

08000d70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	@ 0x28
 8000d74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d86:	4b61      	ldr	r3, [pc, #388]	@ (8000f0c <MX_GPIO_Init+0x19c>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8a:	4a60      	ldr	r2, [pc, #384]	@ (8000f0c <MX_GPIO_Init+0x19c>)
 8000d8c:	f043 0304 	orr.w	r3, r3, #4
 8000d90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d92:	4b5e      	ldr	r3, [pc, #376]	@ (8000f0c <MX_GPIO_Init+0x19c>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d96:	f003 0304 	and.w	r3, r3, #4
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d9e:	4b5b      	ldr	r3, [pc, #364]	@ (8000f0c <MX_GPIO_Init+0x19c>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da2:	4a5a      	ldr	r2, [pc, #360]	@ (8000f0c <MX_GPIO_Init+0x19c>)
 8000da4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000da8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000daa:	4b58      	ldr	r3, [pc, #352]	@ (8000f0c <MX_GPIO_Init+0x19c>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	4b55      	ldr	r3, [pc, #340]	@ (8000f0c <MX_GPIO_Init+0x19c>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dba:	4a54      	ldr	r2, [pc, #336]	@ (8000f0c <MX_GPIO_Init+0x19c>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc2:	4b52      	ldr	r3, [pc, #328]	@ (8000f0c <MX_GPIO_Init+0x19c>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dce:	4b4f      	ldr	r3, [pc, #316]	@ (8000f0c <MX_GPIO_Init+0x19c>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd2:	4a4e      	ldr	r2, [pc, #312]	@ (8000f0c <MX_GPIO_Init+0x19c>)
 8000dd4:	f043 0302 	orr.w	r3, r3, #2
 8000dd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dda:	4b4c      	ldr	r3, [pc, #304]	@ (8000f0c <MX_GPIO_Init+0x19c>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2160      	movs	r1, #96	@ 0x60
 8000dea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dee:	f000 ff4b 	bl	8001c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, GPIO_PIN_SET);
 8000df2:	2201      	movs	r2, #1
 8000df4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000df8:	4845      	ldr	r0, [pc, #276]	@ (8000f10 <MX_GPIO_Init+0x1a0>)
 8000dfa:	f000 ff45 	bl	8001c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, GPIO_PIN_SET);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2180      	movs	r1, #128	@ 0x80
 8000e02:	4844      	ldr	r0, [pc, #272]	@ (8000f14 <MX_GPIO_Init+0x1a4>)
 8000e04:	f000 ff40 	bl	8001c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROW_3_Pin|ROW_2_Pin, GPIO_PIN_SET);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000e0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e12:	f000 ff39 	bl	8001c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e1c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4839      	ldr	r0, [pc, #228]	@ (8000f14 <MX_GPIO_Init+0x1a4>)
 8000e2e:	f000 fd69 	bl	8001904 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED3_Pin ROW_3_Pin ROW_2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED3_Pin|ROW_3_Pin|ROW_2_Pin;
 8000e32:	f44f 7358 	mov.w	r3, #864	@ 0x360
 8000e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e4e:	f000 fd59 	bl	8001904 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROW_4_Pin */
  GPIO_InitStruct.Pin = ROW_4_Pin;
 8000e52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ROW_4_GPIO_Port, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4829      	ldr	r0, [pc, #164]	@ (8000f10 <MX_GPIO_Init+0x1a0>)
 8000e6c:	f000 fd4a 	bl	8001904 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROW_1_Pin */
  GPIO_InitStruct.Pin = ROW_1_Pin;
 8000e70:	2380      	movs	r3, #128	@ 0x80
 8000e72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ROW_1_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	4823      	ldr	r0, [pc, #140]	@ (8000f14 <MX_GPIO_Init+0x1a4>)
 8000e88:	f000 fd3c 	bl	8001904 <HAL_GPIO_Init>

  /*Configure GPIO pin : COL_4_Pin */
  GPIO_InitStruct.Pin = COL_4_Pin;
 8000e8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e92:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COL_4_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea6:	f000 fd2d 	bl	8001904 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL_3_Pin COL_1_Pin COL_2_Pin */
  GPIO_InitStruct.Pin = COL_3_Pin|COL_1_Pin|COL_2_Pin;
 8000eaa:	2338      	movs	r3, #56	@ 0x38
 8000eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4814      	ldr	r0, [pc, #80]	@ (8000f10 <MX_GPIO_Init+0x1a0>)
 8000ec0:	f000 fd20 	bl	8001904 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	2009      	movs	r0, #9
 8000eca:	f000 fc66 	bl	800179a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000ece:	2009      	movs	r0, #9
 8000ed0:	f000 fc7f 	bl	80017d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	200a      	movs	r0, #10
 8000eda:	f000 fc5e 	bl	800179a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ede:	200a      	movs	r0, #10
 8000ee0:	f000 fc77 	bl	80017d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2017      	movs	r0, #23
 8000eea:	f000 fc56 	bl	800179a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000eee:	2017      	movs	r0, #23
 8000ef0:	f000 fc6f 	bl	80017d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2028      	movs	r0, #40	@ 0x28
 8000efa:	f000 fc4e 	bl	800179a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000efe:	2028      	movs	r0, #40	@ 0x28
 8000f00:	f000 fc67 	bl	80017d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f04:	bf00      	nop
 8000f06:	3728      	adds	r7, #40	@ 0x28
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	48000400 	.word	0x48000400
 8000f14:	48000800 	.word	0x48000800

08000f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f1c:	b672      	cpsid	i
}
 8000f1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <Error_Handler+0x8>

08000f24 <ring_buffer_init>:

#include "ring_buffer.h"

void ring_buffer_init(ring_buffer_t *rb, uint8_t *mem_add, uint8_t cap)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	71fb      	strb	r3, [r7, #7]
    rb->buffer = mem_add;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	68ba      	ldr	r2, [r7, #8]
 8000f36:	601a      	str	r2, [r3, #0]
    rb->capacity = cap;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	79fa      	ldrb	r2, [r7, #7]
 8000f3c:	71da      	strb	r2, [r3, #7]

    ring_buffer_reset(rb);
 8000f3e:	68f8      	ldr	r0, [r7, #12]
 8000f40:	f000 f804 	bl	8000f4c <ring_buffer_reset>
}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <ring_buffer_reset>:
 * @brief Esta funcion reinicia los datos disponibles en el buffer
 *
 * @retval size: cantidad de datos disponibles
 */
void ring_buffer_reset(ring_buffer_t *rb)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
    rb->head = 0;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	711a      	strb	r2, [r3, #4]
    rb->tail = 0;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	715a      	strb	r2, [r3, #5]
    rb->is_full = 0;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	719a      	strb	r2, [r3, #6]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <ring_buffer_is_full>:
 * @brief Esta funcion revisa si el buffer esta lleno
 *
 * @retval is_full: 0 si no esta lleno, 1 si esta lleno
 */
uint8_t ring_buffer_is_full(ring_buffer_t *rb)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
    return rb->is_full;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	799b      	ldrb	r3, [r3, #6]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <ring_buffer_is_empty>:
 * @brief Esta funcion revisa si el buffer esta vacio
 *
 * @retval 0 si esta vacio, 1 si no esta vacio
 */
uint8_t ring_buffer_is_empty(ring_buffer_t *rb)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b083      	sub	sp, #12
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
    // Returns 1 if the buffer is empty, 0 otherwise.
    // The buffer is empty if the head and tail pointers are equal, and the is_full flag is not set.

    return ((rb->head == rb->tail) && (rb->is_full == 0)) ? 1 : 0;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	791a      	ldrb	r2, [r3, #4]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	795b      	ldrb	r3, [r3, #5]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d105      	bne.n	8000faa <ring_buffer_is_empty+0x20>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	799b      	ldrb	r3, [r3, #6]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <ring_buffer_is_empty+0x20>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e000      	b.n	8000fac <ring_buffer_is_empty+0x22>
 8000faa:	2300      	movs	r3, #0
 8000fac:	b2db      	uxtb	r3, r3
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <ring_buffer_write>:
 * @param data: el dato que se va a escribir
 *
 * @retval Ninguno
 */
void ring_buffer_write(ring_buffer_t *rb, uint8_t data)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	70fb      	strb	r3, [r7, #3]
    rb->buffer[rb->head] = data;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	7912      	ldrb	r2, [r2, #4]
 8000fce:	4413      	add	r3, r2
 8000fd0:	78fa      	ldrb	r2, [r7, #3]
 8000fd2:	701a      	strb	r2, [r3, #0]
    rb->head = rb->head + 1;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	791b      	ldrb	r3, [r3, #4]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	711a      	strb	r2, [r3, #4]

    if (rb->head >= rb->capacity)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	791a      	ldrb	r2, [r3, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	79db      	ldrb	r3, [r3, #7]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d302      	bcc.n	8000ff2 <ring_buffer_write+0x38>
    { // si la cabeza llega al final de la memoria
        rb->head = 0;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	711a      	strb	r2, [r3, #4]
    }

    if (rb->is_full != 0)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	799b      	ldrb	r3, [r3, #6]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d005      	beq.n	8001006 <ring_buffer_write+0x4c>
    { // si se pierden datos viejos (continar enviando datos)
        rb->tail = rb->tail + 1;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	795b      	ldrb	r3, [r3, #5]
 8000ffe:	3301      	adds	r3, #1
 8001000:	b2da      	uxtb	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	715a      	strb	r2, [r3, #5]
    }

    if (rb->tail >= rb->capacity)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	795a      	ldrb	r2, [r3, #5]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	79db      	ldrb	r3, [r3, #7]
 800100e:	429a      	cmp	r2, r3
 8001010:	d302      	bcc.n	8001018 <ring_buffer_write+0x5e>
    {                 // si la cola llega al final de la memoria
        rb->tail = 0; // avoiding unncesary data
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	715a      	strb	r2, [r3, #5]
    }

    if (rb->head == rb->tail)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	791a      	ldrb	r2, [r3, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	795b      	ldrb	r3, [r3, #5]
 8001020:	429a      	cmp	r2, r3
 8001022:	d102      	bne.n	800102a <ring_buffer_write+0x70>
    { // si la cabeza alcanza la cola
        rb->is_full = 1;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2201      	movs	r2, #1
 8001028:	719a      	strb	r2, [r3, #6]
    }
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <ring_buffer_read>:
 * @param data: la direccion de donde se va a escribir el dato
 *
 * @retval 1: hay datos disponibles, 0: no hay datos
 */
uint8_t ring_buffer_read(ring_buffer_t *rb, uint8_t *data) // 0x20
{
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
 800103e:	6039      	str	r1, [r7, #0]
    if ((rb->is_full != 0) || (rb->head != rb->tail))
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	799b      	ldrb	r3, [r3, #6]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d105      	bne.n	8001054 <ring_buffer_read+0x1e>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	791a      	ldrb	r2, [r3, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	795b      	ldrb	r3, [r3, #5]
 8001050:	429a      	cmp	r2, r3
 8001052:	d01b      	beq.n	800108c <ring_buffer_read+0x56>
    {                                 // data available
        *data = rb->buffer[rb->tail]; // add: 0x20, val: buffer
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	7952      	ldrb	r2, [r2, #5]
 800105c:	4413      	add	r3, r2
 800105e:	781a      	ldrb	r2, [r3, #0]
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	701a      	strb	r2, [r3, #0]
        rb->tail = rb->tail + 1;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	795b      	ldrb	r3, [r3, #5]
 8001068:	3301      	adds	r3, #1
 800106a:	b2da      	uxtb	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	715a      	strb	r2, [r3, #5]
        if (rb->tail >= rb->capacity)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	795a      	ldrb	r2, [r3, #5]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	79db      	ldrb	r3, [r3, #7]
 8001078:	429a      	cmp	r2, r3
 800107a:	d302      	bcc.n	8001082 <ring_buffer_read+0x4c>
        {
            rb->tail = 0;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	715a      	strb	r2, [r3, #5]
        }
        rb->is_full = 0;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	719a      	strb	r2, [r3, #6]

        return 1; // buffer con datos
 8001088:	2301      	movs	r3, #1
 800108a:	e000      	b.n	800108e <ring_buffer_read+0x58>
    }
    return 0; // buffer vacio
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	4b0f      	ldr	r3, [pc, #60]	@ (80010e0 <HAL_MspInit+0x44>)
 80010a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010a6:	4a0e      	ldr	r2, [pc, #56]	@ (80010e0 <HAL_MspInit+0x44>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80010ae:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <HAL_MspInit+0x44>)
 80010b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ba:	4b09      	ldr	r3, [pc, #36]	@ (80010e0 <HAL_MspInit+0x44>)
 80010bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010be:	4a08      	ldr	r2, [pc, #32]	@ (80010e0 <HAL_MspInit+0x44>)
 80010c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80010c6:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <HAL_MspInit+0x44>)
 80010c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40021000 	.word	0x40021000

080010e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b0ac      	sub	sp, #176	@ 0xb0
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2288      	movs	r2, #136	@ 0x88
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f004 fe45 	bl	8005d94 <memset>
  if(hi2c->Instance==I2C1)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a21      	ldr	r2, [pc, #132]	@ (8001194 <HAL_I2C_MspInit+0xb0>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d13b      	bne.n	800118c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001114:	2340      	movs	r3, #64	@ 0x40
 8001116:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001118:	2300      	movs	r3, #0
 800111a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4618      	mov	r0, r3
 8001122:	f002 f915 	bl	8003350 <HAL_RCCEx_PeriphCLKConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800112c:	f7ff fef4 	bl	8000f18 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001130:	4b19      	ldr	r3, [pc, #100]	@ (8001198 <HAL_I2C_MspInit+0xb4>)
 8001132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001134:	4a18      	ldr	r2, [pc, #96]	@ (8001198 <HAL_I2C_MspInit+0xb4>)
 8001136:	f043 0302 	orr.w	r3, r3, #2
 800113a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800113c:	4b16      	ldr	r3, [pc, #88]	@ (8001198 <HAL_I2C_MspInit+0xb4>)
 800113e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001148:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800114c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001150:	2312      	movs	r3, #18
 8001152:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115c:	2303      	movs	r3, #3
 800115e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001162:	2304      	movs	r3, #4
 8001164:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001168:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800116c:	4619      	mov	r1, r3
 800116e:	480b      	ldr	r0, [pc, #44]	@ (800119c <HAL_I2C_MspInit+0xb8>)
 8001170:	f000 fbc8 	bl	8001904 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001174:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <HAL_I2C_MspInit+0xb4>)
 8001176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001178:	4a07      	ldr	r2, [pc, #28]	@ (8001198 <HAL_I2C_MspInit+0xb4>)
 800117a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800117e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001180:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <HAL_I2C_MspInit+0xb4>)
 8001182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001184:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800118c:	bf00      	nop
 800118e:	37b0      	adds	r7, #176	@ 0xb0
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40005400 	.word	0x40005400
 8001198:	40021000 	.word	0x40021000
 800119c:	48000400 	.word	0x48000400

080011a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b0ac      	sub	sp, #176	@ 0xb0
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	2288      	movs	r2, #136	@ 0x88
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f004 fde7 	bl	8005d94 <memset>
  if(huart->Instance==USART2)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a25      	ldr	r2, [pc, #148]	@ (8001260 <HAL_UART_MspInit+0xc0>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d143      	bne.n	8001258 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011d0:	2302      	movs	r3, #2
 80011d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4618      	mov	r0, r3
 80011de:	f002 f8b7 	bl	8003350 <HAL_RCCEx_PeriphCLKConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011e8:	f7ff fe96 	bl	8000f18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001264 <HAL_UART_MspInit+0xc4>)
 80011ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001264 <HAL_UART_MspInit+0xc4>)
 80011f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80011f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001264 <HAL_UART_MspInit+0xc4>)
 80011fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001204:	4b17      	ldr	r3, [pc, #92]	@ (8001264 <HAL_UART_MspInit+0xc4>)
 8001206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001208:	4a16      	ldr	r2, [pc, #88]	@ (8001264 <HAL_UART_MspInit+0xc4>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001210:	4b14      	ldr	r3, [pc, #80]	@ (8001264 <HAL_UART_MspInit+0xc4>)
 8001212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800121c:	230c      	movs	r3, #12
 800121e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	2302      	movs	r3, #2
 8001224:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001234:	2307      	movs	r3, #7
 8001236:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800123e:	4619      	mov	r1, r3
 8001240:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001244:	f000 fb5e 	bl	8001904 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001248:	2200      	movs	r2, #0
 800124a:	2100      	movs	r1, #0
 800124c:	2026      	movs	r0, #38	@ 0x26
 800124e:	f000 faa4 	bl	800179a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001252:	2026      	movs	r0, #38	@ 0x26
 8001254:	f000 fabd 	bl	80017d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001258:	bf00      	nop
 800125a:	37b0      	adds	r7, #176	@ 0xb0
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40004400 	.word	0x40004400
 8001264:	40021000 	.word	0x40021000

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <NMI_Handler+0x4>

08001270 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <HardFault_Handler+0x4>

08001278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <MemManage_Handler+0x4>

08001280 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <BusFault_Handler+0x4>

08001288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <UsageFault_Handler+0x4>

08001290 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012be:	f000 f94d 	bl	800155c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_3_Pin);
 80012ca:	2008      	movs	r0, #8
 80012cc:	f000 fd0e 	bl	8001cec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_1_Pin);
 80012d8:	2010      	movs	r0, #16
 80012da:	f000 fd07 	bl	8001cec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_2_Pin);
 80012e6:	2020      	movs	r0, #32
 80012e8:	f000 fd00 	bl	8001cec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012f4:	4802      	ldr	r0, [pc, #8]	@ (8001300 <USART2_IRQHandler+0x10>)
 80012f6:	f002 fe0b 	bl	8003f10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000114 	.word	0x20000114

08001304 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_4_Pin);
 8001308:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800130c:	f000 fcee 	bl	8001cec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001310:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001314:	f000 fcea 	bl	8001cec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}

0800131c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	e00a      	b.n	8001344 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800132e:	f3af 8000 	nop.w
 8001332:	4601      	mov	r1, r0
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	1c5a      	adds	r2, r3, #1
 8001338:	60ba      	str	r2, [r7, #8]
 800133a:	b2ca      	uxtb	r2, r1
 800133c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	3301      	adds	r3, #1
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	429a      	cmp	r2, r3
 800134a:	dbf0      	blt.n	800132e <_read+0x12>
  }

  return len;
 800134c:	687b      	ldr	r3, [r7, #4]
}
 800134e:	4618      	mov	r0, r3
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001362:	4618      	mov	r0, r3
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800137e:	605a      	str	r2, [r3, #4]
  return 0;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <_isatty>:

int _isatty(int file)
{
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001396:	2301      	movs	r3, #1
}
 8001398:	4618      	mov	r0, r3
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c8:	4a14      	ldr	r2, [pc, #80]	@ (800141c <_sbrk+0x5c>)
 80013ca:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <_sbrk+0x60>)
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d4:	4b13      	ldr	r3, [pc, #76]	@ (8001424 <_sbrk+0x64>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d102      	bne.n	80013e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013dc:	4b11      	ldr	r3, [pc, #68]	@ (8001424 <_sbrk+0x64>)
 80013de:	4a12      	ldr	r2, [pc, #72]	@ (8001428 <_sbrk+0x68>)
 80013e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013e2:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <_sbrk+0x64>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d207      	bcs.n	8001400 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f0:	f004 fd1e 	bl	8005e30 <__errno>
 80013f4:	4603      	mov	r3, r0
 80013f6:	220c      	movs	r2, #12
 80013f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
 80013fe:	e009      	b.n	8001414 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001400:	4b08      	ldr	r3, [pc, #32]	@ (8001424 <_sbrk+0x64>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001406:	4b07      	ldr	r3, [pc, #28]	@ (8001424 <_sbrk+0x64>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	4a05      	ldr	r2, [pc, #20]	@ (8001424 <_sbrk+0x64>)
 8001410:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001412:	68fb      	ldr	r3, [r7, #12]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20018000 	.word	0x20018000
 8001420:	00000400 	.word	0x00000400
 8001424:	200001c4 	.word	0x200001c4
 8001428:	20000720 	.word	0x20000720

0800142c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <SystemInit+0x20>)
 8001432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001436:	4a05      	ldr	r2, [pc, #20]	@ (800144c <SystemInit+0x20>)
 8001438:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800143c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001450:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001488 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001454:	f7ff ffea 	bl	800142c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001458:	480c      	ldr	r0, [pc, #48]	@ (800148c <LoopForever+0x6>)
  ldr r1, =_edata
 800145a:	490d      	ldr	r1, [pc, #52]	@ (8001490 <LoopForever+0xa>)
  ldr r2, =_sidata
 800145c:	4a0d      	ldr	r2, [pc, #52]	@ (8001494 <LoopForever+0xe>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001460:	e002      	b.n	8001468 <LoopCopyDataInit>

08001462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001466:	3304      	adds	r3, #4

08001468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800146c:	d3f9      	bcc.n	8001462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146e:	4a0a      	ldr	r2, [pc, #40]	@ (8001498 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001470:	4c0a      	ldr	r4, [pc, #40]	@ (800149c <LoopForever+0x16>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001474:	e001      	b.n	800147a <LoopFillZerobss>

08001476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001478:	3204      	adds	r2, #4

0800147a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800147c:	d3fb      	bcc.n	8001476 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800147e:	f004 fcdd 	bl	8005e3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001482:	f7ff fa31 	bl	80008e8 <main>

08001486 <LoopForever>:

LoopForever:
    b LoopForever
 8001486:	e7fe      	b.n	8001486 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001488:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800148c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001490:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001494:	0800813c 	.word	0x0800813c
  ldr r2, =_sbss
 8001498:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 800149c:	20000720 	.word	0x20000720

080014a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014a0:	e7fe      	b.n	80014a0 <ADC1_2_IRQHandler>
	...

080014a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014ae:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <HAL_Init+0x3c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a0b      	ldr	r2, [pc, #44]	@ (80014e0 <HAL_Init+0x3c>)
 80014b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014b8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ba:	2003      	movs	r0, #3
 80014bc:	f000 f962 	bl	8001784 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014c0:	2000      	movs	r0, #0
 80014c2:	f000 f80f 	bl	80014e4 <HAL_InitTick>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d002      	beq.n	80014d2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	71fb      	strb	r3, [r7, #7]
 80014d0:	e001      	b.n	80014d6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014d2:	f7ff fde3 	bl	800109c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014d6:	79fb      	ldrb	r3, [r7, #7]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40022000 	.word	0x40022000

080014e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014ec:	2300      	movs	r3, #0
 80014ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014f0:	4b17      	ldr	r3, [pc, #92]	@ (8001550 <HAL_InitTick+0x6c>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d023      	beq.n	8001540 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014f8:	4b16      	ldr	r3, [pc, #88]	@ (8001554 <HAL_InitTick+0x70>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b14      	ldr	r3, [pc, #80]	@ (8001550 <HAL_InitTick+0x6c>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4619      	mov	r1, r3
 8001502:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001506:	fbb3 f3f1 	udiv	r3, r3, r1
 800150a:	fbb2 f3f3 	udiv	r3, r2, r3
 800150e:	4618      	mov	r0, r3
 8001510:	f000 f96d 	bl	80017ee <HAL_SYSTICK_Config>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10f      	bne.n	800153a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b0f      	cmp	r3, #15
 800151e:	d809      	bhi.n	8001534 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001520:	2200      	movs	r2, #0
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	f04f 30ff 	mov.w	r0, #4294967295
 8001528:	f000 f937 	bl	800179a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800152c:	4a0a      	ldr	r2, [pc, #40]	@ (8001558 <HAL_InitTick+0x74>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	e007      	b.n	8001544 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	73fb      	strb	r3, [r7, #15]
 8001538:	e004      	b.n	8001544 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	73fb      	strb	r3, [r7, #15]
 800153e:	e001      	b.n	8001544 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001544:	7bfb      	ldrb	r3, [r7, #15]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000040 	.word	0x20000040
 8001554:	20000038 	.word	0x20000038
 8001558:	2000003c 	.word	0x2000003c

0800155c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001560:	4b06      	ldr	r3, [pc, #24]	@ (800157c <HAL_IncTick+0x20>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <HAL_IncTick+0x24>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4413      	add	r3, r2
 800156c:	4a04      	ldr	r2, [pc, #16]	@ (8001580 <HAL_IncTick+0x24>)
 800156e:	6013      	str	r3, [r2, #0]
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	20000040 	.word	0x20000040
 8001580:	200001c8 	.word	0x200001c8

08001584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return uwTick;
 8001588:	4b03      	ldr	r3, [pc, #12]	@ (8001598 <HAL_GetTick+0x14>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	200001c8 	.word	0x200001c8

0800159c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a4:	f7ff ffee 	bl	8001584 <HAL_GetTick>
 80015a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b4:	d005      	beq.n	80015c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015b6:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <HAL_Delay+0x44>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4413      	add	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015c2:	bf00      	nop
 80015c4:	f7ff ffde 	bl	8001584 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d8f7      	bhi.n	80015c4 <HAL_Delay+0x28>
  {
  }
}
 80015d4:	bf00      	nop
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000040 	.word	0x20000040

080015e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001600:	4013      	ands	r3, r2
 8001602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800160c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001616:	4a04      	ldr	r2, [pc, #16]	@ (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	60d3      	str	r3, [r2, #12]
}
 800161c:	bf00      	nop
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001630:	4b04      	ldr	r3, [pc, #16]	@ (8001644 <__NVIC_GetPriorityGrouping+0x18>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	0a1b      	lsrs	r3, r3, #8
 8001636:	f003 0307 	and.w	r3, r3, #7
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	2b00      	cmp	r3, #0
 8001658:	db0b      	blt.n	8001672 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	f003 021f 	and.w	r2, r3, #31
 8001660:	4907      	ldr	r1, [pc, #28]	@ (8001680 <__NVIC_EnableIRQ+0x38>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	095b      	lsrs	r3, r3, #5
 8001668:	2001      	movs	r0, #1
 800166a:	fa00 f202 	lsl.w	r2, r0, r2
 800166e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000e100 	.word	0xe000e100

08001684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	6039      	str	r1, [r7, #0]
 800168e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	2b00      	cmp	r3, #0
 8001696:	db0a      	blt.n	80016ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	490c      	ldr	r1, [pc, #48]	@ (80016d0 <__NVIC_SetPriority+0x4c>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	0112      	lsls	r2, r2, #4
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	440b      	add	r3, r1
 80016a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ac:	e00a      	b.n	80016c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4908      	ldr	r1, [pc, #32]	@ (80016d4 <__NVIC_SetPriority+0x50>)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	3b04      	subs	r3, #4
 80016bc:	0112      	lsls	r2, r2, #4
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	440b      	add	r3, r1
 80016c2:	761a      	strb	r2, [r3, #24]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000e100 	.word	0xe000e100
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b089      	sub	sp, #36	@ 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f1c3 0307 	rsb	r3, r3, #7
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	bf28      	it	cs
 80016f6:	2304      	movcs	r3, #4
 80016f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3304      	adds	r3, #4
 80016fe:	2b06      	cmp	r3, #6
 8001700:	d902      	bls.n	8001708 <NVIC_EncodePriority+0x30>
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3b03      	subs	r3, #3
 8001706:	e000      	b.n	800170a <NVIC_EncodePriority+0x32>
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	f04f 32ff 	mov.w	r2, #4294967295
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43da      	mvns	r2, r3
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	401a      	ands	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001720:	f04f 31ff 	mov.w	r1, #4294967295
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	43d9      	mvns	r1, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	4313      	orrs	r3, r2
         );
}
 8001732:	4618      	mov	r0, r3
 8001734:	3724      	adds	r7, #36	@ 0x24
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001750:	d301      	bcc.n	8001756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001752:	2301      	movs	r3, #1
 8001754:	e00f      	b.n	8001776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001756:	4a0a      	ldr	r2, [pc, #40]	@ (8001780 <SysTick_Config+0x40>)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3b01      	subs	r3, #1
 800175c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800175e:	210f      	movs	r1, #15
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	f7ff ff8e 	bl	8001684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001768:	4b05      	ldr	r3, [pc, #20]	@ (8001780 <SysTick_Config+0x40>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176e:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <SysTick_Config+0x40>)
 8001770:	2207      	movs	r2, #7
 8001772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	e000e010 	.word	0xe000e010

08001784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ff29 	bl	80015e4 <__NVIC_SetPriorityGrouping>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b086      	sub	sp, #24
 800179e:	af00      	add	r7, sp, #0
 80017a0:	4603      	mov	r3, r0
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
 80017a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017ac:	f7ff ff3e 	bl	800162c <__NVIC_GetPriorityGrouping>
 80017b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	68b9      	ldr	r1, [r7, #8]
 80017b6:	6978      	ldr	r0, [r7, #20]
 80017b8:	f7ff ff8e 	bl	80016d8 <NVIC_EncodePriority>
 80017bc:	4602      	mov	r2, r0
 80017be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c2:	4611      	mov	r1, r2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff5d 	bl	8001684 <__NVIC_SetPriority>
}
 80017ca:	bf00      	nop
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	4603      	mov	r3, r0
 80017da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff31 	bl	8001648 <__NVIC_EnableIRQ>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff ffa2 	bl	8001740 <SysTick_Config>
 80017fc:	4603      	mov	r3, r0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001806:	b480      	push	{r7}
 8001808:	b085      	sub	sp, #20
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d008      	beq.n	8001830 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2204      	movs	r2, #4
 8001822:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e022      	b.n	8001876 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 020e 	bic.w	r2, r2, #14
 800183e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 0201 	bic.w	r2, r2, #1
 800184e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001854:	f003 021c 	and.w	r2, r3, #28
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185c:	2101      	movs	r1, #1
 800185e:	fa01 f202 	lsl.w	r2, r1, r2
 8001862:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001874:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001876:	4618      	mov	r0, r3
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b084      	sub	sp, #16
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d005      	beq.n	80018a6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2204      	movs	r2, #4
 800189e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
 80018a4:	e029      	b.n	80018fa <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 020e 	bic.w	r2, r2, #14
 80018b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0201 	bic.w	r2, r2, #1
 80018c4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ca:	f003 021c 	and.w	r2, r3, #28
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d2:	2101      	movs	r1, #1
 80018d4:	fa01 f202 	lsl.w	r2, r1, r2
 80018d8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	4798      	blx	r3
    }
  }
  return status;
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001904:	b480      	push	{r7}
 8001906:	b087      	sub	sp, #28
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001912:	e17f      	b.n	8001c14 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	2101      	movs	r1, #1
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	fa01 f303 	lsl.w	r3, r1, r3
 8001920:	4013      	ands	r3, r2
 8001922:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 8171 	beq.w	8001c0e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	2b01      	cmp	r3, #1
 8001936:	d005      	beq.n	8001944 <HAL_GPIO_Init+0x40>
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d130      	bne.n	80019a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	2203      	movs	r2, #3
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68da      	ldr	r2, [r3, #12]
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4313      	orrs	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800197a:	2201      	movs	r2, #1
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	091b      	lsrs	r3, r3, #4
 8001990:	f003 0201 	and.w	r2, r3, #1
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d118      	bne.n	80019e4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80019b8:	2201      	movs	r2, #1
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	08db      	lsrs	r3, r3, #3
 80019ce:	f003 0201 	and.w	r2, r3, #1
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	2b03      	cmp	r3, #3
 80019ee:	d017      	beq.n	8001a20 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	2203      	movs	r2, #3
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0303 	and.w	r3, r3, #3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d123      	bne.n	8001a74 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	08da      	lsrs	r2, r3, #3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3208      	adds	r2, #8
 8001a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a38:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	220f      	movs	r2, #15
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	691a      	ldr	r2, [r3, #16]
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	08da      	lsrs	r2, r3, #3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3208      	adds	r2, #8
 8001a6e:	6939      	ldr	r1, [r7, #16]
 8001a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	2203      	movs	r2, #3
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0203 	and.w	r2, r3, #3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 80ac 	beq.w	8001c0e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab6:	4b5f      	ldr	r3, [pc, #380]	@ (8001c34 <HAL_GPIO_Init+0x330>)
 8001ab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aba:	4a5e      	ldr	r2, [pc, #376]	@ (8001c34 <HAL_GPIO_Init+0x330>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ac2:	4b5c      	ldr	r3, [pc, #368]	@ (8001c34 <HAL_GPIO_Init+0x330>)
 8001ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ace:	4a5a      	ldr	r2, [pc, #360]	@ (8001c38 <HAL_GPIO_Init+0x334>)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	089b      	lsrs	r3, r3, #2
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ada:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	220f      	movs	r2, #15
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	4013      	ands	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001af8:	d025      	beq.n	8001b46 <HAL_GPIO_Init+0x242>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a4f      	ldr	r2, [pc, #316]	@ (8001c3c <HAL_GPIO_Init+0x338>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d01f      	beq.n	8001b42 <HAL_GPIO_Init+0x23e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a4e      	ldr	r2, [pc, #312]	@ (8001c40 <HAL_GPIO_Init+0x33c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d019      	beq.n	8001b3e <HAL_GPIO_Init+0x23a>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a4d      	ldr	r2, [pc, #308]	@ (8001c44 <HAL_GPIO_Init+0x340>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d013      	beq.n	8001b3a <HAL_GPIO_Init+0x236>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a4c      	ldr	r2, [pc, #304]	@ (8001c48 <HAL_GPIO_Init+0x344>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d00d      	beq.n	8001b36 <HAL_GPIO_Init+0x232>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a4b      	ldr	r2, [pc, #300]	@ (8001c4c <HAL_GPIO_Init+0x348>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d007      	beq.n	8001b32 <HAL_GPIO_Init+0x22e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a4a      	ldr	r2, [pc, #296]	@ (8001c50 <HAL_GPIO_Init+0x34c>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d101      	bne.n	8001b2e <HAL_GPIO_Init+0x22a>
 8001b2a:	2306      	movs	r3, #6
 8001b2c:	e00c      	b.n	8001b48 <HAL_GPIO_Init+0x244>
 8001b2e:	2307      	movs	r3, #7
 8001b30:	e00a      	b.n	8001b48 <HAL_GPIO_Init+0x244>
 8001b32:	2305      	movs	r3, #5
 8001b34:	e008      	b.n	8001b48 <HAL_GPIO_Init+0x244>
 8001b36:	2304      	movs	r3, #4
 8001b38:	e006      	b.n	8001b48 <HAL_GPIO_Init+0x244>
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e004      	b.n	8001b48 <HAL_GPIO_Init+0x244>
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e002      	b.n	8001b48 <HAL_GPIO_Init+0x244>
 8001b42:	2301      	movs	r3, #1
 8001b44:	e000      	b.n	8001b48 <HAL_GPIO_Init+0x244>
 8001b46:	2300      	movs	r3, #0
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	f002 0203 	and.w	r2, r2, #3
 8001b4e:	0092      	lsls	r2, r2, #2
 8001b50:	4093      	lsls	r3, r2
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b58:	4937      	ldr	r1, [pc, #220]	@ (8001c38 <HAL_GPIO_Init+0x334>)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	089b      	lsrs	r3, r3, #2
 8001b5e:	3302      	adds	r3, #2
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b66:	4b3b      	ldr	r3, [pc, #236]	@ (8001c54 <HAL_GPIO_Init+0x350>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b8a:	4a32      	ldr	r2, [pc, #200]	@ (8001c54 <HAL_GPIO_Init+0x350>)
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b90:	4b30      	ldr	r3, [pc, #192]	@ (8001c54 <HAL_GPIO_Init+0x350>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d003      	beq.n	8001bb4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bb4:	4a27      	ldr	r2, [pc, #156]	@ (8001c54 <HAL_GPIO_Init+0x350>)
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bba:	4b26      	ldr	r3, [pc, #152]	@ (8001c54 <HAL_GPIO_Init+0x350>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bde:	4a1d      	ldr	r2, [pc, #116]	@ (8001c54 <HAL_GPIO_Init+0x350>)
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001be4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c54 <HAL_GPIO_Init+0x350>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	43db      	mvns	r3, r3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c08:	4a12      	ldr	r2, [pc, #72]	@ (8001c54 <HAL_GPIO_Init+0x350>)
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	3301      	adds	r3, #1
 8001c12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f47f ae78 	bne.w	8001914 <HAL_GPIO_Init+0x10>
  }
}
 8001c24:	bf00      	nop
 8001c26:	bf00      	nop
 8001c28:	371c      	adds	r7, #28
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40010000 	.word	0x40010000
 8001c3c:	48000400 	.word	0x48000400
 8001c40:	48000800 	.word	0x48000800
 8001c44:	48000c00 	.word	0x48000c00
 8001c48:	48001000 	.word	0x48001000
 8001c4c:	48001400 	.word	0x48001400
 8001c50:	48001800 	.word	0x48001800
 8001c54:	40010400 	.word	0x40010400

08001c58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	887b      	ldrh	r3, [r7, #2]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d002      	beq.n	8001c76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c70:	2301      	movs	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
 8001c74:	e001      	b.n	8001c7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c76:	2300      	movs	r3, #0
 8001c78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	807b      	strh	r3, [r7, #2]
 8001c94:	4613      	mov	r3, r2
 8001c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c98:	787b      	ldrb	r3, [r7, #1]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c9e:	887a      	ldrh	r2, [r7, #2]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ca4:	e002      	b.n	8001cac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ca6:	887a      	ldrh	r2, [r7, #2]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cca:	887a      	ldrh	r2, [r7, #2]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	041a      	lsls	r2, r3, #16
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	43d9      	mvns	r1, r3
 8001cd6:	887b      	ldrh	r3, [r7, #2]
 8001cd8:	400b      	ands	r3, r1
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	619a      	str	r2, [r3, #24]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cf6:	4b08      	ldr	r3, [pc, #32]	@ (8001d18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cf8:	695a      	ldr	r2, [r3, #20]
 8001cfa:	88fb      	ldrh	r3, [r7, #6]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d006      	beq.n	8001d10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d02:	4a05      	ldr	r2, [pc, #20]	@ (8001d18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d04:	88fb      	ldrh	r3, [r7, #6]
 8001d06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d08:	88fb      	ldrh	r3, [r7, #6]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fd92 	bl	8000834 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d10:	bf00      	nop
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40010400 	.word	0x40010400

08001d1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e08d      	b.n	8001e4a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d106      	bne.n	8001d48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff f9ce 	bl	80010e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2224      	movs	r2, #36	@ 0x24
 8001d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0201 	bic.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d7c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d107      	bne.n	8001d96 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	e006      	b.n	8001da4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001da2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d108      	bne.n	8001dbe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	e007      	b.n	8001dce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dcc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ddc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001de0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001df0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691a      	ldr	r2, [r3, #16]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69d9      	ldr	r1, [r3, #28]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a1a      	ldr	r2, [r3, #32]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0201 	orr.w	r2, r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2220      	movs	r2, #32
 8001e36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af02      	add	r7, sp, #8
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	4608      	mov	r0, r1
 8001e5e:	4611      	mov	r1, r2
 8001e60:	461a      	mov	r2, r3
 8001e62:	4603      	mov	r3, r0
 8001e64:	817b      	strh	r3, [r7, #10]
 8001e66:	460b      	mov	r3, r1
 8001e68:	813b      	strh	r3, [r7, #8]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b20      	cmp	r3, #32
 8001e78:	f040 80f9 	bne.w	800206e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d002      	beq.n	8001e88 <HAL_I2C_Mem_Write+0x34>
 8001e82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d105      	bne.n	8001e94 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e8e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0ed      	b.n	8002070 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_I2C_Mem_Write+0x4e>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e0e6      	b.n	8002070 <HAL_I2C_Mem_Write+0x21c>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001eaa:	f7ff fb6b 	bl	8001584 <HAL_GetTick>
 8001eae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	2319      	movs	r3, #25
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 f955 	bl	800216c <I2C_WaitOnFlagUntilTimeout>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0d1      	b.n	8002070 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2221      	movs	r2, #33	@ 0x21
 8001ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2240      	movs	r2, #64	@ 0x40
 8001ed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6a3a      	ldr	r2, [r7, #32]
 8001ee6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001eec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ef4:	88f8      	ldrh	r0, [r7, #6]
 8001ef6:	893a      	ldrh	r2, [r7, #8]
 8001ef8:	8979      	ldrh	r1, [r7, #10]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	9301      	str	r3, [sp, #4]
 8001efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	4603      	mov	r3, r0
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f000 f8b9 	bl	800207c <I2C_RequestMemoryWrite>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0a9      	b.n	8002070 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	2bff      	cmp	r3, #255	@ 0xff
 8001f24:	d90e      	bls.n	8001f44 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	22ff      	movs	r2, #255	@ 0xff
 8001f2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	8979      	ldrh	r1, [r7, #10]
 8001f34:	2300      	movs	r3, #0
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 fad9 	bl	80024f4 <I2C_TransferConfig>
 8001f42:	e00f      	b.n	8001f64 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	8979      	ldrh	r1, [r7, #10]
 8001f56:	2300      	movs	r3, #0
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f000 fac8 	bl	80024f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 f958 	bl	800221e <I2C_WaitOnTXISFlagUntilTimeout>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e07b      	b.n	8002070 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7c:	781a      	ldrb	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d034      	beq.n	800201c <HAL_I2C_Mem_Write+0x1c8>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d130      	bne.n	800201c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	2180      	movs	r1, #128	@ 0x80
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f000 f8d1 	bl	800216c <I2C_WaitOnFlagUntilTimeout>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e04d      	b.n	8002070 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	2bff      	cmp	r3, #255	@ 0xff
 8001fdc:	d90e      	bls.n	8001ffc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	22ff      	movs	r2, #255	@ 0xff
 8001fe2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	8979      	ldrh	r1, [r7, #10]
 8001fec:	2300      	movs	r3, #0
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f000 fa7d 	bl	80024f4 <I2C_TransferConfig>
 8001ffa:	e00f      	b.n	800201c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002000:	b29a      	uxth	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800200a:	b2da      	uxtb	r2, r3
 800200c:	8979      	ldrh	r1, [r7, #10]
 800200e:	2300      	movs	r3, #0
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f000 fa6c 	bl	80024f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002020:	b29b      	uxth	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d19e      	bne.n	8001f64 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 f93e 	bl	80022ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e01a      	b.n	8002070 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2220      	movs	r2, #32
 8002040:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6859      	ldr	r1, [r3, #4]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b0a      	ldr	r3, [pc, #40]	@ (8002078 <HAL_I2C_Mem_Write+0x224>)
 800204e:	400b      	ands	r3, r1
 8002050:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2220      	movs	r2, #32
 8002056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800206a:	2300      	movs	r3, #0
 800206c:	e000      	b.n	8002070 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800206e:	2302      	movs	r3, #2
  }
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	fe00e800 	.word	0xfe00e800

0800207c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af02      	add	r7, sp, #8
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	4608      	mov	r0, r1
 8002086:	4611      	mov	r1, r2
 8002088:	461a      	mov	r2, r3
 800208a:	4603      	mov	r3, r0
 800208c:	817b      	strh	r3, [r7, #10]
 800208e:	460b      	mov	r3, r1
 8002090:	813b      	strh	r3, [r7, #8]
 8002092:	4613      	mov	r3, r2
 8002094:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002096:	88fb      	ldrh	r3, [r7, #6]
 8002098:	b2da      	uxtb	r2, r3
 800209a:	8979      	ldrh	r1, [r7, #10]
 800209c:	4b20      	ldr	r3, [pc, #128]	@ (8002120 <I2C_RequestMemoryWrite+0xa4>)
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f000 fa25 	bl	80024f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020aa:	69fa      	ldr	r2, [r7, #28]
 80020ac:	69b9      	ldr	r1, [r7, #24]
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f000 f8b5 	bl	800221e <I2C_WaitOnTXISFlagUntilTimeout>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e02c      	b.n	8002118 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020be:	88fb      	ldrh	r3, [r7, #6]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d105      	bne.n	80020d0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020c4:	893b      	ldrh	r3, [r7, #8]
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80020ce:	e015      	b.n	80020fc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80020d0:	893b      	ldrh	r3, [r7, #8]
 80020d2:	0a1b      	lsrs	r3, r3, #8
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020de:	69fa      	ldr	r2, [r7, #28]
 80020e0:	69b9      	ldr	r1, [r7, #24]
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 f89b 	bl	800221e <I2C_WaitOnTXISFlagUntilTimeout>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e012      	b.n	8002118 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020f2:	893b      	ldrh	r3, [r7, #8]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	2200      	movs	r2, #0
 8002104:	2180      	movs	r1, #128	@ 0x80
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 f830 	bl	800216c <I2C_WaitOnFlagUntilTimeout>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	80002000 	.word	0x80002000

08002124 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b02      	cmp	r3, #2
 8002138:	d103      	bne.n	8002142 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2200      	movs	r2, #0
 8002140:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b01      	cmp	r3, #1
 800214e:	d007      	beq.n	8002160 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	699a      	ldr	r2, [r3, #24]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0201 	orr.w	r2, r2, #1
 800215e:	619a      	str	r2, [r3, #24]
  }
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	603b      	str	r3, [r7, #0]
 8002178:	4613      	mov	r3, r2
 800217a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800217c:	e03b      	b.n	80021f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	6839      	ldr	r1, [r7, #0]
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 f8d6 	bl	8002334 <I2C_IsErrorOccurred>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e041      	b.n	8002216 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002198:	d02d      	beq.n	80021f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800219a:	f7ff f9f3 	bl	8001584 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d302      	bcc.n	80021b0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d122      	bne.n	80021f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	699a      	ldr	r2, [r3, #24]
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	4013      	ands	r3, r2
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	429a      	cmp	r2, r3
 80021be:	bf0c      	ite	eq
 80021c0:	2301      	moveq	r3, #1
 80021c2:	2300      	movne	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	461a      	mov	r2, r3
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d113      	bne.n	80021f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d2:	f043 0220 	orr.w	r2, r3, #32
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2220      	movs	r2, #32
 80021de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e00f      	b.n	8002216 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	699a      	ldr	r2, [r3, #24]
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	4013      	ands	r3, r2
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	429a      	cmp	r2, r3
 8002204:	bf0c      	ite	eq
 8002206:	2301      	moveq	r3, #1
 8002208:	2300      	movne	r3, #0
 800220a:	b2db      	uxtb	r3, r3
 800220c:	461a      	mov	r2, r3
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	429a      	cmp	r2, r3
 8002212:	d0b4      	beq.n	800217e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b084      	sub	sp, #16
 8002222:	af00      	add	r7, sp, #0
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800222a:	e033      	b.n	8002294 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	68b9      	ldr	r1, [r7, #8]
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 f87f 	bl	8002334 <I2C_IsErrorOccurred>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e031      	b.n	80022a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002246:	d025      	beq.n	8002294 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002248:	f7ff f99c 	bl	8001584 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	429a      	cmp	r2, r3
 8002256:	d302      	bcc.n	800225e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d11a      	bne.n	8002294 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b02      	cmp	r3, #2
 800226a:	d013      	beq.n	8002294 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002270:	f043 0220 	orr.w	r2, r3, #32
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2220      	movs	r2, #32
 800227c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e007      	b.n	80022a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d1c4      	bne.n	800222c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022b8:	e02f      	b.n	800231a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68b9      	ldr	r1, [r7, #8]
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 f838 	bl	8002334 <I2C_IsErrorOccurred>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e02d      	b.n	800232a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ce:	f7ff f959 	bl	8001584 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d302      	bcc.n	80022e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d11a      	bne.n	800231a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	f003 0320 	and.w	r3, r3, #32
 80022ee:	2b20      	cmp	r3, #32
 80022f0:	d013      	beq.n	800231a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f6:	f043 0220 	orr.w	r2, r3, #32
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2220      	movs	r2, #32
 8002302:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e007      	b.n	800232a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	f003 0320 	and.w	r3, r3, #32
 8002324:	2b20      	cmp	r3, #32
 8002326:	d1c8      	bne.n	80022ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08a      	sub	sp, #40	@ 0x28
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800234e:	2300      	movs	r3, #0
 8002350:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	2b00      	cmp	r3, #0
 800235e:	d068      	beq.n	8002432 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2210      	movs	r2, #16
 8002366:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002368:	e049      	b.n	80023fe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002370:	d045      	beq.n	80023fe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002372:	f7ff f907 	bl	8001584 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	429a      	cmp	r2, r3
 8002380:	d302      	bcc.n	8002388 <I2C_IsErrorOccurred+0x54>
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d13a      	bne.n	80023fe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002392:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800239a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023aa:	d121      	bne.n	80023f0 <I2C_IsErrorOccurred+0xbc>
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80023b2:	d01d      	beq.n	80023f0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80023b4:	7cfb      	ldrb	r3, [r7, #19]
 80023b6:	2b20      	cmp	r3, #32
 80023b8:	d01a      	beq.n	80023f0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023c8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80023ca:	f7ff f8db 	bl	8001584 <HAL_GetTick>
 80023ce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023d0:	e00e      	b.n	80023f0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80023d2:	f7ff f8d7 	bl	8001584 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b19      	cmp	r3, #25
 80023de:	d907      	bls.n	80023f0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	f043 0320 	orr.w	r3, r3, #32
 80023e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80023ee:	e006      	b.n	80023fe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f003 0320 	and.w	r3, r3, #32
 80023fa:	2b20      	cmp	r3, #32
 80023fc:	d1e9      	bne.n	80023d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	f003 0320 	and.w	r3, r3, #32
 8002408:	2b20      	cmp	r3, #32
 800240a:	d003      	beq.n	8002414 <I2C_IsErrorOccurred+0xe0>
 800240c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0aa      	beq.n	800236a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002414:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002418:	2b00      	cmp	r3, #0
 800241a:	d103      	bne.n	8002424 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2220      	movs	r2, #32
 8002422:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	f043 0304 	orr.w	r3, r3, #4
 800242a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00b      	beq.n	800245c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002454:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00b      	beq.n	800247e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	f043 0308 	orr.w	r3, r3, #8
 800246c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002476:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00b      	beq.n	80024a0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	f043 0302 	orr.w	r3, r3, #2
 800248e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002498:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80024a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d01c      	beq.n	80024e2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f7ff fe3b 	bl	8002124 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6859      	ldr	r1, [r3, #4]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b0d      	ldr	r3, [pc, #52]	@ (80024f0 <I2C_IsErrorOccurred+0x1bc>)
 80024ba:	400b      	ands	r3, r1
 80024bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80024c2:	6a3b      	ldr	r3, [r7, #32]
 80024c4:	431a      	orrs	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2220      	movs	r2, #32
 80024ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80024e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3728      	adds	r7, #40	@ 0x28
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	fe00e800 	.word	0xfe00e800

080024f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	460b      	mov	r3, r1
 8002500:	817b      	strh	r3, [r7, #10]
 8002502:	4613      	mov	r3, r2
 8002504:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002506:	897b      	ldrh	r3, [r7, #10]
 8002508:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800250c:	7a7b      	ldrb	r3, [r7, #9]
 800250e:	041b      	lsls	r3, r3, #16
 8002510:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002514:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	4313      	orrs	r3, r2
 800251e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002522:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	0d5b      	lsrs	r3, r3, #21
 800252e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002532:	4b08      	ldr	r3, [pc, #32]	@ (8002554 <I2C_TransferConfig+0x60>)
 8002534:	430b      	orrs	r3, r1
 8002536:	43db      	mvns	r3, r3
 8002538:	ea02 0103 	and.w	r1, r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	430a      	orrs	r2, r1
 8002544:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002546:	bf00      	nop
 8002548:	371c      	adds	r7, #28
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	03ff63ff 	.word	0x03ff63ff

08002558 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b20      	cmp	r3, #32
 800256c:	d138      	bne.n	80025e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002578:	2302      	movs	r3, #2
 800257a:	e032      	b.n	80025e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2224      	movs	r2, #36	@ 0x24
 8002588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0201 	bic.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80025aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6819      	ldr	r1, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0201 	orr.w	r2, r2, #1
 80025ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2220      	movs	r2, #32
 80025d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025dc:	2300      	movs	r3, #0
 80025de:	e000      	b.n	80025e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025e0:	2302      	movs	r3, #2
  }
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b085      	sub	sp, #20
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b20      	cmp	r3, #32
 8002602:	d139      	bne.n	8002678 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800260a:	2b01      	cmp	r3, #1
 800260c:	d101      	bne.n	8002612 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800260e:	2302      	movs	r3, #2
 8002610:	e033      	b.n	800267a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2224      	movs	r2, #36	@ 0x24
 800261e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0201 	bic.w	r2, r2, #1
 8002630:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002640:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	021b      	lsls	r3, r3, #8
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4313      	orrs	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0201 	orr.w	r2, r2, #1
 8002662:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2220      	movs	r2, #32
 8002668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	e000      	b.n	800267a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002678:	2302      	movs	r3, #2
  }
}
 800267a:	4618      	mov	r0, r3
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
	...

08002688 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800268c:	4b04      	ldr	r3, [pc, #16]	@ (80026a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40007000 	.word	0x40007000

080026a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026b2:	d130      	bne.n	8002716 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026b4:	4b23      	ldr	r3, [pc, #140]	@ (8002744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026c0:	d038      	beq.n	8002734 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026c2:	4b20      	ldr	r3, [pc, #128]	@ (8002744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002748 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2232      	movs	r2, #50	@ 0x32
 80026d8:	fb02 f303 	mul.w	r3, r2, r3
 80026dc:	4a1b      	ldr	r2, [pc, #108]	@ (800274c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	0c9b      	lsrs	r3, r3, #18
 80026e4:	3301      	adds	r3, #1
 80026e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026e8:	e002      	b.n	80026f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026f0:	4b14      	ldr	r3, [pc, #80]	@ (8002744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026fc:	d102      	bne.n	8002704 <HAL_PWREx_ControlVoltageScaling+0x60>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1f2      	bne.n	80026ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002704:	4b0f      	ldr	r3, [pc, #60]	@ (8002744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800270c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002710:	d110      	bne.n	8002734 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e00f      	b.n	8002736 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002716:	4b0b      	ldr	r3, [pc, #44]	@ (8002744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800271e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002722:	d007      	beq.n	8002734 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002724:	4b07      	ldr	r3, [pc, #28]	@ (8002744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800272c:	4a05      	ldr	r2, [pc, #20]	@ (8002744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800272e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002732:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40007000 	.word	0x40007000
 8002748:	20000038 	.word	0x20000038
 800274c:	431bde83 	.word	0x431bde83

08002750 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e3ca      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002762:	4b97      	ldr	r3, [pc, #604]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 030c 	and.w	r3, r3, #12
 800276a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800276c:	4b94      	ldr	r3, [pc, #592]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f003 0303 	and.w	r3, r3, #3
 8002774:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0310 	and.w	r3, r3, #16
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 80e4 	beq.w	800294c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d007      	beq.n	800279a <HAL_RCC_OscConfig+0x4a>
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	2b0c      	cmp	r3, #12
 800278e:	f040 808b 	bne.w	80028a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2b01      	cmp	r3, #1
 8002796:	f040 8087 	bne.w	80028a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800279a:	4b89      	ldr	r3, [pc, #548]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d005      	beq.n	80027b2 <HAL_RCC_OscConfig+0x62>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e3a2      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1a      	ldr	r2, [r3, #32]
 80027b6:	4b82      	ldr	r3, [pc, #520]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d004      	beq.n	80027cc <HAL_RCC_OscConfig+0x7c>
 80027c2:	4b7f      	ldr	r3, [pc, #508]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027ca:	e005      	b.n	80027d8 <HAL_RCC_OscConfig+0x88>
 80027cc:	4b7c      	ldr	r3, [pc, #496]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 80027ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027d2:	091b      	lsrs	r3, r3, #4
 80027d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027d8:	4293      	cmp	r3, r2
 80027da:	d223      	bcs.n	8002824 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 fd55 	bl	8003290 <RCC_SetFlashLatencyFromMSIRange>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e383      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027f0:	4b73      	ldr	r3, [pc, #460]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a72      	ldr	r2, [pc, #456]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 80027f6:	f043 0308 	orr.w	r3, r3, #8
 80027fa:	6013      	str	r3, [r2, #0]
 80027fc:	4b70      	ldr	r3, [pc, #448]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	496d      	ldr	r1, [pc, #436]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 800280a:	4313      	orrs	r3, r2
 800280c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800280e:	4b6c      	ldr	r3, [pc, #432]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	021b      	lsls	r3, r3, #8
 800281c:	4968      	ldr	r1, [pc, #416]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 800281e:	4313      	orrs	r3, r2
 8002820:	604b      	str	r3, [r1, #4]
 8002822:	e025      	b.n	8002870 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002824:	4b66      	ldr	r3, [pc, #408]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a65      	ldr	r2, [pc, #404]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 800282a:	f043 0308 	orr.w	r3, r3, #8
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b63      	ldr	r3, [pc, #396]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	4960      	ldr	r1, [pc, #384]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002842:	4b5f      	ldr	r3, [pc, #380]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	021b      	lsls	r3, r3, #8
 8002850:	495b      	ldr	r1, [pc, #364]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 8002852:	4313      	orrs	r3, r2
 8002854:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d109      	bne.n	8002870 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	4618      	mov	r0, r3
 8002862:	f000 fd15 	bl	8003290 <RCC_SetFlashLatencyFromMSIRange>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e343      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002870:	f000 fc4a 	bl	8003108 <HAL_RCC_GetSysClockFreq>
 8002874:	4602      	mov	r2, r0
 8002876:	4b52      	ldr	r3, [pc, #328]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	091b      	lsrs	r3, r3, #4
 800287c:	f003 030f 	and.w	r3, r3, #15
 8002880:	4950      	ldr	r1, [pc, #320]	@ (80029c4 <HAL_RCC_OscConfig+0x274>)
 8002882:	5ccb      	ldrb	r3, [r1, r3]
 8002884:	f003 031f 	and.w	r3, r3, #31
 8002888:	fa22 f303 	lsr.w	r3, r2, r3
 800288c:	4a4e      	ldr	r2, [pc, #312]	@ (80029c8 <HAL_RCC_OscConfig+0x278>)
 800288e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002890:	4b4e      	ldr	r3, [pc, #312]	@ (80029cc <HAL_RCC_OscConfig+0x27c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f7fe fe25 	bl	80014e4 <HAL_InitTick>
 800289a:	4603      	mov	r3, r0
 800289c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d052      	beq.n	800294a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	e327      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d032      	beq.n	8002916 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028b0:	4b43      	ldr	r3, [pc, #268]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a42      	ldr	r2, [pc, #264]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 80028b6:	f043 0301 	orr.w	r3, r3, #1
 80028ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028bc:	f7fe fe62 	bl	8001584 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028c4:	f7fe fe5e 	bl	8001584 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e310      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028d6:	4b3a      	ldr	r3, [pc, #232]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028e2:	4b37      	ldr	r3, [pc, #220]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a36      	ldr	r2, [pc, #216]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 80028e8:	f043 0308 	orr.w	r3, r3, #8
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	4b34      	ldr	r3, [pc, #208]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	4931      	ldr	r1, [pc, #196]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002900:	4b2f      	ldr	r3, [pc, #188]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	021b      	lsls	r3, r3, #8
 800290e:	492c      	ldr	r1, [pc, #176]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 8002910:	4313      	orrs	r3, r2
 8002912:	604b      	str	r3, [r1, #4]
 8002914:	e01a      	b.n	800294c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002916:	4b2a      	ldr	r3, [pc, #168]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a29      	ldr	r2, [pc, #164]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 800291c:	f023 0301 	bic.w	r3, r3, #1
 8002920:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002922:	f7fe fe2f 	bl	8001584 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800292a:	f7fe fe2b 	bl	8001584 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e2dd      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800293c:	4b20      	ldr	r3, [pc, #128]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1f0      	bne.n	800292a <HAL_RCC_OscConfig+0x1da>
 8002948:	e000      	b.n	800294c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800294a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b00      	cmp	r3, #0
 8002956:	d074      	beq.n	8002a42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	2b08      	cmp	r3, #8
 800295c:	d005      	beq.n	800296a <HAL_RCC_OscConfig+0x21a>
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	2b0c      	cmp	r3, #12
 8002962:	d10e      	bne.n	8002982 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	2b03      	cmp	r3, #3
 8002968:	d10b      	bne.n	8002982 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800296a:	4b15      	ldr	r3, [pc, #84]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d064      	beq.n	8002a40 <HAL_RCC_OscConfig+0x2f0>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d160      	bne.n	8002a40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e2ba      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800298a:	d106      	bne.n	800299a <HAL_RCC_OscConfig+0x24a>
 800298c:	4b0c      	ldr	r3, [pc, #48]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a0b      	ldr	r2, [pc, #44]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 8002992:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002996:	6013      	str	r3, [r2, #0]
 8002998:	e026      	b.n	80029e8 <HAL_RCC_OscConfig+0x298>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029a2:	d115      	bne.n	80029d0 <HAL_RCC_OscConfig+0x280>
 80029a4:	4b06      	ldr	r3, [pc, #24]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a05      	ldr	r2, [pc, #20]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 80029aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029ae:	6013      	str	r3, [r2, #0]
 80029b0:	4b03      	ldr	r3, [pc, #12]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a02      	ldr	r2, [pc, #8]	@ (80029c0 <HAL_RCC_OscConfig+0x270>)
 80029b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ba:	6013      	str	r3, [r2, #0]
 80029bc:	e014      	b.n	80029e8 <HAL_RCC_OscConfig+0x298>
 80029be:	bf00      	nop
 80029c0:	40021000 	.word	0x40021000
 80029c4:	08006d4c 	.word	0x08006d4c
 80029c8:	20000038 	.word	0x20000038
 80029cc:	2000003c 	.word	0x2000003c
 80029d0:	4ba0      	ldr	r3, [pc, #640]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a9f      	ldr	r2, [pc, #636]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 80029d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029da:	6013      	str	r3, [r2, #0]
 80029dc:	4b9d      	ldr	r3, [pc, #628]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a9c      	ldr	r2, [pc, #624]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 80029e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d013      	beq.n	8002a18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f0:	f7fe fdc8 	bl	8001584 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f8:	f7fe fdc4 	bl	8001584 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b64      	cmp	r3, #100	@ 0x64
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e276      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a0a:	4b92      	ldr	r3, [pc, #584]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0x2a8>
 8002a16:	e014      	b.n	8002a42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a18:	f7fe fdb4 	bl	8001584 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a20:	f7fe fdb0 	bl	8001584 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b64      	cmp	r3, #100	@ 0x64
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e262      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a32:	4b88      	ldr	r3, [pc, #544]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x2d0>
 8002a3e:	e000      	b.n	8002a42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d060      	beq.n	8002b10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d005      	beq.n	8002a60 <HAL_RCC_OscConfig+0x310>
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	2b0c      	cmp	r3, #12
 8002a58:	d119      	bne.n	8002a8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d116      	bne.n	8002a8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a60:	4b7c      	ldr	r3, [pc, #496]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <HAL_RCC_OscConfig+0x328>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e23f      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a78:	4b76      	ldr	r3, [pc, #472]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	061b      	lsls	r3, r3, #24
 8002a86:	4973      	ldr	r1, [pc, #460]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a8c:	e040      	b.n	8002b10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d023      	beq.n	8002ade <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a96:	4b6f      	ldr	r3, [pc, #444]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a6e      	ldr	r2, [pc, #440]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 8002a9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa2:	f7fe fd6f 	bl	8001584 <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aaa:	f7fe fd6b 	bl	8001584 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e21d      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002abc:	4b65      	ldr	r3, [pc, #404]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0f0      	beq.n	8002aaa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac8:	4b62      	ldr	r3, [pc, #392]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	061b      	lsls	r3, r3, #24
 8002ad6:	495f      	ldr	r1, [pc, #380]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	604b      	str	r3, [r1, #4]
 8002adc:	e018      	b.n	8002b10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ade:	4b5d      	ldr	r3, [pc, #372]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a5c      	ldr	r2, [pc, #368]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 8002ae4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aea:	f7fe fd4b 	bl	8001584 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af2:	f7fe fd47 	bl	8001584 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e1f9      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b04:	4b53      	ldr	r3, [pc, #332]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1f0      	bne.n	8002af2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0308 	and.w	r3, r3, #8
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d03c      	beq.n	8002b96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d01c      	beq.n	8002b5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b24:	4b4b      	ldr	r3, [pc, #300]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 8002b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b2a:	4a4a      	ldr	r2, [pc, #296]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b34:	f7fe fd26 	bl	8001584 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b3c:	f7fe fd22 	bl	8001584 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e1d4      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b4e:	4b41      	ldr	r3, [pc, #260]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 8002b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0ef      	beq.n	8002b3c <HAL_RCC_OscConfig+0x3ec>
 8002b5c:	e01b      	b.n	8002b96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b5e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 8002b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b64:	4a3b      	ldr	r2, [pc, #236]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 8002b66:	f023 0301 	bic.w	r3, r3, #1
 8002b6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6e:	f7fe fd09 	bl	8001584 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b76:	f7fe fd05 	bl	8001584 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e1b7      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b88:	4b32      	ldr	r3, [pc, #200]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 8002b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1ef      	bne.n	8002b76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 80a6 	beq.w	8002cf0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ba8:	4b2a      	ldr	r3, [pc, #168]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 8002baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10d      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb4:	4b27      	ldr	r3, [pc, #156]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 8002bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb8:	4a26      	ldr	r2, [pc, #152]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 8002bba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bc0:	4b24      	ldr	r3, [pc, #144]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 8002bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bd0:	4b21      	ldr	r3, [pc, #132]	@ (8002c58 <HAL_RCC_OscConfig+0x508>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d118      	bne.n	8002c0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8002c58 <HAL_RCC_OscConfig+0x508>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a1d      	ldr	r2, [pc, #116]	@ (8002c58 <HAL_RCC_OscConfig+0x508>)
 8002be2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002be6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002be8:	f7fe fccc 	bl	8001584 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf0:	f7fe fcc8 	bl	8001584 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e17a      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c02:	4b15      	ldr	r3, [pc, #84]	@ (8002c58 <HAL_RCC_OscConfig+0x508>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d108      	bne.n	8002c28 <HAL_RCC_OscConfig+0x4d8>
 8002c16:	4b0f      	ldr	r3, [pc, #60]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 8002c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 8002c1e:	f043 0301 	orr.w	r3, r3, #1
 8002c22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c26:	e029      	b.n	8002c7c <HAL_RCC_OscConfig+0x52c>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	2b05      	cmp	r3, #5
 8002c2e:	d115      	bne.n	8002c5c <HAL_RCC_OscConfig+0x50c>
 8002c30:	4b08      	ldr	r3, [pc, #32]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 8002c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c36:	4a07      	ldr	r2, [pc, #28]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 8002c38:	f043 0304 	orr.w	r3, r3, #4
 8002c3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c40:	4b04      	ldr	r3, [pc, #16]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 8002c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c46:	4a03      	ldr	r2, [pc, #12]	@ (8002c54 <HAL_RCC_OscConfig+0x504>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c50:	e014      	b.n	8002c7c <HAL_RCC_OscConfig+0x52c>
 8002c52:	bf00      	nop
 8002c54:	40021000 	.word	0x40021000
 8002c58:	40007000 	.word	0x40007000
 8002c5c:	4b9c      	ldr	r3, [pc, #624]	@ (8002ed0 <HAL_RCC_OscConfig+0x780>)
 8002c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c62:	4a9b      	ldr	r2, [pc, #620]	@ (8002ed0 <HAL_RCC_OscConfig+0x780>)
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c6c:	4b98      	ldr	r3, [pc, #608]	@ (8002ed0 <HAL_RCC_OscConfig+0x780>)
 8002c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c72:	4a97      	ldr	r2, [pc, #604]	@ (8002ed0 <HAL_RCC_OscConfig+0x780>)
 8002c74:	f023 0304 	bic.w	r3, r3, #4
 8002c78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d016      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c84:	f7fe fc7e 	bl	8001584 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c8a:	e00a      	b.n	8002ca2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8c:	f7fe fc7a 	bl	8001584 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e12a      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ca2:	4b8b      	ldr	r3, [pc, #556]	@ (8002ed0 <HAL_RCC_OscConfig+0x780>)
 8002ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0ed      	beq.n	8002c8c <HAL_RCC_OscConfig+0x53c>
 8002cb0:	e015      	b.n	8002cde <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb2:	f7fe fc67 	bl	8001584 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cb8:	e00a      	b.n	8002cd0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cba:	f7fe fc63 	bl	8001584 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e113      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cd0:	4b7f      	ldr	r3, [pc, #508]	@ (8002ed0 <HAL_RCC_OscConfig+0x780>)
 8002cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1ed      	bne.n	8002cba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cde:	7ffb      	ldrb	r3, [r7, #31]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d105      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce4:	4b7a      	ldr	r3, [pc, #488]	@ (8002ed0 <HAL_RCC_OscConfig+0x780>)
 8002ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce8:	4a79      	ldr	r2, [pc, #484]	@ (8002ed0 <HAL_RCC_OscConfig+0x780>)
 8002cea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cee:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 80fe 	beq.w	8002ef6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	f040 80d0 	bne.w	8002ea4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d04:	4b72      	ldr	r3, [pc, #456]	@ (8002ed0 <HAL_RCC_OscConfig+0x780>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f003 0203 	and.w	r2, r3, #3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d130      	bne.n	8002d7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d22:	3b01      	subs	r3, #1
 8002d24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d127      	bne.n	8002d7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d34:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d11f      	bne.n	8002d7a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d44:	2a07      	cmp	r2, #7
 8002d46:	bf14      	ite	ne
 8002d48:	2201      	movne	r2, #1
 8002d4a:	2200      	moveq	r2, #0
 8002d4c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d113      	bne.n	8002d7a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d5c:	085b      	lsrs	r3, r3, #1
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d109      	bne.n	8002d7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d70:	085b      	lsrs	r3, r3, #1
 8002d72:	3b01      	subs	r3, #1
 8002d74:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d06e      	beq.n	8002e58 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	2b0c      	cmp	r3, #12
 8002d7e:	d069      	beq.n	8002e54 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d80:	4b53      	ldr	r3, [pc, #332]	@ (8002ed0 <HAL_RCC_OscConfig+0x780>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d105      	bne.n	8002d98 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d8c:	4b50      	ldr	r3, [pc, #320]	@ (8002ed0 <HAL_RCC_OscConfig+0x780>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0ad      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d9c:	4b4c      	ldr	r3, [pc, #304]	@ (8002ed0 <HAL_RCC_OscConfig+0x780>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a4b      	ldr	r2, [pc, #300]	@ (8002ed0 <HAL_RCC_OscConfig+0x780>)
 8002da2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002da6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002da8:	f7fe fbec 	bl	8001584 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db0:	f7fe fbe8 	bl	8001584 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e09a      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dc2:	4b43      	ldr	r3, [pc, #268]	@ (8002ed0 <HAL_RCC_OscConfig+0x780>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dce:	4b40      	ldr	r3, [pc, #256]	@ (8002ed0 <HAL_RCC_OscConfig+0x780>)
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	4b40      	ldr	r3, [pc, #256]	@ (8002ed4 <HAL_RCC_OscConfig+0x784>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002dde:	3a01      	subs	r2, #1
 8002de0:	0112      	lsls	r2, r2, #4
 8002de2:	4311      	orrs	r1, r2
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002de8:	0212      	lsls	r2, r2, #8
 8002dea:	4311      	orrs	r1, r2
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002df0:	0852      	lsrs	r2, r2, #1
 8002df2:	3a01      	subs	r2, #1
 8002df4:	0552      	lsls	r2, r2, #21
 8002df6:	4311      	orrs	r1, r2
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002dfc:	0852      	lsrs	r2, r2, #1
 8002dfe:	3a01      	subs	r2, #1
 8002e00:	0652      	lsls	r2, r2, #25
 8002e02:	4311      	orrs	r1, r2
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e08:	0912      	lsrs	r2, r2, #4
 8002e0a:	0452      	lsls	r2, r2, #17
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	4930      	ldr	r1, [pc, #192]	@ (8002ed0 <HAL_RCC_OscConfig+0x780>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e14:	4b2e      	ldr	r3, [pc, #184]	@ (8002ed0 <HAL_RCC_OscConfig+0x780>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a2d      	ldr	r2, [pc, #180]	@ (8002ed0 <HAL_RCC_OscConfig+0x780>)
 8002e1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e20:	4b2b      	ldr	r3, [pc, #172]	@ (8002ed0 <HAL_RCC_OscConfig+0x780>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	4a2a      	ldr	r2, [pc, #168]	@ (8002ed0 <HAL_RCC_OscConfig+0x780>)
 8002e26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e2c:	f7fe fbaa 	bl	8001584 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e34:	f7fe fba6 	bl	8001584 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e058      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e46:	4b22      	ldr	r3, [pc, #136]	@ (8002ed0 <HAL_RCC_OscConfig+0x780>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0f0      	beq.n	8002e34 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e52:	e050      	b.n	8002ef6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e04f      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e58:	4b1d      	ldr	r3, [pc, #116]	@ (8002ed0 <HAL_RCC_OscConfig+0x780>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d148      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e64:	4b1a      	ldr	r3, [pc, #104]	@ (8002ed0 <HAL_RCC_OscConfig+0x780>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a19      	ldr	r2, [pc, #100]	@ (8002ed0 <HAL_RCC_OscConfig+0x780>)
 8002e6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e70:	4b17      	ldr	r3, [pc, #92]	@ (8002ed0 <HAL_RCC_OscConfig+0x780>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	4a16      	ldr	r2, [pc, #88]	@ (8002ed0 <HAL_RCC_OscConfig+0x780>)
 8002e76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e7c:	f7fe fb82 	bl	8001584 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e84:	f7fe fb7e 	bl	8001584 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e030      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e96:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed0 <HAL_RCC_OscConfig+0x780>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCC_OscConfig+0x734>
 8002ea2:	e028      	b.n	8002ef6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	2b0c      	cmp	r3, #12
 8002ea8:	d023      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eaa:	4b09      	ldr	r3, [pc, #36]	@ (8002ed0 <HAL_RCC_OscConfig+0x780>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a08      	ldr	r2, [pc, #32]	@ (8002ed0 <HAL_RCC_OscConfig+0x780>)
 8002eb0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002eb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb6:	f7fe fb65 	bl	8001584 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ebc:	e00c      	b.n	8002ed8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ebe:	f7fe fb61 	bl	8001584 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d905      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e013      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7a8>
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ed8:	4b09      	ldr	r3, [pc, #36]	@ (8002f00 <HAL_RCC_OscConfig+0x7b0>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1ec      	bne.n	8002ebe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ee4:	4b06      	ldr	r3, [pc, #24]	@ (8002f00 <HAL_RCC_OscConfig+0x7b0>)
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	4905      	ldr	r1, [pc, #20]	@ (8002f00 <HAL_RCC_OscConfig+0x7b0>)
 8002eea:	4b06      	ldr	r3, [pc, #24]	@ (8002f04 <HAL_RCC_OscConfig+0x7b4>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	60cb      	str	r3, [r1, #12]
 8002ef0:	e001      	b.n	8002ef6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3720      	adds	r7, #32
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40021000 	.word	0x40021000
 8002f04:	feeefffc 	.word	0xfeeefffc

08002f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0e7      	b.n	80030ec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f1c:	4b75      	ldr	r3, [pc, #468]	@ (80030f4 <HAL_RCC_ClockConfig+0x1ec>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d910      	bls.n	8002f4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2a:	4b72      	ldr	r3, [pc, #456]	@ (80030f4 <HAL_RCC_ClockConfig+0x1ec>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 0207 	bic.w	r2, r3, #7
 8002f32:	4970      	ldr	r1, [pc, #448]	@ (80030f4 <HAL_RCC_ClockConfig+0x1ec>)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3a:	4b6e      	ldr	r3, [pc, #440]	@ (80030f4 <HAL_RCC_ClockConfig+0x1ec>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0cf      	b.n	80030ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d010      	beq.n	8002f7a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	4b66      	ldr	r3, [pc, #408]	@ (80030f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d908      	bls.n	8002f7a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f68:	4b63      	ldr	r3, [pc, #396]	@ (80030f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	4960      	ldr	r1, [pc, #384]	@ (80030f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d04c      	beq.n	8003020 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b03      	cmp	r3, #3
 8002f8c:	d107      	bne.n	8002f9e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f8e:	4b5a      	ldr	r3, [pc, #360]	@ (80030f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d121      	bne.n	8002fde <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e0a6      	b.n	80030ec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d107      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fa6:	4b54      	ldr	r3, [pc, #336]	@ (80030f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d115      	bne.n	8002fde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e09a      	b.n	80030ec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d107      	bne.n	8002fce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fbe:	4b4e      	ldr	r3, [pc, #312]	@ (80030f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d109      	bne.n	8002fde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e08e      	b.n	80030ec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fce:	4b4a      	ldr	r3, [pc, #296]	@ (80030f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e086      	b.n	80030ec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fde:	4b46      	ldr	r3, [pc, #280]	@ (80030f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f023 0203 	bic.w	r2, r3, #3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	4943      	ldr	r1, [pc, #268]	@ (80030f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ff0:	f7fe fac8 	bl	8001584 <HAL_GetTick>
 8002ff4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff6:	e00a      	b.n	800300e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff8:	f7fe fac4 	bl	8001584 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003006:	4293      	cmp	r3, r2
 8003008:	d901      	bls.n	800300e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e06e      	b.n	80030ec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300e:	4b3a      	ldr	r3, [pc, #232]	@ (80030f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 020c 	and.w	r2, r3, #12
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	429a      	cmp	r2, r3
 800301e:	d1eb      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d010      	beq.n	800304e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	4b31      	ldr	r3, [pc, #196]	@ (80030f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003038:	429a      	cmp	r2, r3
 800303a:	d208      	bcs.n	800304e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800303c:	4b2e      	ldr	r3, [pc, #184]	@ (80030f8 <HAL_RCC_ClockConfig+0x1f0>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	492b      	ldr	r1, [pc, #172]	@ (80030f8 <HAL_RCC_ClockConfig+0x1f0>)
 800304a:	4313      	orrs	r3, r2
 800304c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800304e:	4b29      	ldr	r3, [pc, #164]	@ (80030f4 <HAL_RCC_ClockConfig+0x1ec>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d210      	bcs.n	800307e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305c:	4b25      	ldr	r3, [pc, #148]	@ (80030f4 <HAL_RCC_ClockConfig+0x1ec>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f023 0207 	bic.w	r2, r3, #7
 8003064:	4923      	ldr	r1, [pc, #140]	@ (80030f4 <HAL_RCC_ClockConfig+0x1ec>)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	4313      	orrs	r3, r2
 800306a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800306c:	4b21      	ldr	r3, [pc, #132]	@ (80030f4 <HAL_RCC_ClockConfig+0x1ec>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d001      	beq.n	800307e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e036      	b.n	80030ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0304 	and.w	r3, r3, #4
 8003086:	2b00      	cmp	r3, #0
 8003088:	d008      	beq.n	800309c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800308a:	4b1b      	ldr	r3, [pc, #108]	@ (80030f8 <HAL_RCC_ClockConfig+0x1f0>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	4918      	ldr	r1, [pc, #96]	@ (80030f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003098:	4313      	orrs	r3, r2
 800309a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d009      	beq.n	80030bc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030a8:	4b13      	ldr	r3, [pc, #76]	@ (80030f8 <HAL_RCC_ClockConfig+0x1f0>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	4910      	ldr	r1, [pc, #64]	@ (80030f8 <HAL_RCC_ClockConfig+0x1f0>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030bc:	f000 f824 	bl	8003108 <HAL_RCC_GetSysClockFreq>
 80030c0:	4602      	mov	r2, r0
 80030c2:	4b0d      	ldr	r3, [pc, #52]	@ (80030f8 <HAL_RCC_ClockConfig+0x1f0>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	091b      	lsrs	r3, r3, #4
 80030c8:	f003 030f 	and.w	r3, r3, #15
 80030cc:	490b      	ldr	r1, [pc, #44]	@ (80030fc <HAL_RCC_ClockConfig+0x1f4>)
 80030ce:	5ccb      	ldrb	r3, [r1, r3]
 80030d0:	f003 031f 	and.w	r3, r3, #31
 80030d4:	fa22 f303 	lsr.w	r3, r2, r3
 80030d8:	4a09      	ldr	r2, [pc, #36]	@ (8003100 <HAL_RCC_ClockConfig+0x1f8>)
 80030da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030dc:	4b09      	ldr	r3, [pc, #36]	@ (8003104 <HAL_RCC_ClockConfig+0x1fc>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fe f9ff 	bl	80014e4 <HAL_InitTick>
 80030e6:	4603      	mov	r3, r0
 80030e8:	72fb      	strb	r3, [r7, #11]

  return status;
 80030ea:	7afb      	ldrb	r3, [r7, #11]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40022000 	.word	0x40022000
 80030f8:	40021000 	.word	0x40021000
 80030fc:	08006d4c 	.word	0x08006d4c
 8003100:	20000038 	.word	0x20000038
 8003104:	2000003c 	.word	0x2000003c

08003108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003108:	b480      	push	{r7}
 800310a:	b089      	sub	sp, #36	@ 0x24
 800310c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800310e:	2300      	movs	r3, #0
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	2300      	movs	r3, #0
 8003114:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003116:	4b3e      	ldr	r3, [pc, #248]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x108>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
 800311e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003120:	4b3b      	ldr	r3, [pc, #236]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x108>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_RCC_GetSysClockFreq+0x34>
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	2b0c      	cmp	r3, #12
 8003134:	d121      	bne.n	800317a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d11e      	bne.n	800317a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800313c:	4b34      	ldr	r3, [pc, #208]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x108>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0308 	and.w	r3, r3, #8
 8003144:	2b00      	cmp	r3, #0
 8003146:	d107      	bne.n	8003158 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003148:	4b31      	ldr	r3, [pc, #196]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x108>)
 800314a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800314e:	0a1b      	lsrs	r3, r3, #8
 8003150:	f003 030f 	and.w	r3, r3, #15
 8003154:	61fb      	str	r3, [r7, #28]
 8003156:	e005      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003158:	4b2d      	ldr	r3, [pc, #180]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x108>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	091b      	lsrs	r3, r3, #4
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003164:	4a2b      	ldr	r2, [pc, #172]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800316c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10d      	bne.n	8003190 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003178:	e00a      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	2b04      	cmp	r3, #4
 800317e:	d102      	bne.n	8003186 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003180:	4b25      	ldr	r3, [pc, #148]	@ (8003218 <HAL_RCC_GetSysClockFreq+0x110>)
 8003182:	61bb      	str	r3, [r7, #24]
 8003184:	e004      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	2b08      	cmp	r3, #8
 800318a:	d101      	bne.n	8003190 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800318c:	4b23      	ldr	r3, [pc, #140]	@ (800321c <HAL_RCC_GetSysClockFreq+0x114>)
 800318e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	2b0c      	cmp	r3, #12
 8003194:	d134      	bne.n	8003200 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003196:	4b1e      	ldr	r3, [pc, #120]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x108>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d003      	beq.n	80031ae <HAL_RCC_GetSysClockFreq+0xa6>
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b03      	cmp	r3, #3
 80031aa:	d003      	beq.n	80031b4 <HAL_RCC_GetSysClockFreq+0xac>
 80031ac:	e005      	b.n	80031ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003218 <HAL_RCC_GetSysClockFreq+0x110>)
 80031b0:	617b      	str	r3, [r7, #20]
      break;
 80031b2:	e005      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031b4:	4b19      	ldr	r3, [pc, #100]	@ (800321c <HAL_RCC_GetSysClockFreq+0x114>)
 80031b6:	617b      	str	r3, [r7, #20]
      break;
 80031b8:	e002      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	617b      	str	r3, [r7, #20]
      break;
 80031be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031c0:	4b13      	ldr	r3, [pc, #76]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x108>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	091b      	lsrs	r3, r3, #4
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	3301      	adds	r3, #1
 80031cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031ce:	4b10      	ldr	r3, [pc, #64]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x108>)
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	0a1b      	lsrs	r3, r3, #8
 80031d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	fb03 f202 	mul.w	r2, r3, r2
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x108>)
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	0e5b      	lsrs	r3, r3, #25
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	3301      	adds	r3, #1
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003200:	69bb      	ldr	r3, [r7, #24]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3724      	adds	r7, #36	@ 0x24
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	40021000 	.word	0x40021000
 8003214:	08006d64 	.word	0x08006d64
 8003218:	00f42400 	.word	0x00f42400
 800321c:	007a1200 	.word	0x007a1200

08003220 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003224:	4b03      	ldr	r3, [pc, #12]	@ (8003234 <HAL_RCC_GetHCLKFreq+0x14>)
 8003226:	681b      	ldr	r3, [r3, #0]
}
 8003228:	4618      	mov	r0, r3
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	20000038 	.word	0x20000038

08003238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800323c:	f7ff fff0 	bl	8003220 <HAL_RCC_GetHCLKFreq>
 8003240:	4602      	mov	r2, r0
 8003242:	4b06      	ldr	r3, [pc, #24]	@ (800325c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	0a1b      	lsrs	r3, r3, #8
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	4904      	ldr	r1, [pc, #16]	@ (8003260 <HAL_RCC_GetPCLK1Freq+0x28>)
 800324e:	5ccb      	ldrb	r3, [r1, r3]
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003258:	4618      	mov	r0, r3
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40021000 	.word	0x40021000
 8003260:	08006d5c 	.word	0x08006d5c

08003264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003268:	f7ff ffda 	bl	8003220 <HAL_RCC_GetHCLKFreq>
 800326c:	4602      	mov	r2, r0
 800326e:	4b06      	ldr	r3, [pc, #24]	@ (8003288 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	0adb      	lsrs	r3, r3, #11
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	4904      	ldr	r1, [pc, #16]	@ (800328c <HAL_RCC_GetPCLK2Freq+0x28>)
 800327a:	5ccb      	ldrb	r3, [r1, r3]
 800327c:	f003 031f 	and.w	r3, r3, #31
 8003280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003284:	4618      	mov	r0, r3
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40021000 	.word	0x40021000
 800328c:	08006d5c 	.word	0x08006d5c

08003290 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003298:	2300      	movs	r3, #0
 800329a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800329c:	4b2a      	ldr	r3, [pc, #168]	@ (8003348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800329e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032a8:	f7ff f9ee 	bl	8002688 <HAL_PWREx_GetVoltageRange>
 80032ac:	6178      	str	r0, [r7, #20]
 80032ae:	e014      	b.n	80032da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032b0:	4b25      	ldr	r3, [pc, #148]	@ (8003348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b4:	4a24      	ldr	r2, [pc, #144]	@ (8003348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80032bc:	4b22      	ldr	r3, [pc, #136]	@ (8003348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032c8:	f7ff f9de 	bl	8002688 <HAL_PWREx_GetVoltageRange>
 80032cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d2:	4a1d      	ldr	r2, [pc, #116]	@ (8003348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032e0:	d10b      	bne.n	80032fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b80      	cmp	r3, #128	@ 0x80
 80032e6:	d919      	bls.n	800331c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2ba0      	cmp	r3, #160	@ 0xa0
 80032ec:	d902      	bls.n	80032f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032ee:	2302      	movs	r3, #2
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	e013      	b.n	800331c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032f4:	2301      	movs	r3, #1
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	e010      	b.n	800331c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b80      	cmp	r3, #128	@ 0x80
 80032fe:	d902      	bls.n	8003306 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003300:	2303      	movs	r3, #3
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	e00a      	b.n	800331c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b80      	cmp	r3, #128	@ 0x80
 800330a:	d102      	bne.n	8003312 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800330c:	2302      	movs	r3, #2
 800330e:	613b      	str	r3, [r7, #16]
 8003310:	e004      	b.n	800331c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b70      	cmp	r3, #112	@ 0x70
 8003316:	d101      	bne.n	800331c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003318:	2301      	movs	r3, #1
 800331a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800331c:	4b0b      	ldr	r3, [pc, #44]	@ (800334c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f023 0207 	bic.w	r2, r3, #7
 8003324:	4909      	ldr	r1, [pc, #36]	@ (800334c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	4313      	orrs	r3, r2
 800332a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800332c:	4b07      	ldr	r3, [pc, #28]	@ (800334c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	429a      	cmp	r2, r3
 8003338:	d001      	beq.n	800333e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e000      	b.n	8003340 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40021000 	.word	0x40021000
 800334c:	40022000 	.word	0x40022000

08003350 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003358:	2300      	movs	r3, #0
 800335a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800335c:	2300      	movs	r3, #0
 800335e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003368:	2b00      	cmp	r3, #0
 800336a:	d041      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003370:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003374:	d02a      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003376:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800337a:	d824      	bhi.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800337c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003380:	d008      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003382:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003386:	d81e      	bhi.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00a      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800338c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003390:	d010      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003392:	e018      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003394:	4b86      	ldr	r3, [pc, #536]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	4a85      	ldr	r2, [pc, #532]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800339a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800339e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033a0:	e015      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3304      	adds	r3, #4
 80033a6:	2100      	movs	r1, #0
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 fabb 	bl	8003924 <RCCEx_PLLSAI1_Config>
 80033ae:	4603      	mov	r3, r0
 80033b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033b2:	e00c      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3320      	adds	r3, #32
 80033b8:	2100      	movs	r1, #0
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 fba6 	bl	8003b0c <RCCEx_PLLSAI2_Config>
 80033c0:	4603      	mov	r3, r0
 80033c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033c4:	e003      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	74fb      	strb	r3, [r7, #19]
      break;
 80033ca:	e000      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80033cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033ce:	7cfb      	ldrb	r3, [r7, #19]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10b      	bne.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033d4:	4b76      	ldr	r3, [pc, #472]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033e2:	4973      	ldr	r1, [pc, #460]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80033ea:	e001      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ec:	7cfb      	ldrb	r3, [r7, #19]
 80033ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d041      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003400:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003404:	d02a      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003406:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800340a:	d824      	bhi.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800340c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003410:	d008      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003412:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003416:	d81e      	bhi.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00a      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800341c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003420:	d010      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003422:	e018      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003424:	4b62      	ldr	r3, [pc, #392]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	4a61      	ldr	r2, [pc, #388]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800342e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003430:	e015      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3304      	adds	r3, #4
 8003436:	2100      	movs	r1, #0
 8003438:	4618      	mov	r0, r3
 800343a:	f000 fa73 	bl	8003924 <RCCEx_PLLSAI1_Config>
 800343e:	4603      	mov	r3, r0
 8003440:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003442:	e00c      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3320      	adds	r3, #32
 8003448:	2100      	movs	r1, #0
 800344a:	4618      	mov	r0, r3
 800344c:	f000 fb5e 	bl	8003b0c <RCCEx_PLLSAI2_Config>
 8003450:	4603      	mov	r3, r0
 8003452:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003454:	e003      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	74fb      	strb	r3, [r7, #19]
      break;
 800345a:	e000      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800345c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800345e:	7cfb      	ldrb	r3, [r7, #19]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10b      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003464:	4b52      	ldr	r3, [pc, #328]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800346a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003472:	494f      	ldr	r1, [pc, #316]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800347a:	e001      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800347c:	7cfb      	ldrb	r3, [r7, #19]
 800347e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80a0 	beq.w	80035ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800348e:	2300      	movs	r3, #0
 8003490:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003492:	4b47      	ldr	r3, [pc, #284]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800349e:	2301      	movs	r3, #1
 80034a0:	e000      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80034a2:	2300      	movs	r3, #0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00d      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034a8:	4b41      	ldr	r3, [pc, #260]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ac:	4a40      	ldr	r2, [pc, #256]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80034b4:	4b3e      	ldr	r3, [pc, #248]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034bc:	60bb      	str	r3, [r7, #8]
 80034be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034c0:	2301      	movs	r3, #1
 80034c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034c4:	4b3b      	ldr	r3, [pc, #236]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a3a      	ldr	r2, [pc, #232]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034d0:	f7fe f858 	bl	8001584 <HAL_GetTick>
 80034d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034d6:	e009      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d8:	f7fe f854 	bl	8001584 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d902      	bls.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	74fb      	strb	r3, [r7, #19]
        break;
 80034ea:	e005      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034ec:	4b31      	ldr	r3, [pc, #196]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0ef      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80034f8:	7cfb      	ldrb	r3, [r7, #19]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d15c      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034fe:	4b2c      	ldr	r3, [pc, #176]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003504:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003508:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d01f      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	429a      	cmp	r2, r3
 800351a:	d019      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800351c:	4b24      	ldr	r3, [pc, #144]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800351e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003522:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003526:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003528:	4b21      	ldr	r3, [pc, #132]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800352e:	4a20      	ldr	r2, [pc, #128]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003538:	4b1d      	ldr	r3, [pc, #116]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800353e:	4a1c      	ldr	r2, [pc, #112]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003540:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003544:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003548:	4a19      	ldr	r2, [pc, #100]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d016      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355a:	f7fe f813 	bl	8001584 <HAL_GetTick>
 800355e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003560:	e00b      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003562:	f7fe f80f 	bl	8001584 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003570:	4293      	cmp	r3, r2
 8003572:	d902      	bls.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	74fb      	strb	r3, [r7, #19]
            break;
 8003578:	e006      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800357a:	4b0d      	ldr	r3, [pc, #52]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0ec      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003588:	7cfb      	ldrb	r3, [r7, #19]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10c      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800358e:	4b08      	ldr	r3, [pc, #32]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003594:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800359e:	4904      	ldr	r1, [pc, #16]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80035a6:	e009      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035a8:	7cfb      	ldrb	r3, [r7, #19]
 80035aa:	74bb      	strb	r3, [r7, #18]
 80035ac:	e006      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80035ae:	bf00      	nop
 80035b0:	40021000 	.word	0x40021000
 80035b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b8:	7cfb      	ldrb	r3, [r7, #19]
 80035ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035bc:	7c7b      	ldrb	r3, [r7, #17]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d105      	bne.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c2:	4b9e      	ldr	r3, [pc, #632]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c6:	4a9d      	ldr	r2, [pc, #628]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035cc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035da:	4b98      	ldr	r3, [pc, #608]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e0:	f023 0203 	bic.w	r2, r3, #3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e8:	4994      	ldr	r1, [pc, #592]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00a      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035fc:	4b8f      	ldr	r3, [pc, #572]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003602:	f023 020c 	bic.w	r2, r3, #12
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800360a:	498c      	ldr	r1, [pc, #560]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00a      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800361e:	4b87      	ldr	r3, [pc, #540]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003624:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362c:	4983      	ldr	r1, [pc, #524]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003640:	4b7e      	ldr	r3, [pc, #504]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003646:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364e:	497b      	ldr	r1, [pc, #492]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003650:	4313      	orrs	r3, r2
 8003652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0310 	and.w	r3, r3, #16
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003662:	4b76      	ldr	r3, [pc, #472]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003668:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003670:	4972      	ldr	r1, [pc, #456]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0320 	and.w	r3, r3, #32
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003684:	4b6d      	ldr	r3, [pc, #436]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800368a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003692:	496a      	ldr	r1, [pc, #424]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036a6:	4b65      	ldr	r3, [pc, #404]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b4:	4961      	ldr	r1, [pc, #388]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00a      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036c8:	4b5c      	ldr	r3, [pc, #368]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d6:	4959      	ldr	r1, [pc, #356]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036ea:	4b54      	ldr	r3, [pc, #336]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f8:	4950      	ldr	r1, [pc, #320]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00a      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800370c:	4b4b      	ldr	r3, [pc, #300]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003712:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800371a:	4948      	ldr	r1, [pc, #288]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00a      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800372e:	4b43      	ldr	r3, [pc, #268]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003734:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373c:	493f      	ldr	r1, [pc, #252]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d028      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003750:	4b3a      	ldr	r3, [pc, #232]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003756:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800375e:	4937      	ldr	r1, [pc, #220]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003760:	4313      	orrs	r3, r2
 8003762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800376a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800376e:	d106      	bne.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003770:	4b32      	ldr	r3, [pc, #200]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	4a31      	ldr	r2, [pc, #196]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003776:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800377a:	60d3      	str	r3, [r2, #12]
 800377c:	e011      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003782:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003786:	d10c      	bne.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3304      	adds	r3, #4
 800378c:	2101      	movs	r1, #1
 800378e:	4618      	mov	r0, r3
 8003790:	f000 f8c8 	bl	8003924 <RCCEx_PLLSAI1_Config>
 8003794:	4603      	mov	r3, r0
 8003796:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003798:	7cfb      	ldrb	r3, [r7, #19]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800379e:	7cfb      	ldrb	r3, [r7, #19]
 80037a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d028      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037ae:	4b23      	ldr	r3, [pc, #140]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037bc:	491f      	ldr	r1, [pc, #124]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037cc:	d106      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037ce:	4b1b      	ldr	r3, [pc, #108]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	4a1a      	ldr	r2, [pc, #104]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037d8:	60d3      	str	r3, [r2, #12]
 80037da:	e011      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037e4:	d10c      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	3304      	adds	r3, #4
 80037ea:	2101      	movs	r1, #1
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 f899 	bl	8003924 <RCCEx_PLLSAI1_Config>
 80037f2:	4603      	mov	r3, r0
 80037f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037f6:	7cfb      	ldrb	r3, [r7, #19]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80037fc:	7cfb      	ldrb	r3, [r7, #19]
 80037fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d02b      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800380c:	4b0b      	ldr	r3, [pc, #44]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800380e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003812:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800381a:	4908      	ldr	r1, [pc, #32]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381c:	4313      	orrs	r3, r2
 800381e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003826:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800382a:	d109      	bne.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800382c:	4b03      	ldr	r3, [pc, #12]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	4a02      	ldr	r2, [pc, #8]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003832:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003836:	60d3      	str	r3, [r2, #12]
 8003838:	e014      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800383a:	bf00      	nop
 800383c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003844:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003848:	d10c      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3304      	adds	r3, #4
 800384e:	2101      	movs	r1, #1
 8003850:	4618      	mov	r0, r3
 8003852:	f000 f867 	bl	8003924 <RCCEx_PLLSAI1_Config>
 8003856:	4603      	mov	r3, r0
 8003858:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800385a:	7cfb      	ldrb	r3, [r7, #19]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003860:	7cfb      	ldrb	r3, [r7, #19]
 8003862:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d02f      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003870:	4b2b      	ldr	r3, [pc, #172]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003876:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800387e:	4928      	ldr	r1, [pc, #160]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003880:	4313      	orrs	r3, r2
 8003882:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800388a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800388e:	d10d      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3304      	adds	r3, #4
 8003894:	2102      	movs	r1, #2
 8003896:	4618      	mov	r0, r3
 8003898:	f000 f844 	bl	8003924 <RCCEx_PLLSAI1_Config>
 800389c:	4603      	mov	r3, r0
 800389e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038a0:	7cfb      	ldrb	r3, [r7, #19]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d014      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038a6:	7cfb      	ldrb	r3, [r7, #19]
 80038a8:	74bb      	strb	r3, [r7, #18]
 80038aa:	e011      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038b4:	d10c      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3320      	adds	r3, #32
 80038ba:	2102      	movs	r1, #2
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 f925 	bl	8003b0c <RCCEx_PLLSAI2_Config>
 80038c2:	4603      	mov	r3, r0
 80038c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038c6:	7cfb      	ldrb	r3, [r7, #19]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038cc:	7cfb      	ldrb	r3, [r7, #19]
 80038ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038dc:	4b10      	ldr	r3, [pc, #64]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038e2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038ea:	490d      	ldr	r1, [pc, #52]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00b      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038fe:	4b08      	ldr	r3, [pc, #32]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003904:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800390e:	4904      	ldr	r1, [pc, #16]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003916:	7cbb      	ldrb	r3, [r7, #18]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40021000 	.word	0x40021000

08003924 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003932:	4b75      	ldr	r3, [pc, #468]	@ (8003b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d018      	beq.n	8003970 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800393e:	4b72      	ldr	r3, [pc, #456]	@ (8003b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f003 0203 	and.w	r2, r3, #3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d10d      	bne.n	800396a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
       ||
 8003952:	2b00      	cmp	r3, #0
 8003954:	d009      	beq.n	800396a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003956:	4b6c      	ldr	r3, [pc, #432]	@ (8003b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	091b      	lsrs	r3, r3, #4
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
       ||
 8003966:	429a      	cmp	r2, r3
 8003968:	d047      	beq.n	80039fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	73fb      	strb	r3, [r7, #15]
 800396e:	e044      	b.n	80039fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b03      	cmp	r3, #3
 8003976:	d018      	beq.n	80039aa <RCCEx_PLLSAI1_Config+0x86>
 8003978:	2b03      	cmp	r3, #3
 800397a:	d825      	bhi.n	80039c8 <RCCEx_PLLSAI1_Config+0xa4>
 800397c:	2b01      	cmp	r3, #1
 800397e:	d002      	beq.n	8003986 <RCCEx_PLLSAI1_Config+0x62>
 8003980:	2b02      	cmp	r3, #2
 8003982:	d009      	beq.n	8003998 <RCCEx_PLLSAI1_Config+0x74>
 8003984:	e020      	b.n	80039c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003986:	4b60      	ldr	r3, [pc, #384]	@ (8003b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d11d      	bne.n	80039ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003996:	e01a      	b.n	80039ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003998:	4b5b      	ldr	r3, [pc, #364]	@ (8003b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d116      	bne.n	80039d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039a8:	e013      	b.n	80039d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039aa:	4b57      	ldr	r3, [pc, #348]	@ (8003b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10f      	bne.n	80039d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039b6:	4b54      	ldr	r3, [pc, #336]	@ (8003b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d109      	bne.n	80039d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039c6:	e006      	b.n	80039d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	73fb      	strb	r3, [r7, #15]
      break;
 80039cc:	e004      	b.n	80039d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039ce:	bf00      	nop
 80039d0:	e002      	b.n	80039d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039d2:	bf00      	nop
 80039d4:	e000      	b.n	80039d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10d      	bne.n	80039fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039de:	4b4a      	ldr	r3, [pc, #296]	@ (8003b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6819      	ldr	r1, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	430b      	orrs	r3, r1
 80039f4:	4944      	ldr	r1, [pc, #272]	@ (8003b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039fa:	7bfb      	ldrb	r3, [r7, #15]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d17d      	bne.n	8003afc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a00:	4b41      	ldr	r3, [pc, #260]	@ (8003b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a40      	ldr	r2, [pc, #256]	@ (8003b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003a0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a0c:	f7fd fdba 	bl	8001584 <HAL_GetTick>
 8003a10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a12:	e009      	b.n	8003a28 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a14:	f7fd fdb6 	bl	8001584 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d902      	bls.n	8003a28 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	73fb      	strb	r3, [r7, #15]
        break;
 8003a26:	e005      	b.n	8003a34 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a28:	4b37      	ldr	r3, [pc, #220]	@ (8003b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1ef      	bne.n	8003a14 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a34:	7bfb      	ldrb	r3, [r7, #15]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d160      	bne.n	8003afc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d111      	bne.n	8003a64 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a40:	4b31      	ldr	r3, [pc, #196]	@ (8003b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003a48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6892      	ldr	r2, [r2, #8]
 8003a50:	0211      	lsls	r1, r2, #8
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	68d2      	ldr	r2, [r2, #12]
 8003a56:	0912      	lsrs	r2, r2, #4
 8003a58:	0452      	lsls	r2, r2, #17
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	492a      	ldr	r1, [pc, #168]	@ (8003b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	610b      	str	r3, [r1, #16]
 8003a62:	e027      	b.n	8003ab4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d112      	bne.n	8003a90 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a6a:	4b27      	ldr	r3, [pc, #156]	@ (8003b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003a72:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6892      	ldr	r2, [r2, #8]
 8003a7a:	0211      	lsls	r1, r2, #8
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6912      	ldr	r2, [r2, #16]
 8003a80:	0852      	lsrs	r2, r2, #1
 8003a82:	3a01      	subs	r2, #1
 8003a84:	0552      	lsls	r2, r2, #21
 8003a86:	430a      	orrs	r2, r1
 8003a88:	491f      	ldr	r1, [pc, #124]	@ (8003b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	610b      	str	r3, [r1, #16]
 8003a8e:	e011      	b.n	8003ab4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a90:	4b1d      	ldr	r3, [pc, #116]	@ (8003b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003a98:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6892      	ldr	r2, [r2, #8]
 8003aa0:	0211      	lsls	r1, r2, #8
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6952      	ldr	r2, [r2, #20]
 8003aa6:	0852      	lsrs	r2, r2, #1
 8003aa8:	3a01      	subs	r2, #1
 8003aaa:	0652      	lsls	r2, r2, #25
 8003aac:	430a      	orrs	r2, r1
 8003aae:	4916      	ldr	r1, [pc, #88]	@ (8003b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ab4:	4b14      	ldr	r3, [pc, #80]	@ (8003b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a13      	ldr	r2, [pc, #76]	@ (8003b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003abe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac0:	f7fd fd60 	bl	8001584 <HAL_GetTick>
 8003ac4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ac6:	e009      	b.n	8003adc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ac8:	f7fd fd5c 	bl	8001584 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d902      	bls.n	8003adc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	73fb      	strb	r3, [r7, #15]
          break;
 8003ada:	e005      	b.n	8003ae8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003adc:	4b0a      	ldr	r3, [pc, #40]	@ (8003b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0ef      	beq.n	8003ac8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d106      	bne.n	8003afc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003aee:	4b06      	ldr	r3, [pc, #24]	@ (8003b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003af0:	691a      	ldr	r2, [r3, #16]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	4904      	ldr	r1, [pc, #16]	@ (8003b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40021000 	.word	0x40021000

08003b0c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b16:	2300      	movs	r3, #0
 8003b18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b1a:	4b6a      	ldr	r3, [pc, #424]	@ (8003cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d018      	beq.n	8003b58 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b26:	4b67      	ldr	r3, [pc, #412]	@ (8003cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f003 0203 	and.w	r2, r3, #3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d10d      	bne.n	8003b52 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
       ||
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d009      	beq.n	8003b52 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003b3e:	4b61      	ldr	r3, [pc, #388]	@ (8003cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	091b      	lsrs	r3, r3, #4
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
       ||
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d047      	beq.n	8003be2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	73fb      	strb	r3, [r7, #15]
 8003b56:	e044      	b.n	8003be2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d018      	beq.n	8003b92 <RCCEx_PLLSAI2_Config+0x86>
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d825      	bhi.n	8003bb0 <RCCEx_PLLSAI2_Config+0xa4>
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d002      	beq.n	8003b6e <RCCEx_PLLSAI2_Config+0x62>
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d009      	beq.n	8003b80 <RCCEx_PLLSAI2_Config+0x74>
 8003b6c:	e020      	b.n	8003bb0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b6e:	4b55      	ldr	r3, [pc, #340]	@ (8003cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d11d      	bne.n	8003bb6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b7e:	e01a      	b.n	8003bb6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b80:	4b50      	ldr	r3, [pc, #320]	@ (8003cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d116      	bne.n	8003bba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b90:	e013      	b.n	8003bba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b92:	4b4c      	ldr	r3, [pc, #304]	@ (8003cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10f      	bne.n	8003bbe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b9e:	4b49      	ldr	r3, [pc, #292]	@ (8003cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d109      	bne.n	8003bbe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bae:	e006      	b.n	8003bbe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb4:	e004      	b.n	8003bc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003bb6:	bf00      	nop
 8003bb8:	e002      	b.n	8003bc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003bba:	bf00      	nop
 8003bbc:	e000      	b.n	8003bc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003bbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10d      	bne.n	8003be2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003bc6:	4b3f      	ldr	r3, [pc, #252]	@ (8003cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6819      	ldr	r1, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	430b      	orrs	r3, r1
 8003bdc:	4939      	ldr	r1, [pc, #228]	@ (8003cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d167      	bne.n	8003cb8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003be8:	4b36      	ldr	r3, [pc, #216]	@ (8003cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a35      	ldr	r2, [pc, #212]	@ (8003cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf4:	f7fd fcc6 	bl	8001584 <HAL_GetTick>
 8003bf8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bfa:	e009      	b.n	8003c10 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bfc:	f7fd fcc2 	bl	8001584 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d902      	bls.n	8003c10 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	73fb      	strb	r3, [r7, #15]
        break;
 8003c0e:	e005      	b.n	8003c1c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c10:	4b2c      	ldr	r3, [pc, #176]	@ (8003cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1ef      	bne.n	8003bfc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d14a      	bne.n	8003cb8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d111      	bne.n	8003c4c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c28:	4b26      	ldr	r3, [pc, #152]	@ (8003cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003c30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6892      	ldr	r2, [r2, #8]
 8003c38:	0211      	lsls	r1, r2, #8
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	68d2      	ldr	r2, [r2, #12]
 8003c3e:	0912      	lsrs	r2, r2, #4
 8003c40:	0452      	lsls	r2, r2, #17
 8003c42:	430a      	orrs	r2, r1
 8003c44:	491f      	ldr	r1, [pc, #124]	@ (8003cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	614b      	str	r3, [r1, #20]
 8003c4a:	e011      	b.n	8003c70 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8003cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003c54:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6892      	ldr	r2, [r2, #8]
 8003c5c:	0211      	lsls	r1, r2, #8
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6912      	ldr	r2, [r2, #16]
 8003c62:	0852      	lsrs	r2, r2, #1
 8003c64:	3a01      	subs	r2, #1
 8003c66:	0652      	lsls	r2, r2, #25
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	4916      	ldr	r1, [pc, #88]	@ (8003cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c70:	4b14      	ldr	r3, [pc, #80]	@ (8003cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a13      	ldr	r2, [pc, #76]	@ (8003cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7c:	f7fd fc82 	bl	8001584 <HAL_GetTick>
 8003c80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c82:	e009      	b.n	8003c98 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c84:	f7fd fc7e 	bl	8001584 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d902      	bls.n	8003c98 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	73fb      	strb	r3, [r7, #15]
          break;
 8003c96:	e005      	b.n	8003ca4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c98:	4b0a      	ldr	r3, [pc, #40]	@ (8003cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0ef      	beq.n	8003c84 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d106      	bne.n	8003cb8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003caa:	4b06      	ldr	r3, [pc, #24]	@ (8003cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cac:	695a      	ldr	r2, [r3, #20]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	4904      	ldr	r1, [pc, #16]	@ (8003cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40021000 	.word	0x40021000

08003cc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e040      	b.n	8003d5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d106      	bne.n	8003cf0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fd fa58 	bl	80011a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2224      	movs	r2, #36	@ 0x24
 8003cf4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0201 	bic.w	r2, r2, #1
 8003d04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d002      	beq.n	8003d14 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 fedc 	bl	8004acc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 fc21 	bl	800455c <UART_SetConfig>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d101      	bne.n	8003d24 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e01b      	b.n	8003d5c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0201 	orr.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 ff5b 	bl	8004c10 <UART_CheckIdleState>
 8003d5a:	4603      	mov	r3, r0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b08a      	sub	sp, #40	@ 0x28
 8003d68:	af02      	add	r7, sp, #8
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	603b      	str	r3, [r7, #0]
 8003d70:	4613      	mov	r3, r2
 8003d72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d78:	2b20      	cmp	r3, #32
 8003d7a:	d177      	bne.n	8003e6c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <HAL_UART_Transmit+0x24>
 8003d82:	88fb      	ldrh	r3, [r7, #6]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e070      	b.n	8003e6e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2221      	movs	r2, #33	@ 0x21
 8003d98:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d9a:	f7fd fbf3 	bl	8001584 <HAL_GetTick>
 8003d9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	88fa      	ldrh	r2, [r7, #6]
 8003da4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	88fa      	ldrh	r2, [r7, #6]
 8003dac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003db8:	d108      	bne.n	8003dcc <HAL_UART_Transmit+0x68>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d104      	bne.n	8003dcc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	61bb      	str	r3, [r7, #24]
 8003dca:	e003      	b.n	8003dd4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003dd4:	e02f      	b.n	8003e36 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	2180      	movs	r1, #128	@ 0x80
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 ffbd 	bl	8004d60 <UART_WaitOnFlagUntilTimeout>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d004      	beq.n	8003df6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2220      	movs	r2, #32
 8003df0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e03b      	b.n	8003e6e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10b      	bne.n	8003e14 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	881a      	ldrh	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e08:	b292      	uxth	r2, r2
 8003e0a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	3302      	adds	r3, #2
 8003e10:	61bb      	str	r3, [r7, #24]
 8003e12:	e007      	b.n	8003e24 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	781a      	ldrb	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	3301      	adds	r3, #1
 8003e22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1c9      	bne.n	8003dd6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	2140      	movs	r1, #64	@ 0x40
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 ff87 	bl	8004d60 <UART_WaitOnFlagUntilTimeout>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d004      	beq.n	8003e62 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e005      	b.n	8003e6e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2220      	movs	r2, #32
 8003e66:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	e000      	b.n	8003e6e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003e6c:	2302      	movs	r3, #2
  }
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3720      	adds	r7, #32
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08a      	sub	sp, #40	@ 0x28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	4613      	mov	r3, r2
 8003e84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e8c:	2b20      	cmp	r3, #32
 8003e8e:	d137      	bne.n	8003f00 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <HAL_UART_Receive_IT+0x24>
 8003e96:	88fb      	ldrh	r3, [r7, #6]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e030      	b.n	8003f02 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a18      	ldr	r2, [pc, #96]	@ (8003f0c <HAL_UART_Receive_IT+0x94>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d01f      	beq.n	8003ef0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d018      	beq.n	8003ef0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	e853 3f00 	ldrex	r3, [r3]
 8003eca:	613b      	str	r3, [r7, #16]
   return(result);
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ed2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003edc:	623b      	str	r3, [r7, #32]
 8003ede:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee0:	69f9      	ldr	r1, [r7, #28]
 8003ee2:	6a3a      	ldr	r2, [r7, #32]
 8003ee4:	e841 2300 	strex	r3, r2, [r1]
 8003ee8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1e6      	bne.n	8003ebe <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ef0:	88fb      	ldrh	r3, [r7, #6]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	68b9      	ldr	r1, [r7, #8]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 ffa0 	bl	8004e3c <UART_Start_Receive_IT>
 8003efc:	4603      	mov	r3, r0
 8003efe:	e000      	b.n	8003f02 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f00:	2302      	movs	r3, #2
  }
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3728      	adds	r7, #40	@ 0x28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40008000 	.word	0x40008000

08003f10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b0ba      	sub	sp, #232	@ 0xe8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003f3a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003f3e:	4013      	ands	r3, r2
 8003f40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003f44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d115      	bne.n	8003f78 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f50:	f003 0320 	and.w	r3, r3, #32
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00f      	beq.n	8003f78 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f5c:	f003 0320 	and.w	r3, r3, #32
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d009      	beq.n	8003f78 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 82ca 	beq.w	8004502 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	4798      	blx	r3
      }
      return;
 8003f76:	e2c4      	b.n	8004502 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003f78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 8117 	beq.w	80041b0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003f8e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003f92:	4b85      	ldr	r3, [pc, #532]	@ (80041a8 <HAL_UART_IRQHandler+0x298>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 810a 	beq.w	80041b0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d011      	beq.n	8003fcc <HAL_UART_IRQHandler+0xbc>
 8003fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00b      	beq.n	8003fcc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fc2:	f043 0201 	orr.w	r2, r3, #1
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d011      	beq.n	8003ffc <HAL_UART_IRQHandler+0xec>
 8003fd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00b      	beq.n	8003ffc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2202      	movs	r2, #2
 8003fea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ff2:	f043 0204 	orr.w	r2, r3, #4
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d011      	beq.n	800402c <HAL_UART_IRQHandler+0x11c>
 8004008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00b      	beq.n	800402c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2204      	movs	r2, #4
 800401a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004022:	f043 0202 	orr.w	r2, r3, #2
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800402c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004030:	f003 0308 	and.w	r3, r3, #8
 8004034:	2b00      	cmp	r3, #0
 8004036:	d017      	beq.n	8004068 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800403c:	f003 0320 	and.w	r3, r3, #32
 8004040:	2b00      	cmp	r3, #0
 8004042:	d105      	bne.n	8004050 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004044:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004048:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00b      	beq.n	8004068 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2208      	movs	r2, #8
 8004056:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800405e:	f043 0208 	orr.w	r2, r3, #8
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800406c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004070:	2b00      	cmp	r3, #0
 8004072:	d012      	beq.n	800409a <HAL_UART_IRQHandler+0x18a>
 8004074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004078:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00c      	beq.n	800409a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004088:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004090:	f043 0220 	orr.w	r2, r3, #32
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 8230 	beq.w	8004506 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80040a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040aa:	f003 0320 	and.w	r3, r3, #32
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00d      	beq.n	80040ce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d007      	beq.n	80040ce <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e2:	2b40      	cmp	r3, #64	@ 0x40
 80040e4:	d005      	beq.n	80040f2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80040e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d04f      	beq.n	8004192 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 ff68 	bl	8004fc8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004102:	2b40      	cmp	r3, #64	@ 0x40
 8004104:	d141      	bne.n	800418a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	3308      	adds	r3, #8
 800410c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004110:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004114:	e853 3f00 	ldrex	r3, [r3]
 8004118:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800411c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004120:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004124:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3308      	adds	r3, #8
 800412e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004132:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004136:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800413e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004142:	e841 2300 	strex	r3, r2, [r1]
 8004146:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800414a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1d9      	bne.n	8004106 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004156:	2b00      	cmp	r3, #0
 8004158:	d013      	beq.n	8004182 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800415e:	4a13      	ldr	r2, [pc, #76]	@ (80041ac <HAL_UART_IRQHandler+0x29c>)
 8004160:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004166:	4618      	mov	r0, r3
 8004168:	f7fd fb8b 	bl	8001882 <HAL_DMA_Abort_IT>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d017      	beq.n	80041a2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800417c:	4610      	mov	r0, r2
 800417e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004180:	e00f      	b.n	80041a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f9d4 	bl	8004530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004188:	e00b      	b.n	80041a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f9d0 	bl	8004530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004190:	e007      	b.n	80041a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f9cc 	bl	8004530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80041a0:	e1b1      	b.n	8004506 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a2:	bf00      	nop
    return;
 80041a4:	e1af      	b.n	8004506 <HAL_UART_IRQHandler+0x5f6>
 80041a6:	bf00      	nop
 80041a8:	04000120 	.word	0x04000120
 80041ac:	08005091 	.word	0x08005091

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	f040 816a 	bne.w	800448e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80041ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041be:	f003 0310 	and.w	r3, r3, #16
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 8163 	beq.w	800448e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80041c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041cc:	f003 0310 	and.w	r3, r3, #16
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 815c 	beq.w	800448e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2210      	movs	r2, #16
 80041dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041e8:	2b40      	cmp	r3, #64	@ 0x40
 80041ea:	f040 80d4 	bne.w	8004396 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 80ad 	beq.w	800435e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800420a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800420e:	429a      	cmp	r2, r3
 8004210:	f080 80a5 	bcs.w	800435e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800421a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0320 	and.w	r3, r3, #32
 800422a:	2b00      	cmp	r3, #0
 800422c:	f040 8086 	bne.w	800433c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004238:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800423c:	e853 3f00 	ldrex	r3, [r3]
 8004240:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004244:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004248:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800424c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	461a      	mov	r2, r3
 8004256:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800425a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800425e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004262:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004266:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800426a:	e841 2300 	strex	r3, r2, [r1]
 800426e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004272:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1da      	bne.n	8004230 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	3308      	adds	r3, #8
 8004280:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004282:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004284:	e853 3f00 	ldrex	r3, [r3]
 8004288:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800428a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800428c:	f023 0301 	bic.w	r3, r3, #1
 8004290:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	3308      	adds	r3, #8
 800429a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800429e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80042a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80042a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80042aa:	e841 2300 	strex	r3, r2, [r1]
 80042ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80042b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1e1      	bne.n	800427a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3308      	adds	r3, #8
 80042bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042c0:	e853 3f00 	ldrex	r3, [r3]
 80042c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80042c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3308      	adds	r3, #8
 80042d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80042da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80042dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80042e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80042e2:	e841 2300 	strex	r3, r2, [r1]
 80042e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80042e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1e3      	bne.n	80042b6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004302:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004304:	e853 3f00 	ldrex	r3, [r3]
 8004308:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800430a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800430c:	f023 0310 	bic.w	r3, r3, #16
 8004310:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	461a      	mov	r2, r3
 800431a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800431e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004320:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004322:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004324:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004326:	e841 2300 	strex	r3, r2, [r1]
 800432a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800432c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1e4      	bne.n	80042fc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004336:	4618      	mov	r0, r3
 8004338:	f7fd fa65 	bl	8001806 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800434e:	b29b      	uxth	r3, r3
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	b29b      	uxth	r3, r3
 8004354:	4619      	mov	r1, r3
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f8f4 	bl	8004544 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800435c:	e0d5      	b.n	800450a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004364:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004368:	429a      	cmp	r2, r3
 800436a:	f040 80ce 	bne.w	800450a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0320 	and.w	r3, r3, #32
 800437a:	2b20      	cmp	r3, #32
 800437c:	f040 80c5 	bne.w	800450a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800438c:	4619      	mov	r1, r3
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f8d8 	bl	8004544 <HAL_UARTEx_RxEventCallback>
      return;
 8004394:	e0b9      	b.n	800450a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 80ab 	beq.w	800450e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80043b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 80a6 	beq.w	800450e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ca:	e853 3f00 	ldrex	r3, [r3]
 80043ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	461a      	mov	r2, r3
 80043e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80043e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80043e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043ec:	e841 2300 	strex	r3, r2, [r1]
 80043f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1e4      	bne.n	80043c2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3308      	adds	r3, #8
 80043fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004402:	e853 3f00 	ldrex	r3, [r3]
 8004406:	623b      	str	r3, [r7, #32]
   return(result);
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	f023 0301 	bic.w	r3, r3, #1
 800440e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	3308      	adds	r3, #8
 8004418:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800441c:	633a      	str	r2, [r7, #48]	@ 0x30
 800441e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004420:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004422:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004424:	e841 2300 	strex	r3, r2, [r1]
 8004428:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800442a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1e3      	bne.n	80043f8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2220      	movs	r2, #32
 8004434:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	e853 3f00 	ldrex	r3, [r3]
 8004450:	60fb      	str	r3, [r7, #12]
   return(result);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f023 0310 	bic.w	r3, r3, #16
 8004458:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	461a      	mov	r2, r3
 8004462:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004466:	61fb      	str	r3, [r7, #28]
 8004468:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446a:	69b9      	ldr	r1, [r7, #24]
 800446c:	69fa      	ldr	r2, [r7, #28]
 800446e:	e841 2300 	strex	r3, r2, [r1]
 8004472:	617b      	str	r3, [r7, #20]
   return(result);
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1e4      	bne.n	8004444 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2202      	movs	r2, #2
 800447e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004480:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004484:	4619      	mov	r1, r3
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f85c 	bl	8004544 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800448c:	e03f      	b.n	800450e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800448e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004492:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00e      	beq.n	80044b8 <HAL_UART_IRQHandler+0x5a8>
 800449a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800449e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d008      	beq.n	80044b8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80044ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 ffe9 	bl	8005488 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80044b6:	e02d      	b.n	8004514 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80044b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00e      	beq.n	80044e2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80044c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d008      	beq.n	80044e2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d01c      	beq.n	8004512 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	4798      	blx	r3
    }
    return;
 80044e0:	e017      	b.n	8004512 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80044e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d012      	beq.n	8004514 <HAL_UART_IRQHandler+0x604>
 80044ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00c      	beq.n	8004514 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 fdde 	bl	80050bc <UART_EndTransmit_IT>
    return;
 8004500:	e008      	b.n	8004514 <HAL_UART_IRQHandler+0x604>
      return;
 8004502:	bf00      	nop
 8004504:	e006      	b.n	8004514 <HAL_UART_IRQHandler+0x604>
    return;
 8004506:	bf00      	nop
 8004508:	e004      	b.n	8004514 <HAL_UART_IRQHandler+0x604>
      return;
 800450a:	bf00      	nop
 800450c:	e002      	b.n	8004514 <HAL_UART_IRQHandler+0x604>
      return;
 800450e:	bf00      	nop
 8004510:	e000      	b.n	8004514 <HAL_UART_IRQHandler+0x604>
    return;
 8004512:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004514:	37e8      	adds	r7, #232	@ 0xe8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop

0800451c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	460b      	mov	r3, r1
 800454e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800455c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004560:	b08a      	sub	sp, #40	@ 0x28
 8004562:	af00      	add	r7, sp, #0
 8004564:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004566:	2300      	movs	r3, #0
 8004568:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	431a      	orrs	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	431a      	orrs	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	4313      	orrs	r3, r2
 8004582:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	4ba4      	ldr	r3, [pc, #656]	@ (800481c <UART_SetConfig+0x2c0>)
 800458c:	4013      	ands	r3, r2
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	6812      	ldr	r2, [r2, #0]
 8004592:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004594:	430b      	orrs	r3, r1
 8004596:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	68da      	ldr	r2, [r3, #12]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a99      	ldr	r2, [pc, #612]	@ (8004820 <UART_SetConfig+0x2c4>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d004      	beq.n	80045c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045c4:	4313      	orrs	r3, r2
 80045c6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045d8:	430a      	orrs	r2, r1
 80045da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a90      	ldr	r2, [pc, #576]	@ (8004824 <UART_SetConfig+0x2c8>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d126      	bne.n	8004634 <UART_SetConfig+0xd8>
 80045e6:	4b90      	ldr	r3, [pc, #576]	@ (8004828 <UART_SetConfig+0x2cc>)
 80045e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ec:	f003 0303 	and.w	r3, r3, #3
 80045f0:	2b03      	cmp	r3, #3
 80045f2:	d81b      	bhi.n	800462c <UART_SetConfig+0xd0>
 80045f4:	a201      	add	r2, pc, #4	@ (adr r2, 80045fc <UART_SetConfig+0xa0>)
 80045f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fa:	bf00      	nop
 80045fc:	0800460d 	.word	0x0800460d
 8004600:	0800461d 	.word	0x0800461d
 8004604:	08004615 	.word	0x08004615
 8004608:	08004625 	.word	0x08004625
 800460c:	2301      	movs	r3, #1
 800460e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004612:	e116      	b.n	8004842 <UART_SetConfig+0x2e6>
 8004614:	2302      	movs	r3, #2
 8004616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800461a:	e112      	b.n	8004842 <UART_SetConfig+0x2e6>
 800461c:	2304      	movs	r3, #4
 800461e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004622:	e10e      	b.n	8004842 <UART_SetConfig+0x2e6>
 8004624:	2308      	movs	r3, #8
 8004626:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800462a:	e10a      	b.n	8004842 <UART_SetConfig+0x2e6>
 800462c:	2310      	movs	r3, #16
 800462e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004632:	e106      	b.n	8004842 <UART_SetConfig+0x2e6>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a7c      	ldr	r2, [pc, #496]	@ (800482c <UART_SetConfig+0x2d0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d138      	bne.n	80046b0 <UART_SetConfig+0x154>
 800463e:	4b7a      	ldr	r3, [pc, #488]	@ (8004828 <UART_SetConfig+0x2cc>)
 8004640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004644:	f003 030c 	and.w	r3, r3, #12
 8004648:	2b0c      	cmp	r3, #12
 800464a:	d82d      	bhi.n	80046a8 <UART_SetConfig+0x14c>
 800464c:	a201      	add	r2, pc, #4	@ (adr r2, 8004654 <UART_SetConfig+0xf8>)
 800464e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004652:	bf00      	nop
 8004654:	08004689 	.word	0x08004689
 8004658:	080046a9 	.word	0x080046a9
 800465c:	080046a9 	.word	0x080046a9
 8004660:	080046a9 	.word	0x080046a9
 8004664:	08004699 	.word	0x08004699
 8004668:	080046a9 	.word	0x080046a9
 800466c:	080046a9 	.word	0x080046a9
 8004670:	080046a9 	.word	0x080046a9
 8004674:	08004691 	.word	0x08004691
 8004678:	080046a9 	.word	0x080046a9
 800467c:	080046a9 	.word	0x080046a9
 8004680:	080046a9 	.word	0x080046a9
 8004684:	080046a1 	.word	0x080046a1
 8004688:	2300      	movs	r3, #0
 800468a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800468e:	e0d8      	b.n	8004842 <UART_SetConfig+0x2e6>
 8004690:	2302      	movs	r3, #2
 8004692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004696:	e0d4      	b.n	8004842 <UART_SetConfig+0x2e6>
 8004698:	2304      	movs	r3, #4
 800469a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800469e:	e0d0      	b.n	8004842 <UART_SetConfig+0x2e6>
 80046a0:	2308      	movs	r3, #8
 80046a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046a6:	e0cc      	b.n	8004842 <UART_SetConfig+0x2e6>
 80046a8:	2310      	movs	r3, #16
 80046aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ae:	e0c8      	b.n	8004842 <UART_SetConfig+0x2e6>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a5e      	ldr	r2, [pc, #376]	@ (8004830 <UART_SetConfig+0x2d4>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d125      	bne.n	8004706 <UART_SetConfig+0x1aa>
 80046ba:	4b5b      	ldr	r3, [pc, #364]	@ (8004828 <UART_SetConfig+0x2cc>)
 80046bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80046c4:	2b30      	cmp	r3, #48	@ 0x30
 80046c6:	d016      	beq.n	80046f6 <UART_SetConfig+0x19a>
 80046c8:	2b30      	cmp	r3, #48	@ 0x30
 80046ca:	d818      	bhi.n	80046fe <UART_SetConfig+0x1a2>
 80046cc:	2b20      	cmp	r3, #32
 80046ce:	d00a      	beq.n	80046e6 <UART_SetConfig+0x18a>
 80046d0:	2b20      	cmp	r3, #32
 80046d2:	d814      	bhi.n	80046fe <UART_SetConfig+0x1a2>
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <UART_SetConfig+0x182>
 80046d8:	2b10      	cmp	r3, #16
 80046da:	d008      	beq.n	80046ee <UART_SetConfig+0x192>
 80046dc:	e00f      	b.n	80046fe <UART_SetConfig+0x1a2>
 80046de:	2300      	movs	r3, #0
 80046e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046e4:	e0ad      	b.n	8004842 <UART_SetConfig+0x2e6>
 80046e6:	2302      	movs	r3, #2
 80046e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ec:	e0a9      	b.n	8004842 <UART_SetConfig+0x2e6>
 80046ee:	2304      	movs	r3, #4
 80046f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046f4:	e0a5      	b.n	8004842 <UART_SetConfig+0x2e6>
 80046f6:	2308      	movs	r3, #8
 80046f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046fc:	e0a1      	b.n	8004842 <UART_SetConfig+0x2e6>
 80046fe:	2310      	movs	r3, #16
 8004700:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004704:	e09d      	b.n	8004842 <UART_SetConfig+0x2e6>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a4a      	ldr	r2, [pc, #296]	@ (8004834 <UART_SetConfig+0x2d8>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d125      	bne.n	800475c <UART_SetConfig+0x200>
 8004710:	4b45      	ldr	r3, [pc, #276]	@ (8004828 <UART_SetConfig+0x2cc>)
 8004712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004716:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800471a:	2bc0      	cmp	r3, #192	@ 0xc0
 800471c:	d016      	beq.n	800474c <UART_SetConfig+0x1f0>
 800471e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004720:	d818      	bhi.n	8004754 <UART_SetConfig+0x1f8>
 8004722:	2b80      	cmp	r3, #128	@ 0x80
 8004724:	d00a      	beq.n	800473c <UART_SetConfig+0x1e0>
 8004726:	2b80      	cmp	r3, #128	@ 0x80
 8004728:	d814      	bhi.n	8004754 <UART_SetConfig+0x1f8>
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <UART_SetConfig+0x1d8>
 800472e:	2b40      	cmp	r3, #64	@ 0x40
 8004730:	d008      	beq.n	8004744 <UART_SetConfig+0x1e8>
 8004732:	e00f      	b.n	8004754 <UART_SetConfig+0x1f8>
 8004734:	2300      	movs	r3, #0
 8004736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800473a:	e082      	b.n	8004842 <UART_SetConfig+0x2e6>
 800473c:	2302      	movs	r3, #2
 800473e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004742:	e07e      	b.n	8004842 <UART_SetConfig+0x2e6>
 8004744:	2304      	movs	r3, #4
 8004746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800474a:	e07a      	b.n	8004842 <UART_SetConfig+0x2e6>
 800474c:	2308      	movs	r3, #8
 800474e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004752:	e076      	b.n	8004842 <UART_SetConfig+0x2e6>
 8004754:	2310      	movs	r3, #16
 8004756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800475a:	e072      	b.n	8004842 <UART_SetConfig+0x2e6>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a35      	ldr	r2, [pc, #212]	@ (8004838 <UART_SetConfig+0x2dc>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d12a      	bne.n	80047bc <UART_SetConfig+0x260>
 8004766:	4b30      	ldr	r3, [pc, #192]	@ (8004828 <UART_SetConfig+0x2cc>)
 8004768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800476c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004770:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004774:	d01a      	beq.n	80047ac <UART_SetConfig+0x250>
 8004776:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800477a:	d81b      	bhi.n	80047b4 <UART_SetConfig+0x258>
 800477c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004780:	d00c      	beq.n	800479c <UART_SetConfig+0x240>
 8004782:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004786:	d815      	bhi.n	80047b4 <UART_SetConfig+0x258>
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <UART_SetConfig+0x238>
 800478c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004790:	d008      	beq.n	80047a4 <UART_SetConfig+0x248>
 8004792:	e00f      	b.n	80047b4 <UART_SetConfig+0x258>
 8004794:	2300      	movs	r3, #0
 8004796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800479a:	e052      	b.n	8004842 <UART_SetConfig+0x2e6>
 800479c:	2302      	movs	r3, #2
 800479e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047a2:	e04e      	b.n	8004842 <UART_SetConfig+0x2e6>
 80047a4:	2304      	movs	r3, #4
 80047a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047aa:	e04a      	b.n	8004842 <UART_SetConfig+0x2e6>
 80047ac:	2308      	movs	r3, #8
 80047ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047b2:	e046      	b.n	8004842 <UART_SetConfig+0x2e6>
 80047b4:	2310      	movs	r3, #16
 80047b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ba:	e042      	b.n	8004842 <UART_SetConfig+0x2e6>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a17      	ldr	r2, [pc, #92]	@ (8004820 <UART_SetConfig+0x2c4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d13a      	bne.n	800483c <UART_SetConfig+0x2e0>
 80047c6:	4b18      	ldr	r3, [pc, #96]	@ (8004828 <UART_SetConfig+0x2cc>)
 80047c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80047d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80047d4:	d01a      	beq.n	800480c <UART_SetConfig+0x2b0>
 80047d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80047da:	d81b      	bhi.n	8004814 <UART_SetConfig+0x2b8>
 80047dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047e0:	d00c      	beq.n	80047fc <UART_SetConfig+0x2a0>
 80047e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047e6:	d815      	bhi.n	8004814 <UART_SetConfig+0x2b8>
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <UART_SetConfig+0x298>
 80047ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047f0:	d008      	beq.n	8004804 <UART_SetConfig+0x2a8>
 80047f2:	e00f      	b.n	8004814 <UART_SetConfig+0x2b8>
 80047f4:	2300      	movs	r3, #0
 80047f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047fa:	e022      	b.n	8004842 <UART_SetConfig+0x2e6>
 80047fc:	2302      	movs	r3, #2
 80047fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004802:	e01e      	b.n	8004842 <UART_SetConfig+0x2e6>
 8004804:	2304      	movs	r3, #4
 8004806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800480a:	e01a      	b.n	8004842 <UART_SetConfig+0x2e6>
 800480c:	2308      	movs	r3, #8
 800480e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004812:	e016      	b.n	8004842 <UART_SetConfig+0x2e6>
 8004814:	2310      	movs	r3, #16
 8004816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800481a:	e012      	b.n	8004842 <UART_SetConfig+0x2e6>
 800481c:	efff69f3 	.word	0xefff69f3
 8004820:	40008000 	.word	0x40008000
 8004824:	40013800 	.word	0x40013800
 8004828:	40021000 	.word	0x40021000
 800482c:	40004400 	.word	0x40004400
 8004830:	40004800 	.word	0x40004800
 8004834:	40004c00 	.word	0x40004c00
 8004838:	40005000 	.word	0x40005000
 800483c:	2310      	movs	r3, #16
 800483e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a9f      	ldr	r2, [pc, #636]	@ (8004ac4 <UART_SetConfig+0x568>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d17a      	bne.n	8004942 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800484c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004850:	2b08      	cmp	r3, #8
 8004852:	d824      	bhi.n	800489e <UART_SetConfig+0x342>
 8004854:	a201      	add	r2, pc, #4	@ (adr r2, 800485c <UART_SetConfig+0x300>)
 8004856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485a:	bf00      	nop
 800485c:	08004881 	.word	0x08004881
 8004860:	0800489f 	.word	0x0800489f
 8004864:	08004889 	.word	0x08004889
 8004868:	0800489f 	.word	0x0800489f
 800486c:	0800488f 	.word	0x0800488f
 8004870:	0800489f 	.word	0x0800489f
 8004874:	0800489f 	.word	0x0800489f
 8004878:	0800489f 	.word	0x0800489f
 800487c:	08004897 	.word	0x08004897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004880:	f7fe fcda 	bl	8003238 <HAL_RCC_GetPCLK1Freq>
 8004884:	61f8      	str	r0, [r7, #28]
        break;
 8004886:	e010      	b.n	80048aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004888:	4b8f      	ldr	r3, [pc, #572]	@ (8004ac8 <UART_SetConfig+0x56c>)
 800488a:	61fb      	str	r3, [r7, #28]
        break;
 800488c:	e00d      	b.n	80048aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800488e:	f7fe fc3b 	bl	8003108 <HAL_RCC_GetSysClockFreq>
 8004892:	61f8      	str	r0, [r7, #28]
        break;
 8004894:	e009      	b.n	80048aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004896:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800489a:	61fb      	str	r3, [r7, #28]
        break;
 800489c:	e005      	b.n	80048aa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80048a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 80fb 	beq.w	8004aa8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	4613      	mov	r3, r2
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	4413      	add	r3, r2
 80048bc:	69fa      	ldr	r2, [r7, #28]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d305      	bcc.n	80048ce <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048c8:	69fa      	ldr	r2, [r7, #28]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d903      	bls.n	80048d6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80048d4:	e0e8      	b.n	8004aa8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	2200      	movs	r2, #0
 80048da:	461c      	mov	r4, r3
 80048dc:	4615      	mov	r5, r2
 80048de:	f04f 0200 	mov.w	r2, #0
 80048e2:	f04f 0300 	mov.w	r3, #0
 80048e6:	022b      	lsls	r3, r5, #8
 80048e8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80048ec:	0222      	lsls	r2, r4, #8
 80048ee:	68f9      	ldr	r1, [r7, #12]
 80048f0:	6849      	ldr	r1, [r1, #4]
 80048f2:	0849      	lsrs	r1, r1, #1
 80048f4:	2000      	movs	r0, #0
 80048f6:	4688      	mov	r8, r1
 80048f8:	4681      	mov	r9, r0
 80048fa:	eb12 0a08 	adds.w	sl, r2, r8
 80048fe:	eb43 0b09 	adc.w	fp, r3, r9
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	603b      	str	r3, [r7, #0]
 800490a:	607a      	str	r2, [r7, #4]
 800490c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004910:	4650      	mov	r0, sl
 8004912:	4659      	mov	r1, fp
 8004914:	f7fb fcac 	bl	8000270 <__aeabi_uldivmod>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	4613      	mov	r3, r2
 800491e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004926:	d308      	bcc.n	800493a <UART_SetConfig+0x3de>
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800492e:	d204      	bcs.n	800493a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	60da      	str	r2, [r3, #12]
 8004938:	e0b6      	b.n	8004aa8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004940:	e0b2      	b.n	8004aa8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800494a:	d15e      	bne.n	8004a0a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800494c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004950:	2b08      	cmp	r3, #8
 8004952:	d828      	bhi.n	80049a6 <UART_SetConfig+0x44a>
 8004954:	a201      	add	r2, pc, #4	@ (adr r2, 800495c <UART_SetConfig+0x400>)
 8004956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495a:	bf00      	nop
 800495c:	08004981 	.word	0x08004981
 8004960:	08004989 	.word	0x08004989
 8004964:	08004991 	.word	0x08004991
 8004968:	080049a7 	.word	0x080049a7
 800496c:	08004997 	.word	0x08004997
 8004970:	080049a7 	.word	0x080049a7
 8004974:	080049a7 	.word	0x080049a7
 8004978:	080049a7 	.word	0x080049a7
 800497c:	0800499f 	.word	0x0800499f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004980:	f7fe fc5a 	bl	8003238 <HAL_RCC_GetPCLK1Freq>
 8004984:	61f8      	str	r0, [r7, #28]
        break;
 8004986:	e014      	b.n	80049b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004988:	f7fe fc6c 	bl	8003264 <HAL_RCC_GetPCLK2Freq>
 800498c:	61f8      	str	r0, [r7, #28]
        break;
 800498e:	e010      	b.n	80049b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004990:	4b4d      	ldr	r3, [pc, #308]	@ (8004ac8 <UART_SetConfig+0x56c>)
 8004992:	61fb      	str	r3, [r7, #28]
        break;
 8004994:	e00d      	b.n	80049b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004996:	f7fe fbb7 	bl	8003108 <HAL_RCC_GetSysClockFreq>
 800499a:	61f8      	str	r0, [r7, #28]
        break;
 800499c:	e009      	b.n	80049b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800499e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049a2:	61fb      	str	r3, [r7, #28]
        break;
 80049a4:	e005      	b.n	80049b2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80049b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d077      	beq.n	8004aa8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	005a      	lsls	r2, r3, #1
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	085b      	lsrs	r3, r3, #1
 80049c2:	441a      	add	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049cc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	2b0f      	cmp	r3, #15
 80049d2:	d916      	bls.n	8004a02 <UART_SetConfig+0x4a6>
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049da:	d212      	bcs.n	8004a02 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	b29b      	uxth	r3, r3
 80049e0:	f023 030f 	bic.w	r3, r3, #15
 80049e4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	085b      	lsrs	r3, r3, #1
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	f003 0307 	and.w	r3, r3, #7
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	8afb      	ldrh	r3, [r7, #22]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	8afa      	ldrh	r2, [r7, #22]
 80049fe:	60da      	str	r2, [r3, #12]
 8004a00:	e052      	b.n	8004aa8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004a08:	e04e      	b.n	8004aa8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a0a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a0e:	2b08      	cmp	r3, #8
 8004a10:	d827      	bhi.n	8004a62 <UART_SetConfig+0x506>
 8004a12:	a201      	add	r2, pc, #4	@ (adr r2, 8004a18 <UART_SetConfig+0x4bc>)
 8004a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a18:	08004a3d 	.word	0x08004a3d
 8004a1c:	08004a45 	.word	0x08004a45
 8004a20:	08004a4d 	.word	0x08004a4d
 8004a24:	08004a63 	.word	0x08004a63
 8004a28:	08004a53 	.word	0x08004a53
 8004a2c:	08004a63 	.word	0x08004a63
 8004a30:	08004a63 	.word	0x08004a63
 8004a34:	08004a63 	.word	0x08004a63
 8004a38:	08004a5b 	.word	0x08004a5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a3c:	f7fe fbfc 	bl	8003238 <HAL_RCC_GetPCLK1Freq>
 8004a40:	61f8      	str	r0, [r7, #28]
        break;
 8004a42:	e014      	b.n	8004a6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a44:	f7fe fc0e 	bl	8003264 <HAL_RCC_GetPCLK2Freq>
 8004a48:	61f8      	str	r0, [r7, #28]
        break;
 8004a4a:	e010      	b.n	8004a6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8004ac8 <UART_SetConfig+0x56c>)
 8004a4e:	61fb      	str	r3, [r7, #28]
        break;
 8004a50:	e00d      	b.n	8004a6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a52:	f7fe fb59 	bl	8003108 <HAL_RCC_GetSysClockFreq>
 8004a56:	61f8      	str	r0, [r7, #28]
        break;
 8004a58:	e009      	b.n	8004a6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a5e:	61fb      	str	r3, [r7, #28]
        break;
 8004a60:	e005      	b.n	8004a6e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004a6c:	bf00      	nop
    }

    if (pclk != 0U)
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d019      	beq.n	8004aa8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	085a      	lsrs	r2, r3, #1
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	441a      	add	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a86:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	2b0f      	cmp	r3, #15
 8004a8c:	d909      	bls.n	8004aa2 <UART_SetConfig+0x546>
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a94:	d205      	bcs.n	8004aa2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	60da      	str	r2, [r3, #12]
 8004aa0:	e002      	b.n	8004aa8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004ab4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3728      	adds	r7, #40	@ 0x28
 8004abc:	46bd      	mov	sp, r7
 8004abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40008000 	.word	0x40008000
 8004ac8:	00f42400 	.word	0x00f42400

08004acc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad8:	f003 0308 	and.w	r3, r3, #8
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00a      	beq.n	8004af6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00a      	beq.n	8004b18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00a      	beq.n	8004b3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3e:	f003 0304 	and.w	r3, r3, #4
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00a      	beq.n	8004b5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b60:	f003 0310 	and.w	r3, r3, #16
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00a      	beq.n	8004b7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b82:	f003 0320 	and.w	r3, r3, #32
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00a      	beq.n	8004ba0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d01a      	beq.n	8004be2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bca:	d10a      	bne.n	8004be2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00a      	beq.n	8004c04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	605a      	str	r2, [r3, #4]
  }
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b098      	sub	sp, #96	@ 0x60
 8004c14:	af02      	add	r7, sp, #8
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c20:	f7fc fcb0 	bl	8001584 <HAL_GetTick>
 8004c24:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0308 	and.w	r3, r3, #8
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d12e      	bne.n	8004c92 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f88c 	bl	8004d60 <UART_WaitOnFlagUntilTimeout>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d021      	beq.n	8004c92 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c56:	e853 3f00 	ldrex	r3, [r3]
 8004c5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c62:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	461a      	mov	r2, r3
 8004c6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c6e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c74:	e841 2300 	strex	r3, r2, [r1]
 8004c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1e6      	bne.n	8004c4e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2220      	movs	r2, #32
 8004c84:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e062      	b.n	8004d58 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b04      	cmp	r3, #4
 8004c9e:	d149      	bne.n	8004d34 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ca0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f856 	bl	8004d60 <UART_WaitOnFlagUntilTimeout>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d03c      	beq.n	8004d34 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc2:	e853 3f00 	ldrex	r3, [r3]
 8004cc6:	623b      	str	r3, [r7, #32]
   return(result);
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cda:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cdc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ce0:	e841 2300 	strex	r3, r2, [r1]
 8004ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1e6      	bne.n	8004cba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	3308      	adds	r3, #8
 8004cf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	e853 3f00 	ldrex	r3, [r3]
 8004cfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0301 	bic.w	r3, r3, #1
 8004d02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	3308      	adds	r3, #8
 8004d0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d0c:	61fa      	str	r2, [r7, #28]
 8004d0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d10:	69b9      	ldr	r1, [r7, #24]
 8004d12:	69fa      	ldr	r2, [r7, #28]
 8004d14:	e841 2300 	strex	r3, r2, [r1]
 8004d18:	617b      	str	r3, [r7, #20]
   return(result);
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1e5      	bne.n	8004cec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e011      	b.n	8004d58 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2220      	movs	r2, #32
 8004d38:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3758      	adds	r7, #88	@ 0x58
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	603b      	str	r3, [r7, #0]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d70:	e04f      	b.n	8004e12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d78:	d04b      	beq.n	8004e12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d7a:	f7fc fc03 	bl	8001584 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d302      	bcc.n	8004d90 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e04e      	b.n	8004e32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d037      	beq.n	8004e12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2b80      	cmp	r3, #128	@ 0x80
 8004da6:	d034      	beq.n	8004e12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	2b40      	cmp	r3, #64	@ 0x40
 8004dac:	d031      	beq.n	8004e12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	f003 0308 	and.w	r3, r3, #8
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d110      	bne.n	8004dde <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2208      	movs	r2, #8
 8004dc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 f8ff 	bl	8004fc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2208      	movs	r2, #8
 8004dce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e029      	b.n	8004e32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004de8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dec:	d111      	bne.n	8004e12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004df6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 f8e5 	bl	8004fc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e00f      	b.n	8004e32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	69da      	ldr	r2, [r3, #28]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	bf0c      	ite	eq
 8004e22:	2301      	moveq	r3, #1
 8004e24:	2300      	movne	r3, #0
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	461a      	mov	r2, r3
 8004e2a:	79fb      	ldrb	r3, [r7, #7]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d0a0      	beq.n	8004d72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
	...

08004e3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b097      	sub	sp, #92	@ 0x5c
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	4613      	mov	r3, r2
 8004e48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	88fa      	ldrh	r2, [r7, #6]
 8004e54:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	88fa      	ldrh	r2, [r7, #6]
 8004e5c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e6e:	d10e      	bne.n	8004e8e <UART_Start_Receive_IT+0x52>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d105      	bne.n	8004e84 <UART_Start_Receive_IT+0x48>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004e7e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e82:	e02d      	b.n	8004ee0 <UART_Start_Receive_IT+0xa4>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	22ff      	movs	r2, #255	@ 0xff
 8004e88:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e8c:	e028      	b.n	8004ee0 <UART_Start_Receive_IT+0xa4>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10d      	bne.n	8004eb2 <UART_Start_Receive_IT+0x76>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d104      	bne.n	8004ea8 <UART_Start_Receive_IT+0x6c>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	22ff      	movs	r2, #255	@ 0xff
 8004ea2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ea6:	e01b      	b.n	8004ee0 <UART_Start_Receive_IT+0xa4>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	227f      	movs	r2, #127	@ 0x7f
 8004eac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004eb0:	e016      	b.n	8004ee0 <UART_Start_Receive_IT+0xa4>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004eba:	d10d      	bne.n	8004ed8 <UART_Start_Receive_IT+0x9c>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d104      	bne.n	8004ece <UART_Start_Receive_IT+0x92>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	227f      	movs	r2, #127	@ 0x7f
 8004ec8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ecc:	e008      	b.n	8004ee0 <UART_Start_Receive_IT+0xa4>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	223f      	movs	r2, #63	@ 0x3f
 8004ed2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ed6:	e003      	b.n	8004ee0 <UART_Start_Receive_IT+0xa4>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2222      	movs	r2, #34	@ 0x22
 8004eec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	3308      	adds	r3, #8
 8004ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004efa:	e853 3f00 	ldrex	r3, [r3]
 8004efe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f02:	f043 0301 	orr.w	r3, r3, #1
 8004f06:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004f10:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004f12:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f14:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004f16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f18:	e841 2300 	strex	r3, r2, [r1]
 8004f1c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004f1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1e5      	bne.n	8004ef0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f2c:	d107      	bne.n	8004f3e <UART_Start_Receive_IT+0x102>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d103      	bne.n	8004f3e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4a21      	ldr	r2, [pc, #132]	@ (8004fc0 <UART_Start_Receive_IT+0x184>)
 8004f3a:	669a      	str	r2, [r3, #104]	@ 0x68
 8004f3c:	e002      	b.n	8004f44 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4a20      	ldr	r2, [pc, #128]	@ (8004fc4 <UART_Start_Receive_IT+0x188>)
 8004f42:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d019      	beq.n	8004f80 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f54:	e853 3f00 	ldrex	r3, [r3]
 8004f58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004f60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	461a      	mov	r2, r3
 8004f68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f6c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f72:	e841 2300 	strex	r3, r2, [r1]
 8004f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1e6      	bne.n	8004f4c <UART_Start_Receive_IT+0x110>
 8004f7e:	e018      	b.n	8004fb2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	e853 3f00 	ldrex	r3, [r3]
 8004f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f043 0320 	orr.w	r3, r3, #32
 8004f94:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f9e:	623b      	str	r3, [r7, #32]
 8004fa0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa2:	69f9      	ldr	r1, [r7, #28]
 8004fa4:	6a3a      	ldr	r2, [r7, #32]
 8004fa6:	e841 2300 	strex	r3, r2, [r1]
 8004faa:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1e6      	bne.n	8004f80 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	375c      	adds	r7, #92	@ 0x5c
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	080052cd 	.word	0x080052cd
 8004fc4:	08005111 	.word	0x08005111

08004fc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b095      	sub	sp, #84	@ 0x54
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fd8:	e853 3f00 	ldrex	r3, [r3]
 8004fdc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fe4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fee:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ff0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ff4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ff6:	e841 2300 	strex	r3, r2, [r1]
 8004ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1e6      	bne.n	8004fd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	3308      	adds	r3, #8
 8005008:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	e853 3f00 	ldrex	r3, [r3]
 8005010:	61fb      	str	r3, [r7, #28]
   return(result);
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	f023 0301 	bic.w	r3, r3, #1
 8005018:	64bb      	str	r3, [r7, #72]	@ 0x48
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3308      	adds	r3, #8
 8005020:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005022:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005024:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005026:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005028:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800502a:	e841 2300 	strex	r3, r2, [r1]
 800502e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1e5      	bne.n	8005002 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800503a:	2b01      	cmp	r3, #1
 800503c:	d118      	bne.n	8005070 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	e853 3f00 	ldrex	r3, [r3]
 800504a:	60bb      	str	r3, [r7, #8]
   return(result);
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f023 0310 	bic.w	r3, r3, #16
 8005052:	647b      	str	r3, [r7, #68]	@ 0x44
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	461a      	mov	r2, r3
 800505a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800505c:	61bb      	str	r3, [r7, #24]
 800505e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005060:	6979      	ldr	r1, [r7, #20]
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	e841 2300 	strex	r3, r2, [r1]
 8005068:	613b      	str	r3, [r7, #16]
   return(result);
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1e6      	bne.n	800503e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2220      	movs	r2, #32
 8005074:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005084:	bf00      	nop
 8005086:	3754      	adds	r7, #84	@ 0x54
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f7ff fa3e 	bl	8004530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050b4:	bf00      	nop
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b088      	sub	sp, #32
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	e853 3f00 	ldrex	r3, [r3]
 80050d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050d8:	61fb      	str	r3, [r7, #28]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	461a      	mov	r2, r3
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	61bb      	str	r3, [r7, #24]
 80050e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e6:	6979      	ldr	r1, [r7, #20]
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	e841 2300 	strex	r3, r2, [r1]
 80050ee:	613b      	str	r3, [r7, #16]
   return(result);
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1e6      	bne.n	80050c4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2220      	movs	r2, #32
 80050fa:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7ff fa0a 	bl	800451c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005108:	bf00      	nop
 800510a:	3720      	adds	r7, #32
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b09c      	sub	sp, #112	@ 0x70
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800511e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005128:	2b22      	cmp	r3, #34	@ 0x22
 800512a:	f040 80be 	bne.w	80052aa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005134:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005138:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800513c:	b2d9      	uxtb	r1, r3
 800513e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005142:	b2da      	uxtb	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005148:	400a      	ands	r2, r1
 800514a:	b2d2      	uxtb	r2, r2
 800514c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005152:	1c5a      	adds	r2, r3, #1
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800515e:	b29b      	uxth	r3, r3
 8005160:	3b01      	subs	r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005170:	b29b      	uxth	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	f040 80a3 	bne.w	80052be <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005180:	e853 3f00 	ldrex	r3, [r3]
 8005184:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005186:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005188:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800518c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	461a      	mov	r2, r3
 8005194:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005196:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005198:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800519c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800519e:	e841 2300 	strex	r3, r2, [r1]
 80051a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80051a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1e6      	bne.n	8005178 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	3308      	adds	r3, #8
 80051b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b4:	e853 3f00 	ldrex	r3, [r3]
 80051b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051bc:	f023 0301 	bic.w	r3, r3, #1
 80051c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	3308      	adds	r3, #8
 80051c8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80051ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80051cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051d2:	e841 2300 	strex	r3, r2, [r1]
 80051d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1e5      	bne.n	80051aa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a34      	ldr	r2, [pc, #208]	@ (80052c8 <UART_RxISR_8BIT+0x1b8>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d01f      	beq.n	800523c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d018      	beq.n	800523c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005212:	e853 3f00 	ldrex	r3, [r3]
 8005216:	623b      	str	r3, [r7, #32]
   return(result);
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800521e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	461a      	mov	r2, r3
 8005226:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005228:	633b      	str	r3, [r7, #48]	@ 0x30
 800522a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800522e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005230:	e841 2300 	strex	r3, r2, [r1]
 8005234:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1e6      	bne.n	800520a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005240:	2b01      	cmp	r3, #1
 8005242:	d12e      	bne.n	80052a2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	e853 3f00 	ldrex	r3, [r3]
 8005256:	60fb      	str	r3, [r7, #12]
   return(result);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f023 0310 	bic.w	r3, r3, #16
 800525e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	461a      	mov	r2, r3
 8005266:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005268:	61fb      	str	r3, [r7, #28]
 800526a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526c:	69b9      	ldr	r1, [r7, #24]
 800526e:	69fa      	ldr	r2, [r7, #28]
 8005270:	e841 2300 	strex	r3, r2, [r1]
 8005274:	617b      	str	r3, [r7, #20]
   return(result);
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1e6      	bne.n	800524a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	f003 0310 	and.w	r3, r3, #16
 8005286:	2b10      	cmp	r3, #16
 8005288:	d103      	bne.n	8005292 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2210      	movs	r2, #16
 8005290:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005298:	4619      	mov	r1, r3
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f7ff f952 	bl	8004544 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052a0:	e00d      	b.n	80052be <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7fb fa6a 	bl	800077c <HAL_UART_RxCpltCallback>
}
 80052a8:	e009      	b.n	80052be <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	8b1b      	ldrh	r3, [r3, #24]
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0208 	orr.w	r2, r2, #8
 80052ba:	b292      	uxth	r2, r2
 80052bc:	831a      	strh	r2, [r3, #24]
}
 80052be:	bf00      	nop
 80052c0:	3770      	adds	r7, #112	@ 0x70
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	40008000 	.word	0x40008000

080052cc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b09c      	sub	sp, #112	@ 0x70
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80052da:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052e4:	2b22      	cmp	r3, #34	@ 0x22
 80052e6:	f040 80be 	bne.w	8005466 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80052f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052f8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80052fa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80052fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005302:	4013      	ands	r3, r2
 8005304:	b29a      	uxth	r2, r3
 8005306:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005308:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800530e:	1c9a      	adds	r2, r3, #2
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800531a:	b29b      	uxth	r3, r3
 800531c:	3b01      	subs	r3, #1
 800531e:	b29a      	uxth	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800532c:	b29b      	uxth	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	f040 80a3 	bne.w	800547a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800533c:	e853 3f00 	ldrex	r3, [r3]
 8005340:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005342:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005344:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005348:	667b      	str	r3, [r7, #100]	@ 0x64
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	461a      	mov	r2, r3
 8005350:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005352:	657b      	str	r3, [r7, #84]	@ 0x54
 8005354:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005356:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005358:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800535a:	e841 2300 	strex	r3, r2, [r1]
 800535e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005360:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1e6      	bne.n	8005334 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	3308      	adds	r3, #8
 800536c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005370:	e853 3f00 	ldrex	r3, [r3]
 8005374:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005378:	f023 0301 	bic.w	r3, r3, #1
 800537c:	663b      	str	r3, [r7, #96]	@ 0x60
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	3308      	adds	r3, #8
 8005384:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005386:	643a      	str	r2, [r7, #64]	@ 0x40
 8005388:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800538c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800538e:	e841 2300 	strex	r3, r2, [r1]
 8005392:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1e5      	bne.n	8005366 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2220      	movs	r2, #32
 800539e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a34      	ldr	r2, [pc, #208]	@ (8005484 <UART_RxISR_16BIT+0x1b8>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d01f      	beq.n	80053f8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d018      	beq.n	80053f8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	e853 3f00 	ldrex	r3, [r3]
 80053d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80053da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	461a      	mov	r2, r3
 80053e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053e6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053ec:	e841 2300 	strex	r3, r2, [r1]
 80053f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1e6      	bne.n	80053c6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d12e      	bne.n	800545e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	e853 3f00 	ldrex	r3, [r3]
 8005412:	60bb      	str	r3, [r7, #8]
   return(result);
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f023 0310 	bic.w	r3, r3, #16
 800541a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	461a      	mov	r2, r3
 8005422:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005424:	61bb      	str	r3, [r7, #24]
 8005426:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005428:	6979      	ldr	r1, [r7, #20]
 800542a:	69ba      	ldr	r2, [r7, #24]
 800542c:	e841 2300 	strex	r3, r2, [r1]
 8005430:	613b      	str	r3, [r7, #16]
   return(result);
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1e6      	bne.n	8005406 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	f003 0310 	and.w	r3, r3, #16
 8005442:	2b10      	cmp	r3, #16
 8005444:	d103      	bne.n	800544e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2210      	movs	r2, #16
 800544c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005454:	4619      	mov	r1, r3
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7ff f874 	bl	8004544 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800545c:	e00d      	b.n	800547a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7fb f98c 	bl	800077c <HAL_UART_RxCpltCallback>
}
 8005464:	e009      	b.n	800547a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	8b1b      	ldrh	r3, [r3, #24]
 800546c:	b29a      	uxth	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f042 0208 	orr.w	r2, r2, #8
 8005476:	b292      	uxth	r2, r2
 8005478:	831a      	strh	r2, [r3, #24]
}
 800547a:	bf00      	nop
 800547c:	3770      	adds	r7, #112	@ 0x70
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	40008000 	.word	0x40008000

08005488 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800549c:	b480      	push	{r7}
 800549e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80054a0:	bf00      	nop
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
	...

080054ac <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b086      	sub	sp, #24
 80054b0:	af04      	add	r7, sp, #16
 80054b2:	4603      	mov	r3, r0
 80054b4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80054b6:	f04f 33ff 	mov.w	r3, #4294967295
 80054ba:	9302      	str	r3, [sp, #8]
 80054bc:	2301      	movs	r3, #1
 80054be:	9301      	str	r3, [sp, #4]
 80054c0:	1dfb      	adds	r3, r7, #7
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	2301      	movs	r3, #1
 80054c6:	2200      	movs	r2, #0
 80054c8:	2178      	movs	r1, #120	@ 0x78
 80054ca:	4803      	ldr	r0, [pc, #12]	@ (80054d8 <ssd1306_WriteCommand+0x2c>)
 80054cc:	f7fc fcc2 	bl	8001e54 <HAL_I2C_Mem_Write>
}
 80054d0:	bf00      	nop
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	200000c0 	.word	0x200000c0

080054dc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af04      	add	r7, sp, #16
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	f04f 32ff 	mov.w	r2, #4294967295
 80054ee:	9202      	str	r2, [sp, #8]
 80054f0:	9301      	str	r3, [sp, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	2301      	movs	r3, #1
 80054f8:	2240      	movs	r2, #64	@ 0x40
 80054fa:	2178      	movs	r1, #120	@ 0x78
 80054fc:	4803      	ldr	r0, [pc, #12]	@ (800550c <ssd1306_WriteData+0x30>)
 80054fe:	f7fc fca9 	bl	8001e54 <HAL_I2C_Mem_Write>
}
 8005502:	bf00      	nop
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	200000c0 	.word	0x200000c0

08005510 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8005514:	f7ff ffc2 	bl	800549c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8005518:	2064      	movs	r0, #100	@ 0x64
 800551a:	f7fc f83f 	bl	800159c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800551e:	2000      	movs	r0, #0
 8005520:	f000 f9d6 	bl	80058d0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8005524:	2020      	movs	r0, #32
 8005526:	f7ff ffc1 	bl	80054ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800552a:	2000      	movs	r0, #0
 800552c:	f7ff ffbe 	bl	80054ac <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005530:	20b0      	movs	r0, #176	@ 0xb0
 8005532:	f7ff ffbb 	bl	80054ac <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8005536:	20c8      	movs	r0, #200	@ 0xc8
 8005538:	f7ff ffb8 	bl	80054ac <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800553c:	2000      	movs	r0, #0
 800553e:	f7ff ffb5 	bl	80054ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8005542:	2010      	movs	r0, #16
 8005544:	f7ff ffb2 	bl	80054ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8005548:	2040      	movs	r0, #64	@ 0x40
 800554a:	f7ff ffaf 	bl	80054ac <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800554e:	20ff      	movs	r0, #255	@ 0xff
 8005550:	f000 f9aa 	bl	80058a8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8005554:	20a1      	movs	r0, #161	@ 0xa1
 8005556:	f7ff ffa9 	bl	80054ac <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800555a:	20a6      	movs	r0, #166	@ 0xa6
 800555c:	f7ff ffa6 	bl	80054ac <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8005560:	20a8      	movs	r0, #168	@ 0xa8
 8005562:	f7ff ffa3 	bl	80054ac <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8005566:	203f      	movs	r0, #63	@ 0x3f
 8005568:	f7ff ffa0 	bl	80054ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800556c:	20a4      	movs	r0, #164	@ 0xa4
 800556e:	f7ff ff9d 	bl	80054ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8005572:	20d3      	movs	r0, #211	@ 0xd3
 8005574:	f7ff ff9a 	bl	80054ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8005578:	2000      	movs	r0, #0
 800557a:	f7ff ff97 	bl	80054ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800557e:	20d5      	movs	r0, #213	@ 0xd5
 8005580:	f7ff ff94 	bl	80054ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8005584:	20f0      	movs	r0, #240	@ 0xf0
 8005586:	f7ff ff91 	bl	80054ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800558a:	20d9      	movs	r0, #217	@ 0xd9
 800558c:	f7ff ff8e 	bl	80054ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8005590:	2022      	movs	r0, #34	@ 0x22
 8005592:	f7ff ff8b 	bl	80054ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8005596:	20da      	movs	r0, #218	@ 0xda
 8005598:	f7ff ff88 	bl	80054ac <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800559c:	2012      	movs	r0, #18
 800559e:	f7ff ff85 	bl	80054ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80055a2:	20db      	movs	r0, #219	@ 0xdb
 80055a4:	f7ff ff82 	bl	80054ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80055a8:	2020      	movs	r0, #32
 80055aa:	f7ff ff7f 	bl	80054ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80055ae:	208d      	movs	r0, #141	@ 0x8d
 80055b0:	f7ff ff7c 	bl	80054ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80055b4:	2014      	movs	r0, #20
 80055b6:	f7ff ff79 	bl	80054ac <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80055ba:	2001      	movs	r0, #1
 80055bc:	f000 f988 	bl	80058d0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80055c0:	2000      	movs	r0, #0
 80055c2:	f000 f80f 	bl	80055e4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80055c6:	f000 f825 	bl	8005614 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80055ca:	4b05      	ldr	r3, [pc, #20]	@ (80055e0 <ssd1306_Init+0xd0>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80055d0:	4b03      	ldr	r3, [pc, #12]	@ (80055e0 <ssd1306_Init+0xd0>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80055d6:	4b02      	ldr	r3, [pc, #8]	@ (80055e0 <ssd1306_Init+0xd0>)
 80055d8:	2201      	movs	r2, #1
 80055da:	711a      	strb	r2, [r3, #4]
}
 80055dc:	bf00      	nop
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	200005cc 	.word	0x200005cc

080055e4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	4603      	mov	r3, r0
 80055ec:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80055ee:	79fb      	ldrb	r3, [r7, #7]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <ssd1306_Fill+0x14>
 80055f4:	2300      	movs	r3, #0
 80055f6:	e000      	b.n	80055fa <ssd1306_Fill+0x16>
 80055f8:	23ff      	movs	r3, #255	@ 0xff
 80055fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80055fe:	4619      	mov	r1, r3
 8005600:	4803      	ldr	r0, [pc, #12]	@ (8005610 <ssd1306_Fill+0x2c>)
 8005602:	f000 fbc7 	bl	8005d94 <memset>
}
 8005606:	bf00      	nop
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	200001cc 	.word	0x200001cc

08005614 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800561a:	2300      	movs	r3, #0
 800561c:	71fb      	strb	r3, [r7, #7]
 800561e:	e016      	b.n	800564e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8005620:	79fb      	ldrb	r3, [r7, #7]
 8005622:	3b50      	subs	r3, #80	@ 0x50
 8005624:	b2db      	uxtb	r3, r3
 8005626:	4618      	mov	r0, r3
 8005628:	f7ff ff40 	bl	80054ac <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800562c:	2000      	movs	r0, #0
 800562e:	f7ff ff3d 	bl	80054ac <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8005632:	2010      	movs	r0, #16
 8005634:	f7ff ff3a 	bl	80054ac <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8005638:	79fb      	ldrb	r3, [r7, #7]
 800563a:	01db      	lsls	r3, r3, #7
 800563c:	4a08      	ldr	r2, [pc, #32]	@ (8005660 <ssd1306_UpdateScreen+0x4c>)
 800563e:	4413      	add	r3, r2
 8005640:	2180      	movs	r1, #128	@ 0x80
 8005642:	4618      	mov	r0, r3
 8005644:	f7ff ff4a 	bl	80054dc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005648:	79fb      	ldrb	r3, [r7, #7]
 800564a:	3301      	adds	r3, #1
 800564c:	71fb      	strb	r3, [r7, #7]
 800564e:	79fb      	ldrb	r3, [r7, #7]
 8005650:	2b07      	cmp	r3, #7
 8005652:	d9e5      	bls.n	8005620 <ssd1306_UpdateScreen+0xc>
    }
}
 8005654:	bf00      	nop
 8005656:	bf00      	nop
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	200001cc 	.word	0x200001cc

08005664 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	4603      	mov	r3, r0
 800566c:	71fb      	strb	r3, [r7, #7]
 800566e:	460b      	mov	r3, r1
 8005670:	71bb      	strb	r3, [r7, #6]
 8005672:	4613      	mov	r3, r2
 8005674:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8005676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800567a:	2b00      	cmp	r3, #0
 800567c:	db3d      	blt.n	80056fa <ssd1306_DrawPixel+0x96>
 800567e:	79bb      	ldrb	r3, [r7, #6]
 8005680:	2b3f      	cmp	r3, #63	@ 0x3f
 8005682:	d83a      	bhi.n	80056fa <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8005684:	797b      	ldrb	r3, [r7, #5]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d11a      	bne.n	80056c0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800568a:	79fa      	ldrb	r2, [r7, #7]
 800568c:	79bb      	ldrb	r3, [r7, #6]
 800568e:	08db      	lsrs	r3, r3, #3
 8005690:	b2d8      	uxtb	r0, r3
 8005692:	4603      	mov	r3, r0
 8005694:	01db      	lsls	r3, r3, #7
 8005696:	4413      	add	r3, r2
 8005698:	4a1b      	ldr	r2, [pc, #108]	@ (8005708 <ssd1306_DrawPixel+0xa4>)
 800569a:	5cd3      	ldrb	r3, [r2, r3]
 800569c:	b25a      	sxtb	r2, r3
 800569e:	79bb      	ldrb	r3, [r7, #6]
 80056a0:	f003 0307 	and.w	r3, r3, #7
 80056a4:	2101      	movs	r1, #1
 80056a6:	fa01 f303 	lsl.w	r3, r1, r3
 80056aa:	b25b      	sxtb	r3, r3
 80056ac:	4313      	orrs	r3, r2
 80056ae:	b259      	sxtb	r1, r3
 80056b0:	79fa      	ldrb	r2, [r7, #7]
 80056b2:	4603      	mov	r3, r0
 80056b4:	01db      	lsls	r3, r3, #7
 80056b6:	4413      	add	r3, r2
 80056b8:	b2c9      	uxtb	r1, r1
 80056ba:	4a13      	ldr	r2, [pc, #76]	@ (8005708 <ssd1306_DrawPixel+0xa4>)
 80056bc:	54d1      	strb	r1, [r2, r3]
 80056be:	e01d      	b.n	80056fc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80056c0:	79fa      	ldrb	r2, [r7, #7]
 80056c2:	79bb      	ldrb	r3, [r7, #6]
 80056c4:	08db      	lsrs	r3, r3, #3
 80056c6:	b2d8      	uxtb	r0, r3
 80056c8:	4603      	mov	r3, r0
 80056ca:	01db      	lsls	r3, r3, #7
 80056cc:	4413      	add	r3, r2
 80056ce:	4a0e      	ldr	r2, [pc, #56]	@ (8005708 <ssd1306_DrawPixel+0xa4>)
 80056d0:	5cd3      	ldrb	r3, [r2, r3]
 80056d2:	b25a      	sxtb	r2, r3
 80056d4:	79bb      	ldrb	r3, [r7, #6]
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	2101      	movs	r1, #1
 80056dc:	fa01 f303 	lsl.w	r3, r1, r3
 80056e0:	b25b      	sxtb	r3, r3
 80056e2:	43db      	mvns	r3, r3
 80056e4:	b25b      	sxtb	r3, r3
 80056e6:	4013      	ands	r3, r2
 80056e8:	b259      	sxtb	r1, r3
 80056ea:	79fa      	ldrb	r2, [r7, #7]
 80056ec:	4603      	mov	r3, r0
 80056ee:	01db      	lsls	r3, r3, #7
 80056f0:	4413      	add	r3, r2
 80056f2:	b2c9      	uxtb	r1, r1
 80056f4:	4a04      	ldr	r2, [pc, #16]	@ (8005708 <ssd1306_DrawPixel+0xa4>)
 80056f6:	54d1      	strb	r1, [r2, r3]
 80056f8:	e000      	b.n	80056fc <ssd1306_DrawPixel+0x98>
        return;
 80056fa:	bf00      	nop
    }
}
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	200001cc 	.word	0x200001cc

0800570c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800570c:	b590      	push	{r4, r7, lr}
 800570e:	b089      	sub	sp, #36	@ 0x24
 8005710:	af00      	add	r7, sp, #0
 8005712:	4604      	mov	r4, r0
 8005714:	4638      	mov	r0, r7
 8005716:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800571a:	4623      	mov	r3, r4
 800571c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800571e:	7bfb      	ldrb	r3, [r7, #15]
 8005720:	2b1f      	cmp	r3, #31
 8005722:	d902      	bls.n	800572a <ssd1306_WriteChar+0x1e>
 8005724:	7bfb      	ldrb	r3, [r7, #15]
 8005726:	2b7e      	cmp	r3, #126	@ 0x7e
 8005728:	d901      	bls.n	800572e <ssd1306_WriteChar+0x22>
        return 0;
 800572a:	2300      	movs	r3, #0
 800572c:	e077      	b.n	800581e <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800572e:	4b3e      	ldr	r3, [pc, #248]	@ (8005828 <ssd1306_WriteChar+0x11c>)
 8005730:	881b      	ldrh	r3, [r3, #0]
 8005732:	461a      	mov	r2, r3
 8005734:	783b      	ldrb	r3, [r7, #0]
 8005736:	4413      	add	r3, r2
 8005738:	2b80      	cmp	r3, #128	@ 0x80
 800573a:	dc06      	bgt.n	800574a <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800573c:	4b3a      	ldr	r3, [pc, #232]	@ (8005828 <ssd1306_WriteChar+0x11c>)
 800573e:	885b      	ldrh	r3, [r3, #2]
 8005740:	461a      	mov	r2, r3
 8005742:	787b      	ldrb	r3, [r7, #1]
 8005744:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8005746:	2b40      	cmp	r3, #64	@ 0x40
 8005748:	dd01      	ble.n	800574e <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 800574a:	2300      	movs	r3, #0
 800574c:	e067      	b.n	800581e <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800574e:	2300      	movs	r3, #0
 8005750:	61fb      	str	r3, [r7, #28]
 8005752:	e04e      	b.n	80057f2 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	7bfb      	ldrb	r3, [r7, #15]
 8005758:	3b20      	subs	r3, #32
 800575a:	7879      	ldrb	r1, [r7, #1]
 800575c:	fb01 f303 	mul.w	r3, r1, r3
 8005760:	4619      	mov	r1, r3
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	440b      	add	r3, r1
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	4413      	add	r3, r2
 800576a:	881b      	ldrh	r3, [r3, #0]
 800576c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800576e:	2300      	movs	r3, #0
 8005770:	61bb      	str	r3, [r7, #24]
 8005772:	e036      	b.n	80057e2 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	fa02 f303 	lsl.w	r3, r2, r3
 800577c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d013      	beq.n	80057ac <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005784:	4b28      	ldr	r3, [pc, #160]	@ (8005828 <ssd1306_WriteChar+0x11c>)
 8005786:	881b      	ldrh	r3, [r3, #0]
 8005788:	b2da      	uxtb	r2, r3
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	b2db      	uxtb	r3, r3
 800578e:	4413      	add	r3, r2
 8005790:	b2d8      	uxtb	r0, r3
 8005792:	4b25      	ldr	r3, [pc, #148]	@ (8005828 <ssd1306_WriteChar+0x11c>)
 8005794:	885b      	ldrh	r3, [r3, #2]
 8005796:	b2da      	uxtb	r2, r3
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	b2db      	uxtb	r3, r3
 800579c:	4413      	add	r3, r2
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80057a4:	4619      	mov	r1, r3
 80057a6:	f7ff ff5d 	bl	8005664 <ssd1306_DrawPixel>
 80057aa:	e017      	b.n	80057dc <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80057ac:	4b1e      	ldr	r3, [pc, #120]	@ (8005828 <ssd1306_WriteChar+0x11c>)
 80057ae:	881b      	ldrh	r3, [r3, #0]
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	4413      	add	r3, r2
 80057b8:	b2d8      	uxtb	r0, r3
 80057ba:	4b1b      	ldr	r3, [pc, #108]	@ (8005828 <ssd1306_WriteChar+0x11c>)
 80057bc:	885b      	ldrh	r3, [r3, #2]
 80057be:	b2da      	uxtb	r2, r3
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	4413      	add	r3, r2
 80057c6:	b2d9      	uxtb	r1, r3
 80057c8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	bf0c      	ite	eq
 80057d0:	2301      	moveq	r3, #1
 80057d2:	2300      	movne	r3, #0
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	461a      	mov	r2, r3
 80057d8:	f7ff ff44 	bl	8005664 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	3301      	adds	r3, #1
 80057e0:	61bb      	str	r3, [r7, #24]
 80057e2:	783b      	ldrb	r3, [r7, #0]
 80057e4:	461a      	mov	r2, r3
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d3c3      	bcc.n	8005774 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	3301      	adds	r3, #1
 80057f0:	61fb      	str	r3, [r7, #28]
 80057f2:	787b      	ldrb	r3, [r7, #1]
 80057f4:	461a      	mov	r2, r3
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d3ab      	bcc.n	8005754 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80057fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005828 <ssd1306_WriteChar+0x11c>)
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	2a00      	cmp	r2, #0
 8005804:	d005      	beq.n	8005812 <ssd1306_WriteChar+0x106>
 8005806:	68b9      	ldr	r1, [r7, #8]
 8005808:	7bfa      	ldrb	r2, [r7, #15]
 800580a:	3a20      	subs	r2, #32
 800580c:	440a      	add	r2, r1
 800580e:	7812      	ldrb	r2, [r2, #0]
 8005810:	e000      	b.n	8005814 <ssd1306_WriteChar+0x108>
 8005812:	783a      	ldrb	r2, [r7, #0]
 8005814:	4413      	add	r3, r2
 8005816:	b29a      	uxth	r2, r3
 8005818:	4b03      	ldr	r3, [pc, #12]	@ (8005828 <ssd1306_WriteChar+0x11c>)
 800581a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800581c:	7bfb      	ldrb	r3, [r7, #15]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3724      	adds	r7, #36	@ 0x24
 8005822:	46bd      	mov	sp, r7
 8005824:	bd90      	pop	{r4, r7, pc}
 8005826:	bf00      	nop
 8005828:	200005cc 	.word	0x200005cc

0800582c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af02      	add	r7, sp, #8
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	4638      	mov	r0, r7
 8005836:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800583a:	e013      	b.n	8005864 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	7818      	ldrb	r0, [r3, #0]
 8005840:	7e3b      	ldrb	r3, [r7, #24]
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	463b      	mov	r3, r7
 8005846:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005848:	f7ff ff60 	bl	800570c <ssd1306_WriteChar>
 800584c:	4603      	mov	r3, r0
 800584e:	461a      	mov	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	429a      	cmp	r2, r3
 8005856:	d002      	beq.n	800585e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	e008      	b.n	8005870 <ssd1306_WriteString+0x44>
        }
        str++;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	3301      	adds	r3, #1
 8005862:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1e7      	bne.n	800583c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	781b      	ldrb	r3, [r3, #0]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	4603      	mov	r3, r0
 8005880:	460a      	mov	r2, r1
 8005882:	71fb      	strb	r3, [r7, #7]
 8005884:	4613      	mov	r3, r2
 8005886:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8005888:	79fb      	ldrb	r3, [r7, #7]
 800588a:	b29a      	uxth	r2, r3
 800588c:	4b05      	ldr	r3, [pc, #20]	@ (80058a4 <ssd1306_SetCursor+0x2c>)
 800588e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8005890:	79bb      	ldrb	r3, [r7, #6]
 8005892:	b29a      	uxth	r2, r3
 8005894:	4b03      	ldr	r3, [pc, #12]	@ (80058a4 <ssd1306_SetCursor+0x2c>)
 8005896:	805a      	strh	r2, [r3, #2]
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	200005cc 	.word	0x200005cc

080058a8 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	4603      	mov	r3, r0
 80058b0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80058b2:	2381      	movs	r3, #129	@ 0x81
 80058b4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80058b6:	7bfb      	ldrb	r3, [r7, #15]
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7ff fdf7 	bl	80054ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80058be:	79fb      	ldrb	r3, [r7, #7]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7ff fdf3 	bl	80054ac <ssd1306_WriteCommand>
}
 80058c6:	bf00      	nop
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
	...

080058d0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	4603      	mov	r3, r0
 80058d8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80058da:	79fb      	ldrb	r3, [r7, #7]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d005      	beq.n	80058ec <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80058e0:	23af      	movs	r3, #175	@ 0xaf
 80058e2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80058e4:	4b08      	ldr	r3, [pc, #32]	@ (8005908 <ssd1306_SetDisplayOn+0x38>)
 80058e6:	2201      	movs	r2, #1
 80058e8:	715a      	strb	r2, [r3, #5]
 80058ea:	e004      	b.n	80058f6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80058ec:	23ae      	movs	r3, #174	@ 0xae
 80058ee:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80058f0:	4b05      	ldr	r3, [pc, #20]	@ (8005908 <ssd1306_SetDisplayOn+0x38>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7ff fdd7 	bl	80054ac <ssd1306_WriteCommand>
}
 80058fe:	bf00      	nop
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	200005cc 	.word	0x200005cc

0800590c <std>:
 800590c:	2300      	movs	r3, #0
 800590e:	b510      	push	{r4, lr}
 8005910:	4604      	mov	r4, r0
 8005912:	e9c0 3300 	strd	r3, r3, [r0]
 8005916:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800591a:	6083      	str	r3, [r0, #8]
 800591c:	8181      	strh	r1, [r0, #12]
 800591e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005920:	81c2      	strh	r2, [r0, #14]
 8005922:	6183      	str	r3, [r0, #24]
 8005924:	4619      	mov	r1, r3
 8005926:	2208      	movs	r2, #8
 8005928:	305c      	adds	r0, #92	@ 0x5c
 800592a:	f000 fa33 	bl	8005d94 <memset>
 800592e:	4b0d      	ldr	r3, [pc, #52]	@ (8005964 <std+0x58>)
 8005930:	6263      	str	r3, [r4, #36]	@ 0x24
 8005932:	4b0d      	ldr	r3, [pc, #52]	@ (8005968 <std+0x5c>)
 8005934:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005936:	4b0d      	ldr	r3, [pc, #52]	@ (800596c <std+0x60>)
 8005938:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800593a:	4b0d      	ldr	r3, [pc, #52]	@ (8005970 <std+0x64>)
 800593c:	6323      	str	r3, [r4, #48]	@ 0x30
 800593e:	4b0d      	ldr	r3, [pc, #52]	@ (8005974 <std+0x68>)
 8005940:	6224      	str	r4, [r4, #32]
 8005942:	429c      	cmp	r4, r3
 8005944:	d006      	beq.n	8005954 <std+0x48>
 8005946:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800594a:	4294      	cmp	r4, r2
 800594c:	d002      	beq.n	8005954 <std+0x48>
 800594e:	33d0      	adds	r3, #208	@ 0xd0
 8005950:	429c      	cmp	r4, r3
 8005952:	d105      	bne.n	8005960 <std+0x54>
 8005954:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800595c:	f000 ba92 	b.w	8005e84 <__retarget_lock_init_recursive>
 8005960:	bd10      	pop	{r4, pc}
 8005962:	bf00      	nop
 8005964:	08005bb1 	.word	0x08005bb1
 8005968:	08005bd3 	.word	0x08005bd3
 800596c:	08005c0b 	.word	0x08005c0b
 8005970:	08005c2f 	.word	0x08005c2f
 8005974:	200005d4 	.word	0x200005d4

08005978 <stdio_exit_handler>:
 8005978:	4a02      	ldr	r2, [pc, #8]	@ (8005984 <stdio_exit_handler+0xc>)
 800597a:	4903      	ldr	r1, [pc, #12]	@ (8005988 <stdio_exit_handler+0x10>)
 800597c:	4803      	ldr	r0, [pc, #12]	@ (800598c <stdio_exit_handler+0x14>)
 800597e:	f000 b869 	b.w	8005a54 <_fwalk_sglue>
 8005982:	bf00      	nop
 8005984:	20000044 	.word	0x20000044
 8005988:	080069f1 	.word	0x080069f1
 800598c:	20000054 	.word	0x20000054

08005990 <cleanup_stdio>:
 8005990:	6841      	ldr	r1, [r0, #4]
 8005992:	4b0c      	ldr	r3, [pc, #48]	@ (80059c4 <cleanup_stdio+0x34>)
 8005994:	4299      	cmp	r1, r3
 8005996:	b510      	push	{r4, lr}
 8005998:	4604      	mov	r4, r0
 800599a:	d001      	beq.n	80059a0 <cleanup_stdio+0x10>
 800599c:	f001 f828 	bl	80069f0 <_fflush_r>
 80059a0:	68a1      	ldr	r1, [r4, #8]
 80059a2:	4b09      	ldr	r3, [pc, #36]	@ (80059c8 <cleanup_stdio+0x38>)
 80059a4:	4299      	cmp	r1, r3
 80059a6:	d002      	beq.n	80059ae <cleanup_stdio+0x1e>
 80059a8:	4620      	mov	r0, r4
 80059aa:	f001 f821 	bl	80069f0 <_fflush_r>
 80059ae:	68e1      	ldr	r1, [r4, #12]
 80059b0:	4b06      	ldr	r3, [pc, #24]	@ (80059cc <cleanup_stdio+0x3c>)
 80059b2:	4299      	cmp	r1, r3
 80059b4:	d004      	beq.n	80059c0 <cleanup_stdio+0x30>
 80059b6:	4620      	mov	r0, r4
 80059b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059bc:	f001 b818 	b.w	80069f0 <_fflush_r>
 80059c0:	bd10      	pop	{r4, pc}
 80059c2:	bf00      	nop
 80059c4:	200005d4 	.word	0x200005d4
 80059c8:	2000063c 	.word	0x2000063c
 80059cc:	200006a4 	.word	0x200006a4

080059d0 <global_stdio_init.part.0>:
 80059d0:	b510      	push	{r4, lr}
 80059d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005a00 <global_stdio_init.part.0+0x30>)
 80059d4:	4c0b      	ldr	r4, [pc, #44]	@ (8005a04 <global_stdio_init.part.0+0x34>)
 80059d6:	4a0c      	ldr	r2, [pc, #48]	@ (8005a08 <global_stdio_init.part.0+0x38>)
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	4620      	mov	r0, r4
 80059dc:	2200      	movs	r2, #0
 80059de:	2104      	movs	r1, #4
 80059e0:	f7ff ff94 	bl	800590c <std>
 80059e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80059e8:	2201      	movs	r2, #1
 80059ea:	2109      	movs	r1, #9
 80059ec:	f7ff ff8e 	bl	800590c <std>
 80059f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80059f4:	2202      	movs	r2, #2
 80059f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059fa:	2112      	movs	r1, #18
 80059fc:	f7ff bf86 	b.w	800590c <std>
 8005a00:	2000070c 	.word	0x2000070c
 8005a04:	200005d4 	.word	0x200005d4
 8005a08:	08005979 	.word	0x08005979

08005a0c <__sfp_lock_acquire>:
 8005a0c:	4801      	ldr	r0, [pc, #4]	@ (8005a14 <__sfp_lock_acquire+0x8>)
 8005a0e:	f000 ba3a 	b.w	8005e86 <__retarget_lock_acquire_recursive>
 8005a12:	bf00      	nop
 8005a14:	20000715 	.word	0x20000715

08005a18 <__sfp_lock_release>:
 8005a18:	4801      	ldr	r0, [pc, #4]	@ (8005a20 <__sfp_lock_release+0x8>)
 8005a1a:	f000 ba35 	b.w	8005e88 <__retarget_lock_release_recursive>
 8005a1e:	bf00      	nop
 8005a20:	20000715 	.word	0x20000715

08005a24 <__sinit>:
 8005a24:	b510      	push	{r4, lr}
 8005a26:	4604      	mov	r4, r0
 8005a28:	f7ff fff0 	bl	8005a0c <__sfp_lock_acquire>
 8005a2c:	6a23      	ldr	r3, [r4, #32]
 8005a2e:	b11b      	cbz	r3, 8005a38 <__sinit+0x14>
 8005a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a34:	f7ff bff0 	b.w	8005a18 <__sfp_lock_release>
 8005a38:	4b04      	ldr	r3, [pc, #16]	@ (8005a4c <__sinit+0x28>)
 8005a3a:	6223      	str	r3, [r4, #32]
 8005a3c:	4b04      	ldr	r3, [pc, #16]	@ (8005a50 <__sinit+0x2c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1f5      	bne.n	8005a30 <__sinit+0xc>
 8005a44:	f7ff ffc4 	bl	80059d0 <global_stdio_init.part.0>
 8005a48:	e7f2      	b.n	8005a30 <__sinit+0xc>
 8005a4a:	bf00      	nop
 8005a4c:	08005991 	.word	0x08005991
 8005a50:	2000070c 	.word	0x2000070c

08005a54 <_fwalk_sglue>:
 8005a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a58:	4607      	mov	r7, r0
 8005a5a:	4688      	mov	r8, r1
 8005a5c:	4614      	mov	r4, r2
 8005a5e:	2600      	movs	r6, #0
 8005a60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a64:	f1b9 0901 	subs.w	r9, r9, #1
 8005a68:	d505      	bpl.n	8005a76 <_fwalk_sglue+0x22>
 8005a6a:	6824      	ldr	r4, [r4, #0]
 8005a6c:	2c00      	cmp	r4, #0
 8005a6e:	d1f7      	bne.n	8005a60 <_fwalk_sglue+0xc>
 8005a70:	4630      	mov	r0, r6
 8005a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a76:	89ab      	ldrh	r3, [r5, #12]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d907      	bls.n	8005a8c <_fwalk_sglue+0x38>
 8005a7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a80:	3301      	adds	r3, #1
 8005a82:	d003      	beq.n	8005a8c <_fwalk_sglue+0x38>
 8005a84:	4629      	mov	r1, r5
 8005a86:	4638      	mov	r0, r7
 8005a88:	47c0      	blx	r8
 8005a8a:	4306      	orrs	r6, r0
 8005a8c:	3568      	adds	r5, #104	@ 0x68
 8005a8e:	e7e9      	b.n	8005a64 <_fwalk_sglue+0x10>

08005a90 <iprintf>:
 8005a90:	b40f      	push	{r0, r1, r2, r3}
 8005a92:	b507      	push	{r0, r1, r2, lr}
 8005a94:	4906      	ldr	r1, [pc, #24]	@ (8005ab0 <iprintf+0x20>)
 8005a96:	ab04      	add	r3, sp, #16
 8005a98:	6808      	ldr	r0, [r1, #0]
 8005a9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a9e:	6881      	ldr	r1, [r0, #8]
 8005aa0:	9301      	str	r3, [sp, #4]
 8005aa2:	f000 fc7b 	bl	800639c <_vfiprintf_r>
 8005aa6:	b003      	add	sp, #12
 8005aa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005aac:	b004      	add	sp, #16
 8005aae:	4770      	bx	lr
 8005ab0:	20000050 	.word	0x20000050

08005ab4 <_puts_r>:
 8005ab4:	6a03      	ldr	r3, [r0, #32]
 8005ab6:	b570      	push	{r4, r5, r6, lr}
 8005ab8:	6884      	ldr	r4, [r0, #8]
 8005aba:	4605      	mov	r5, r0
 8005abc:	460e      	mov	r6, r1
 8005abe:	b90b      	cbnz	r3, 8005ac4 <_puts_r+0x10>
 8005ac0:	f7ff ffb0 	bl	8005a24 <__sinit>
 8005ac4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ac6:	07db      	lsls	r3, r3, #31
 8005ac8:	d405      	bmi.n	8005ad6 <_puts_r+0x22>
 8005aca:	89a3      	ldrh	r3, [r4, #12]
 8005acc:	0598      	lsls	r0, r3, #22
 8005ace:	d402      	bmi.n	8005ad6 <_puts_r+0x22>
 8005ad0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ad2:	f000 f9d8 	bl	8005e86 <__retarget_lock_acquire_recursive>
 8005ad6:	89a3      	ldrh	r3, [r4, #12]
 8005ad8:	0719      	lsls	r1, r3, #28
 8005ada:	d502      	bpl.n	8005ae2 <_puts_r+0x2e>
 8005adc:	6923      	ldr	r3, [r4, #16]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d135      	bne.n	8005b4e <_puts_r+0x9a>
 8005ae2:	4621      	mov	r1, r4
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	f000 f8e5 	bl	8005cb4 <__swsetup_r>
 8005aea:	b380      	cbz	r0, 8005b4e <_puts_r+0x9a>
 8005aec:	f04f 35ff 	mov.w	r5, #4294967295
 8005af0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005af2:	07da      	lsls	r2, r3, #31
 8005af4:	d405      	bmi.n	8005b02 <_puts_r+0x4e>
 8005af6:	89a3      	ldrh	r3, [r4, #12]
 8005af8:	059b      	lsls	r3, r3, #22
 8005afa:	d402      	bmi.n	8005b02 <_puts_r+0x4e>
 8005afc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005afe:	f000 f9c3 	bl	8005e88 <__retarget_lock_release_recursive>
 8005b02:	4628      	mov	r0, r5
 8005b04:	bd70      	pop	{r4, r5, r6, pc}
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	da04      	bge.n	8005b14 <_puts_r+0x60>
 8005b0a:	69a2      	ldr	r2, [r4, #24]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	dc17      	bgt.n	8005b40 <_puts_r+0x8c>
 8005b10:	290a      	cmp	r1, #10
 8005b12:	d015      	beq.n	8005b40 <_puts_r+0x8c>
 8005b14:	6823      	ldr	r3, [r4, #0]
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	6022      	str	r2, [r4, #0]
 8005b1a:	7019      	strb	r1, [r3, #0]
 8005b1c:	68a3      	ldr	r3, [r4, #8]
 8005b1e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b22:	3b01      	subs	r3, #1
 8005b24:	60a3      	str	r3, [r4, #8]
 8005b26:	2900      	cmp	r1, #0
 8005b28:	d1ed      	bne.n	8005b06 <_puts_r+0x52>
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	da11      	bge.n	8005b52 <_puts_r+0x9e>
 8005b2e:	4622      	mov	r2, r4
 8005b30:	210a      	movs	r1, #10
 8005b32:	4628      	mov	r0, r5
 8005b34:	f000 f87f 	bl	8005c36 <__swbuf_r>
 8005b38:	3001      	adds	r0, #1
 8005b3a:	d0d7      	beq.n	8005aec <_puts_r+0x38>
 8005b3c:	250a      	movs	r5, #10
 8005b3e:	e7d7      	b.n	8005af0 <_puts_r+0x3c>
 8005b40:	4622      	mov	r2, r4
 8005b42:	4628      	mov	r0, r5
 8005b44:	f000 f877 	bl	8005c36 <__swbuf_r>
 8005b48:	3001      	adds	r0, #1
 8005b4a:	d1e7      	bne.n	8005b1c <_puts_r+0x68>
 8005b4c:	e7ce      	b.n	8005aec <_puts_r+0x38>
 8005b4e:	3e01      	subs	r6, #1
 8005b50:	e7e4      	b.n	8005b1c <_puts_r+0x68>
 8005b52:	6823      	ldr	r3, [r4, #0]
 8005b54:	1c5a      	adds	r2, r3, #1
 8005b56:	6022      	str	r2, [r4, #0]
 8005b58:	220a      	movs	r2, #10
 8005b5a:	701a      	strb	r2, [r3, #0]
 8005b5c:	e7ee      	b.n	8005b3c <_puts_r+0x88>
	...

08005b60 <puts>:
 8005b60:	4b02      	ldr	r3, [pc, #8]	@ (8005b6c <puts+0xc>)
 8005b62:	4601      	mov	r1, r0
 8005b64:	6818      	ldr	r0, [r3, #0]
 8005b66:	f7ff bfa5 	b.w	8005ab4 <_puts_r>
 8005b6a:	bf00      	nop
 8005b6c:	20000050 	.word	0x20000050

08005b70 <siprintf>:
 8005b70:	b40e      	push	{r1, r2, r3}
 8005b72:	b500      	push	{lr}
 8005b74:	b09c      	sub	sp, #112	@ 0x70
 8005b76:	ab1d      	add	r3, sp, #116	@ 0x74
 8005b78:	9002      	str	r0, [sp, #8]
 8005b7a:	9006      	str	r0, [sp, #24]
 8005b7c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005b80:	4809      	ldr	r0, [pc, #36]	@ (8005ba8 <siprintf+0x38>)
 8005b82:	9107      	str	r1, [sp, #28]
 8005b84:	9104      	str	r1, [sp, #16]
 8005b86:	4909      	ldr	r1, [pc, #36]	@ (8005bac <siprintf+0x3c>)
 8005b88:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b8c:	9105      	str	r1, [sp, #20]
 8005b8e:	6800      	ldr	r0, [r0, #0]
 8005b90:	9301      	str	r3, [sp, #4]
 8005b92:	a902      	add	r1, sp, #8
 8005b94:	f000 fadc 	bl	8006150 <_svfiprintf_r>
 8005b98:	9b02      	ldr	r3, [sp, #8]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	701a      	strb	r2, [r3, #0]
 8005b9e:	b01c      	add	sp, #112	@ 0x70
 8005ba0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ba4:	b003      	add	sp, #12
 8005ba6:	4770      	bx	lr
 8005ba8:	20000050 	.word	0x20000050
 8005bac:	ffff0208 	.word	0xffff0208

08005bb0 <__sread>:
 8005bb0:	b510      	push	{r4, lr}
 8005bb2:	460c      	mov	r4, r1
 8005bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bb8:	f000 f916 	bl	8005de8 <_read_r>
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	bfab      	itete	ge
 8005bc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005bc2:	89a3      	ldrhlt	r3, [r4, #12]
 8005bc4:	181b      	addge	r3, r3, r0
 8005bc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005bca:	bfac      	ite	ge
 8005bcc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005bce:	81a3      	strhlt	r3, [r4, #12]
 8005bd0:	bd10      	pop	{r4, pc}

08005bd2 <__swrite>:
 8005bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bd6:	461f      	mov	r7, r3
 8005bd8:	898b      	ldrh	r3, [r1, #12]
 8005bda:	05db      	lsls	r3, r3, #23
 8005bdc:	4605      	mov	r5, r0
 8005bde:	460c      	mov	r4, r1
 8005be0:	4616      	mov	r6, r2
 8005be2:	d505      	bpl.n	8005bf0 <__swrite+0x1e>
 8005be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be8:	2302      	movs	r3, #2
 8005bea:	2200      	movs	r2, #0
 8005bec:	f000 f8ea 	bl	8005dc4 <_lseek_r>
 8005bf0:	89a3      	ldrh	r3, [r4, #12]
 8005bf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005bfa:	81a3      	strh	r3, [r4, #12]
 8005bfc:	4632      	mov	r2, r6
 8005bfe:	463b      	mov	r3, r7
 8005c00:	4628      	mov	r0, r5
 8005c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c06:	f000 b901 	b.w	8005e0c <_write_r>

08005c0a <__sseek>:
 8005c0a:	b510      	push	{r4, lr}
 8005c0c:	460c      	mov	r4, r1
 8005c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c12:	f000 f8d7 	bl	8005dc4 <_lseek_r>
 8005c16:	1c43      	adds	r3, r0, #1
 8005c18:	89a3      	ldrh	r3, [r4, #12]
 8005c1a:	bf15      	itete	ne
 8005c1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c26:	81a3      	strheq	r3, [r4, #12]
 8005c28:	bf18      	it	ne
 8005c2a:	81a3      	strhne	r3, [r4, #12]
 8005c2c:	bd10      	pop	{r4, pc}

08005c2e <__sclose>:
 8005c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c32:	f000 b8b7 	b.w	8005da4 <_close_r>

08005c36 <__swbuf_r>:
 8005c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c38:	460e      	mov	r6, r1
 8005c3a:	4614      	mov	r4, r2
 8005c3c:	4605      	mov	r5, r0
 8005c3e:	b118      	cbz	r0, 8005c48 <__swbuf_r+0x12>
 8005c40:	6a03      	ldr	r3, [r0, #32]
 8005c42:	b90b      	cbnz	r3, 8005c48 <__swbuf_r+0x12>
 8005c44:	f7ff feee 	bl	8005a24 <__sinit>
 8005c48:	69a3      	ldr	r3, [r4, #24]
 8005c4a:	60a3      	str	r3, [r4, #8]
 8005c4c:	89a3      	ldrh	r3, [r4, #12]
 8005c4e:	071a      	lsls	r2, r3, #28
 8005c50:	d501      	bpl.n	8005c56 <__swbuf_r+0x20>
 8005c52:	6923      	ldr	r3, [r4, #16]
 8005c54:	b943      	cbnz	r3, 8005c68 <__swbuf_r+0x32>
 8005c56:	4621      	mov	r1, r4
 8005c58:	4628      	mov	r0, r5
 8005c5a:	f000 f82b 	bl	8005cb4 <__swsetup_r>
 8005c5e:	b118      	cbz	r0, 8005c68 <__swbuf_r+0x32>
 8005c60:	f04f 37ff 	mov.w	r7, #4294967295
 8005c64:	4638      	mov	r0, r7
 8005c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c68:	6823      	ldr	r3, [r4, #0]
 8005c6a:	6922      	ldr	r2, [r4, #16]
 8005c6c:	1a98      	subs	r0, r3, r2
 8005c6e:	6963      	ldr	r3, [r4, #20]
 8005c70:	b2f6      	uxtb	r6, r6
 8005c72:	4283      	cmp	r3, r0
 8005c74:	4637      	mov	r7, r6
 8005c76:	dc05      	bgt.n	8005c84 <__swbuf_r+0x4e>
 8005c78:	4621      	mov	r1, r4
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	f000 feb8 	bl	80069f0 <_fflush_r>
 8005c80:	2800      	cmp	r0, #0
 8005c82:	d1ed      	bne.n	8005c60 <__swbuf_r+0x2a>
 8005c84:	68a3      	ldr	r3, [r4, #8]
 8005c86:	3b01      	subs	r3, #1
 8005c88:	60a3      	str	r3, [r4, #8]
 8005c8a:	6823      	ldr	r3, [r4, #0]
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	6022      	str	r2, [r4, #0]
 8005c90:	701e      	strb	r6, [r3, #0]
 8005c92:	6962      	ldr	r2, [r4, #20]
 8005c94:	1c43      	adds	r3, r0, #1
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d004      	beq.n	8005ca4 <__swbuf_r+0x6e>
 8005c9a:	89a3      	ldrh	r3, [r4, #12]
 8005c9c:	07db      	lsls	r3, r3, #31
 8005c9e:	d5e1      	bpl.n	8005c64 <__swbuf_r+0x2e>
 8005ca0:	2e0a      	cmp	r6, #10
 8005ca2:	d1df      	bne.n	8005c64 <__swbuf_r+0x2e>
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	f000 fea2 	bl	80069f0 <_fflush_r>
 8005cac:	2800      	cmp	r0, #0
 8005cae:	d0d9      	beq.n	8005c64 <__swbuf_r+0x2e>
 8005cb0:	e7d6      	b.n	8005c60 <__swbuf_r+0x2a>
	...

08005cb4 <__swsetup_r>:
 8005cb4:	b538      	push	{r3, r4, r5, lr}
 8005cb6:	4b29      	ldr	r3, [pc, #164]	@ (8005d5c <__swsetup_r+0xa8>)
 8005cb8:	4605      	mov	r5, r0
 8005cba:	6818      	ldr	r0, [r3, #0]
 8005cbc:	460c      	mov	r4, r1
 8005cbe:	b118      	cbz	r0, 8005cc8 <__swsetup_r+0x14>
 8005cc0:	6a03      	ldr	r3, [r0, #32]
 8005cc2:	b90b      	cbnz	r3, 8005cc8 <__swsetup_r+0x14>
 8005cc4:	f7ff feae 	bl	8005a24 <__sinit>
 8005cc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ccc:	0719      	lsls	r1, r3, #28
 8005cce:	d422      	bmi.n	8005d16 <__swsetup_r+0x62>
 8005cd0:	06da      	lsls	r2, r3, #27
 8005cd2:	d407      	bmi.n	8005ce4 <__swsetup_r+0x30>
 8005cd4:	2209      	movs	r2, #9
 8005cd6:	602a      	str	r2, [r5, #0]
 8005cd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cdc:	81a3      	strh	r3, [r4, #12]
 8005cde:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce2:	e033      	b.n	8005d4c <__swsetup_r+0x98>
 8005ce4:	0758      	lsls	r0, r3, #29
 8005ce6:	d512      	bpl.n	8005d0e <__swsetup_r+0x5a>
 8005ce8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005cea:	b141      	cbz	r1, 8005cfe <__swsetup_r+0x4a>
 8005cec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005cf0:	4299      	cmp	r1, r3
 8005cf2:	d002      	beq.n	8005cfa <__swsetup_r+0x46>
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	f000 f8d7 	bl	8005ea8 <_free_r>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	6363      	str	r3, [r4, #52]	@ 0x34
 8005cfe:	89a3      	ldrh	r3, [r4, #12]
 8005d00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005d04:	81a3      	strh	r3, [r4, #12]
 8005d06:	2300      	movs	r3, #0
 8005d08:	6063      	str	r3, [r4, #4]
 8005d0a:	6923      	ldr	r3, [r4, #16]
 8005d0c:	6023      	str	r3, [r4, #0]
 8005d0e:	89a3      	ldrh	r3, [r4, #12]
 8005d10:	f043 0308 	orr.w	r3, r3, #8
 8005d14:	81a3      	strh	r3, [r4, #12]
 8005d16:	6923      	ldr	r3, [r4, #16]
 8005d18:	b94b      	cbnz	r3, 8005d2e <__swsetup_r+0x7a>
 8005d1a:	89a3      	ldrh	r3, [r4, #12]
 8005d1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005d20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d24:	d003      	beq.n	8005d2e <__swsetup_r+0x7a>
 8005d26:	4621      	mov	r1, r4
 8005d28:	4628      	mov	r0, r5
 8005d2a:	f000 feaf 	bl	8006a8c <__smakebuf_r>
 8005d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d32:	f013 0201 	ands.w	r2, r3, #1
 8005d36:	d00a      	beq.n	8005d4e <__swsetup_r+0x9a>
 8005d38:	2200      	movs	r2, #0
 8005d3a:	60a2      	str	r2, [r4, #8]
 8005d3c:	6962      	ldr	r2, [r4, #20]
 8005d3e:	4252      	negs	r2, r2
 8005d40:	61a2      	str	r2, [r4, #24]
 8005d42:	6922      	ldr	r2, [r4, #16]
 8005d44:	b942      	cbnz	r2, 8005d58 <__swsetup_r+0xa4>
 8005d46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005d4a:	d1c5      	bne.n	8005cd8 <__swsetup_r+0x24>
 8005d4c:	bd38      	pop	{r3, r4, r5, pc}
 8005d4e:	0799      	lsls	r1, r3, #30
 8005d50:	bf58      	it	pl
 8005d52:	6962      	ldrpl	r2, [r4, #20]
 8005d54:	60a2      	str	r2, [r4, #8]
 8005d56:	e7f4      	b.n	8005d42 <__swsetup_r+0x8e>
 8005d58:	2000      	movs	r0, #0
 8005d5a:	e7f7      	b.n	8005d4c <__swsetup_r+0x98>
 8005d5c:	20000050 	.word	0x20000050

08005d60 <memmove>:
 8005d60:	4288      	cmp	r0, r1
 8005d62:	b510      	push	{r4, lr}
 8005d64:	eb01 0402 	add.w	r4, r1, r2
 8005d68:	d902      	bls.n	8005d70 <memmove+0x10>
 8005d6a:	4284      	cmp	r4, r0
 8005d6c:	4623      	mov	r3, r4
 8005d6e:	d807      	bhi.n	8005d80 <memmove+0x20>
 8005d70:	1e43      	subs	r3, r0, #1
 8005d72:	42a1      	cmp	r1, r4
 8005d74:	d008      	beq.n	8005d88 <memmove+0x28>
 8005d76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d7e:	e7f8      	b.n	8005d72 <memmove+0x12>
 8005d80:	4402      	add	r2, r0
 8005d82:	4601      	mov	r1, r0
 8005d84:	428a      	cmp	r2, r1
 8005d86:	d100      	bne.n	8005d8a <memmove+0x2a>
 8005d88:	bd10      	pop	{r4, pc}
 8005d8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d92:	e7f7      	b.n	8005d84 <memmove+0x24>

08005d94 <memset>:
 8005d94:	4402      	add	r2, r0
 8005d96:	4603      	mov	r3, r0
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d100      	bne.n	8005d9e <memset+0xa>
 8005d9c:	4770      	bx	lr
 8005d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8005da2:	e7f9      	b.n	8005d98 <memset+0x4>

08005da4 <_close_r>:
 8005da4:	b538      	push	{r3, r4, r5, lr}
 8005da6:	4d06      	ldr	r5, [pc, #24]	@ (8005dc0 <_close_r+0x1c>)
 8005da8:	2300      	movs	r3, #0
 8005daa:	4604      	mov	r4, r0
 8005dac:	4608      	mov	r0, r1
 8005dae:	602b      	str	r3, [r5, #0]
 8005db0:	f7fb fad1 	bl	8001356 <_close>
 8005db4:	1c43      	adds	r3, r0, #1
 8005db6:	d102      	bne.n	8005dbe <_close_r+0x1a>
 8005db8:	682b      	ldr	r3, [r5, #0]
 8005dba:	b103      	cbz	r3, 8005dbe <_close_r+0x1a>
 8005dbc:	6023      	str	r3, [r4, #0]
 8005dbe:	bd38      	pop	{r3, r4, r5, pc}
 8005dc0:	20000710 	.word	0x20000710

08005dc4 <_lseek_r>:
 8005dc4:	b538      	push	{r3, r4, r5, lr}
 8005dc6:	4d07      	ldr	r5, [pc, #28]	@ (8005de4 <_lseek_r+0x20>)
 8005dc8:	4604      	mov	r4, r0
 8005dca:	4608      	mov	r0, r1
 8005dcc:	4611      	mov	r1, r2
 8005dce:	2200      	movs	r2, #0
 8005dd0:	602a      	str	r2, [r5, #0]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	f7fb fae6 	bl	80013a4 <_lseek>
 8005dd8:	1c43      	adds	r3, r0, #1
 8005dda:	d102      	bne.n	8005de2 <_lseek_r+0x1e>
 8005ddc:	682b      	ldr	r3, [r5, #0]
 8005dde:	b103      	cbz	r3, 8005de2 <_lseek_r+0x1e>
 8005de0:	6023      	str	r3, [r4, #0]
 8005de2:	bd38      	pop	{r3, r4, r5, pc}
 8005de4:	20000710 	.word	0x20000710

08005de8 <_read_r>:
 8005de8:	b538      	push	{r3, r4, r5, lr}
 8005dea:	4d07      	ldr	r5, [pc, #28]	@ (8005e08 <_read_r+0x20>)
 8005dec:	4604      	mov	r4, r0
 8005dee:	4608      	mov	r0, r1
 8005df0:	4611      	mov	r1, r2
 8005df2:	2200      	movs	r2, #0
 8005df4:	602a      	str	r2, [r5, #0]
 8005df6:	461a      	mov	r2, r3
 8005df8:	f7fb fa90 	bl	800131c <_read>
 8005dfc:	1c43      	adds	r3, r0, #1
 8005dfe:	d102      	bne.n	8005e06 <_read_r+0x1e>
 8005e00:	682b      	ldr	r3, [r5, #0]
 8005e02:	b103      	cbz	r3, 8005e06 <_read_r+0x1e>
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	bd38      	pop	{r3, r4, r5, pc}
 8005e08:	20000710 	.word	0x20000710

08005e0c <_write_r>:
 8005e0c:	b538      	push	{r3, r4, r5, lr}
 8005e0e:	4d07      	ldr	r5, [pc, #28]	@ (8005e2c <_write_r+0x20>)
 8005e10:	4604      	mov	r4, r0
 8005e12:	4608      	mov	r0, r1
 8005e14:	4611      	mov	r1, r2
 8005e16:	2200      	movs	r2, #0
 8005e18:	602a      	str	r2, [r5, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	f7fa fc9a 	bl	8000754 <_write>
 8005e20:	1c43      	adds	r3, r0, #1
 8005e22:	d102      	bne.n	8005e2a <_write_r+0x1e>
 8005e24:	682b      	ldr	r3, [r5, #0]
 8005e26:	b103      	cbz	r3, 8005e2a <_write_r+0x1e>
 8005e28:	6023      	str	r3, [r4, #0]
 8005e2a:	bd38      	pop	{r3, r4, r5, pc}
 8005e2c:	20000710 	.word	0x20000710

08005e30 <__errno>:
 8005e30:	4b01      	ldr	r3, [pc, #4]	@ (8005e38 <__errno+0x8>)
 8005e32:	6818      	ldr	r0, [r3, #0]
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	20000050 	.word	0x20000050

08005e3c <__libc_init_array>:
 8005e3c:	b570      	push	{r4, r5, r6, lr}
 8005e3e:	4d0d      	ldr	r5, [pc, #52]	@ (8005e74 <__libc_init_array+0x38>)
 8005e40:	4c0d      	ldr	r4, [pc, #52]	@ (8005e78 <__libc_init_array+0x3c>)
 8005e42:	1b64      	subs	r4, r4, r5
 8005e44:	10a4      	asrs	r4, r4, #2
 8005e46:	2600      	movs	r6, #0
 8005e48:	42a6      	cmp	r6, r4
 8005e4a:	d109      	bne.n	8005e60 <__libc_init_array+0x24>
 8005e4c:	4d0b      	ldr	r5, [pc, #44]	@ (8005e7c <__libc_init_array+0x40>)
 8005e4e:	4c0c      	ldr	r4, [pc, #48]	@ (8005e80 <__libc_init_array+0x44>)
 8005e50:	f000 fec0 	bl	8006bd4 <_init>
 8005e54:	1b64      	subs	r4, r4, r5
 8005e56:	10a4      	asrs	r4, r4, #2
 8005e58:	2600      	movs	r6, #0
 8005e5a:	42a6      	cmp	r6, r4
 8005e5c:	d105      	bne.n	8005e6a <__libc_init_array+0x2e>
 8005e5e:	bd70      	pop	{r4, r5, r6, pc}
 8005e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e64:	4798      	blx	r3
 8005e66:	3601      	adds	r6, #1
 8005e68:	e7ee      	b.n	8005e48 <__libc_init_array+0xc>
 8005e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e6e:	4798      	blx	r3
 8005e70:	3601      	adds	r6, #1
 8005e72:	e7f2      	b.n	8005e5a <__libc_init_array+0x1e>
 8005e74:	08008134 	.word	0x08008134
 8005e78:	08008134 	.word	0x08008134
 8005e7c:	08008134 	.word	0x08008134
 8005e80:	08008138 	.word	0x08008138

08005e84 <__retarget_lock_init_recursive>:
 8005e84:	4770      	bx	lr

08005e86 <__retarget_lock_acquire_recursive>:
 8005e86:	4770      	bx	lr

08005e88 <__retarget_lock_release_recursive>:
 8005e88:	4770      	bx	lr

08005e8a <memcpy>:
 8005e8a:	440a      	add	r2, r1
 8005e8c:	4291      	cmp	r1, r2
 8005e8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e92:	d100      	bne.n	8005e96 <memcpy+0xc>
 8005e94:	4770      	bx	lr
 8005e96:	b510      	push	{r4, lr}
 8005e98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ea0:	4291      	cmp	r1, r2
 8005ea2:	d1f9      	bne.n	8005e98 <memcpy+0xe>
 8005ea4:	bd10      	pop	{r4, pc}
	...

08005ea8 <_free_r>:
 8005ea8:	b538      	push	{r3, r4, r5, lr}
 8005eaa:	4605      	mov	r5, r0
 8005eac:	2900      	cmp	r1, #0
 8005eae:	d041      	beq.n	8005f34 <_free_r+0x8c>
 8005eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005eb4:	1f0c      	subs	r4, r1, #4
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	bfb8      	it	lt
 8005eba:	18e4      	addlt	r4, r4, r3
 8005ebc:	f000 f8e0 	bl	8006080 <__malloc_lock>
 8005ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8005f38 <_free_r+0x90>)
 8005ec2:	6813      	ldr	r3, [r2, #0]
 8005ec4:	b933      	cbnz	r3, 8005ed4 <_free_r+0x2c>
 8005ec6:	6063      	str	r3, [r4, #4]
 8005ec8:	6014      	str	r4, [r2, #0]
 8005eca:	4628      	mov	r0, r5
 8005ecc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ed0:	f000 b8dc 	b.w	800608c <__malloc_unlock>
 8005ed4:	42a3      	cmp	r3, r4
 8005ed6:	d908      	bls.n	8005eea <_free_r+0x42>
 8005ed8:	6820      	ldr	r0, [r4, #0]
 8005eda:	1821      	adds	r1, r4, r0
 8005edc:	428b      	cmp	r3, r1
 8005ede:	bf01      	itttt	eq
 8005ee0:	6819      	ldreq	r1, [r3, #0]
 8005ee2:	685b      	ldreq	r3, [r3, #4]
 8005ee4:	1809      	addeq	r1, r1, r0
 8005ee6:	6021      	streq	r1, [r4, #0]
 8005ee8:	e7ed      	b.n	8005ec6 <_free_r+0x1e>
 8005eea:	461a      	mov	r2, r3
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	b10b      	cbz	r3, 8005ef4 <_free_r+0x4c>
 8005ef0:	42a3      	cmp	r3, r4
 8005ef2:	d9fa      	bls.n	8005eea <_free_r+0x42>
 8005ef4:	6811      	ldr	r1, [r2, #0]
 8005ef6:	1850      	adds	r0, r2, r1
 8005ef8:	42a0      	cmp	r0, r4
 8005efa:	d10b      	bne.n	8005f14 <_free_r+0x6c>
 8005efc:	6820      	ldr	r0, [r4, #0]
 8005efe:	4401      	add	r1, r0
 8005f00:	1850      	adds	r0, r2, r1
 8005f02:	4283      	cmp	r3, r0
 8005f04:	6011      	str	r1, [r2, #0]
 8005f06:	d1e0      	bne.n	8005eca <_free_r+0x22>
 8005f08:	6818      	ldr	r0, [r3, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	6053      	str	r3, [r2, #4]
 8005f0e:	4408      	add	r0, r1
 8005f10:	6010      	str	r0, [r2, #0]
 8005f12:	e7da      	b.n	8005eca <_free_r+0x22>
 8005f14:	d902      	bls.n	8005f1c <_free_r+0x74>
 8005f16:	230c      	movs	r3, #12
 8005f18:	602b      	str	r3, [r5, #0]
 8005f1a:	e7d6      	b.n	8005eca <_free_r+0x22>
 8005f1c:	6820      	ldr	r0, [r4, #0]
 8005f1e:	1821      	adds	r1, r4, r0
 8005f20:	428b      	cmp	r3, r1
 8005f22:	bf04      	itt	eq
 8005f24:	6819      	ldreq	r1, [r3, #0]
 8005f26:	685b      	ldreq	r3, [r3, #4]
 8005f28:	6063      	str	r3, [r4, #4]
 8005f2a:	bf04      	itt	eq
 8005f2c:	1809      	addeq	r1, r1, r0
 8005f2e:	6021      	streq	r1, [r4, #0]
 8005f30:	6054      	str	r4, [r2, #4]
 8005f32:	e7ca      	b.n	8005eca <_free_r+0x22>
 8005f34:	bd38      	pop	{r3, r4, r5, pc}
 8005f36:	bf00      	nop
 8005f38:	2000071c 	.word	0x2000071c

08005f3c <sbrk_aligned>:
 8005f3c:	b570      	push	{r4, r5, r6, lr}
 8005f3e:	4e0f      	ldr	r6, [pc, #60]	@ (8005f7c <sbrk_aligned+0x40>)
 8005f40:	460c      	mov	r4, r1
 8005f42:	6831      	ldr	r1, [r6, #0]
 8005f44:	4605      	mov	r5, r0
 8005f46:	b911      	cbnz	r1, 8005f4e <sbrk_aligned+0x12>
 8005f48:	f000 fdfe 	bl	8006b48 <_sbrk_r>
 8005f4c:	6030      	str	r0, [r6, #0]
 8005f4e:	4621      	mov	r1, r4
 8005f50:	4628      	mov	r0, r5
 8005f52:	f000 fdf9 	bl	8006b48 <_sbrk_r>
 8005f56:	1c43      	adds	r3, r0, #1
 8005f58:	d103      	bne.n	8005f62 <sbrk_aligned+0x26>
 8005f5a:	f04f 34ff 	mov.w	r4, #4294967295
 8005f5e:	4620      	mov	r0, r4
 8005f60:	bd70      	pop	{r4, r5, r6, pc}
 8005f62:	1cc4      	adds	r4, r0, #3
 8005f64:	f024 0403 	bic.w	r4, r4, #3
 8005f68:	42a0      	cmp	r0, r4
 8005f6a:	d0f8      	beq.n	8005f5e <sbrk_aligned+0x22>
 8005f6c:	1a21      	subs	r1, r4, r0
 8005f6e:	4628      	mov	r0, r5
 8005f70:	f000 fdea 	bl	8006b48 <_sbrk_r>
 8005f74:	3001      	adds	r0, #1
 8005f76:	d1f2      	bne.n	8005f5e <sbrk_aligned+0x22>
 8005f78:	e7ef      	b.n	8005f5a <sbrk_aligned+0x1e>
 8005f7a:	bf00      	nop
 8005f7c:	20000718 	.word	0x20000718

08005f80 <_malloc_r>:
 8005f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f84:	1ccd      	adds	r5, r1, #3
 8005f86:	f025 0503 	bic.w	r5, r5, #3
 8005f8a:	3508      	adds	r5, #8
 8005f8c:	2d0c      	cmp	r5, #12
 8005f8e:	bf38      	it	cc
 8005f90:	250c      	movcc	r5, #12
 8005f92:	2d00      	cmp	r5, #0
 8005f94:	4606      	mov	r6, r0
 8005f96:	db01      	blt.n	8005f9c <_malloc_r+0x1c>
 8005f98:	42a9      	cmp	r1, r5
 8005f9a:	d904      	bls.n	8005fa6 <_malloc_r+0x26>
 8005f9c:	230c      	movs	r3, #12
 8005f9e:	6033      	str	r3, [r6, #0]
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fa6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800607c <_malloc_r+0xfc>
 8005faa:	f000 f869 	bl	8006080 <__malloc_lock>
 8005fae:	f8d8 3000 	ldr.w	r3, [r8]
 8005fb2:	461c      	mov	r4, r3
 8005fb4:	bb44      	cbnz	r4, 8006008 <_malloc_r+0x88>
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	4630      	mov	r0, r6
 8005fba:	f7ff ffbf 	bl	8005f3c <sbrk_aligned>
 8005fbe:	1c43      	adds	r3, r0, #1
 8005fc0:	4604      	mov	r4, r0
 8005fc2:	d158      	bne.n	8006076 <_malloc_r+0xf6>
 8005fc4:	f8d8 4000 	ldr.w	r4, [r8]
 8005fc8:	4627      	mov	r7, r4
 8005fca:	2f00      	cmp	r7, #0
 8005fcc:	d143      	bne.n	8006056 <_malloc_r+0xd6>
 8005fce:	2c00      	cmp	r4, #0
 8005fd0:	d04b      	beq.n	800606a <_malloc_r+0xea>
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	4639      	mov	r1, r7
 8005fd6:	4630      	mov	r0, r6
 8005fd8:	eb04 0903 	add.w	r9, r4, r3
 8005fdc:	f000 fdb4 	bl	8006b48 <_sbrk_r>
 8005fe0:	4581      	cmp	r9, r0
 8005fe2:	d142      	bne.n	800606a <_malloc_r+0xea>
 8005fe4:	6821      	ldr	r1, [r4, #0]
 8005fe6:	1a6d      	subs	r5, r5, r1
 8005fe8:	4629      	mov	r1, r5
 8005fea:	4630      	mov	r0, r6
 8005fec:	f7ff ffa6 	bl	8005f3c <sbrk_aligned>
 8005ff0:	3001      	adds	r0, #1
 8005ff2:	d03a      	beq.n	800606a <_malloc_r+0xea>
 8005ff4:	6823      	ldr	r3, [r4, #0]
 8005ff6:	442b      	add	r3, r5
 8005ff8:	6023      	str	r3, [r4, #0]
 8005ffa:	f8d8 3000 	ldr.w	r3, [r8]
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	bb62      	cbnz	r2, 800605c <_malloc_r+0xdc>
 8006002:	f8c8 7000 	str.w	r7, [r8]
 8006006:	e00f      	b.n	8006028 <_malloc_r+0xa8>
 8006008:	6822      	ldr	r2, [r4, #0]
 800600a:	1b52      	subs	r2, r2, r5
 800600c:	d420      	bmi.n	8006050 <_malloc_r+0xd0>
 800600e:	2a0b      	cmp	r2, #11
 8006010:	d917      	bls.n	8006042 <_malloc_r+0xc2>
 8006012:	1961      	adds	r1, r4, r5
 8006014:	42a3      	cmp	r3, r4
 8006016:	6025      	str	r5, [r4, #0]
 8006018:	bf18      	it	ne
 800601a:	6059      	strne	r1, [r3, #4]
 800601c:	6863      	ldr	r3, [r4, #4]
 800601e:	bf08      	it	eq
 8006020:	f8c8 1000 	streq.w	r1, [r8]
 8006024:	5162      	str	r2, [r4, r5]
 8006026:	604b      	str	r3, [r1, #4]
 8006028:	4630      	mov	r0, r6
 800602a:	f000 f82f 	bl	800608c <__malloc_unlock>
 800602e:	f104 000b 	add.w	r0, r4, #11
 8006032:	1d23      	adds	r3, r4, #4
 8006034:	f020 0007 	bic.w	r0, r0, #7
 8006038:	1ac2      	subs	r2, r0, r3
 800603a:	bf1c      	itt	ne
 800603c:	1a1b      	subne	r3, r3, r0
 800603e:	50a3      	strne	r3, [r4, r2]
 8006040:	e7af      	b.n	8005fa2 <_malloc_r+0x22>
 8006042:	6862      	ldr	r2, [r4, #4]
 8006044:	42a3      	cmp	r3, r4
 8006046:	bf0c      	ite	eq
 8006048:	f8c8 2000 	streq.w	r2, [r8]
 800604c:	605a      	strne	r2, [r3, #4]
 800604e:	e7eb      	b.n	8006028 <_malloc_r+0xa8>
 8006050:	4623      	mov	r3, r4
 8006052:	6864      	ldr	r4, [r4, #4]
 8006054:	e7ae      	b.n	8005fb4 <_malloc_r+0x34>
 8006056:	463c      	mov	r4, r7
 8006058:	687f      	ldr	r7, [r7, #4]
 800605a:	e7b6      	b.n	8005fca <_malloc_r+0x4a>
 800605c:	461a      	mov	r2, r3
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	42a3      	cmp	r3, r4
 8006062:	d1fb      	bne.n	800605c <_malloc_r+0xdc>
 8006064:	2300      	movs	r3, #0
 8006066:	6053      	str	r3, [r2, #4]
 8006068:	e7de      	b.n	8006028 <_malloc_r+0xa8>
 800606a:	230c      	movs	r3, #12
 800606c:	6033      	str	r3, [r6, #0]
 800606e:	4630      	mov	r0, r6
 8006070:	f000 f80c 	bl	800608c <__malloc_unlock>
 8006074:	e794      	b.n	8005fa0 <_malloc_r+0x20>
 8006076:	6005      	str	r5, [r0, #0]
 8006078:	e7d6      	b.n	8006028 <_malloc_r+0xa8>
 800607a:	bf00      	nop
 800607c:	2000071c 	.word	0x2000071c

08006080 <__malloc_lock>:
 8006080:	4801      	ldr	r0, [pc, #4]	@ (8006088 <__malloc_lock+0x8>)
 8006082:	f7ff bf00 	b.w	8005e86 <__retarget_lock_acquire_recursive>
 8006086:	bf00      	nop
 8006088:	20000714 	.word	0x20000714

0800608c <__malloc_unlock>:
 800608c:	4801      	ldr	r0, [pc, #4]	@ (8006094 <__malloc_unlock+0x8>)
 800608e:	f7ff befb 	b.w	8005e88 <__retarget_lock_release_recursive>
 8006092:	bf00      	nop
 8006094:	20000714 	.word	0x20000714

08006098 <__ssputs_r>:
 8006098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800609c:	688e      	ldr	r6, [r1, #8]
 800609e:	461f      	mov	r7, r3
 80060a0:	42be      	cmp	r6, r7
 80060a2:	680b      	ldr	r3, [r1, #0]
 80060a4:	4682      	mov	sl, r0
 80060a6:	460c      	mov	r4, r1
 80060a8:	4690      	mov	r8, r2
 80060aa:	d82d      	bhi.n	8006108 <__ssputs_r+0x70>
 80060ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80060b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80060b4:	d026      	beq.n	8006104 <__ssputs_r+0x6c>
 80060b6:	6965      	ldr	r5, [r4, #20]
 80060b8:	6909      	ldr	r1, [r1, #16]
 80060ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060be:	eba3 0901 	sub.w	r9, r3, r1
 80060c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060c6:	1c7b      	adds	r3, r7, #1
 80060c8:	444b      	add	r3, r9
 80060ca:	106d      	asrs	r5, r5, #1
 80060cc:	429d      	cmp	r5, r3
 80060ce:	bf38      	it	cc
 80060d0:	461d      	movcc	r5, r3
 80060d2:	0553      	lsls	r3, r2, #21
 80060d4:	d527      	bpl.n	8006126 <__ssputs_r+0x8e>
 80060d6:	4629      	mov	r1, r5
 80060d8:	f7ff ff52 	bl	8005f80 <_malloc_r>
 80060dc:	4606      	mov	r6, r0
 80060de:	b360      	cbz	r0, 800613a <__ssputs_r+0xa2>
 80060e0:	6921      	ldr	r1, [r4, #16]
 80060e2:	464a      	mov	r2, r9
 80060e4:	f7ff fed1 	bl	8005e8a <memcpy>
 80060e8:	89a3      	ldrh	r3, [r4, #12]
 80060ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80060ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060f2:	81a3      	strh	r3, [r4, #12]
 80060f4:	6126      	str	r6, [r4, #16]
 80060f6:	6165      	str	r5, [r4, #20]
 80060f8:	444e      	add	r6, r9
 80060fa:	eba5 0509 	sub.w	r5, r5, r9
 80060fe:	6026      	str	r6, [r4, #0]
 8006100:	60a5      	str	r5, [r4, #8]
 8006102:	463e      	mov	r6, r7
 8006104:	42be      	cmp	r6, r7
 8006106:	d900      	bls.n	800610a <__ssputs_r+0x72>
 8006108:	463e      	mov	r6, r7
 800610a:	6820      	ldr	r0, [r4, #0]
 800610c:	4632      	mov	r2, r6
 800610e:	4641      	mov	r1, r8
 8006110:	f7ff fe26 	bl	8005d60 <memmove>
 8006114:	68a3      	ldr	r3, [r4, #8]
 8006116:	1b9b      	subs	r3, r3, r6
 8006118:	60a3      	str	r3, [r4, #8]
 800611a:	6823      	ldr	r3, [r4, #0]
 800611c:	4433      	add	r3, r6
 800611e:	6023      	str	r3, [r4, #0]
 8006120:	2000      	movs	r0, #0
 8006122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006126:	462a      	mov	r2, r5
 8006128:	f000 fd1e 	bl	8006b68 <_realloc_r>
 800612c:	4606      	mov	r6, r0
 800612e:	2800      	cmp	r0, #0
 8006130:	d1e0      	bne.n	80060f4 <__ssputs_r+0x5c>
 8006132:	6921      	ldr	r1, [r4, #16]
 8006134:	4650      	mov	r0, sl
 8006136:	f7ff feb7 	bl	8005ea8 <_free_r>
 800613a:	230c      	movs	r3, #12
 800613c:	f8ca 3000 	str.w	r3, [sl]
 8006140:	89a3      	ldrh	r3, [r4, #12]
 8006142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006146:	81a3      	strh	r3, [r4, #12]
 8006148:	f04f 30ff 	mov.w	r0, #4294967295
 800614c:	e7e9      	b.n	8006122 <__ssputs_r+0x8a>
	...

08006150 <_svfiprintf_r>:
 8006150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006154:	4698      	mov	r8, r3
 8006156:	898b      	ldrh	r3, [r1, #12]
 8006158:	061b      	lsls	r3, r3, #24
 800615a:	b09d      	sub	sp, #116	@ 0x74
 800615c:	4607      	mov	r7, r0
 800615e:	460d      	mov	r5, r1
 8006160:	4614      	mov	r4, r2
 8006162:	d510      	bpl.n	8006186 <_svfiprintf_r+0x36>
 8006164:	690b      	ldr	r3, [r1, #16]
 8006166:	b973      	cbnz	r3, 8006186 <_svfiprintf_r+0x36>
 8006168:	2140      	movs	r1, #64	@ 0x40
 800616a:	f7ff ff09 	bl	8005f80 <_malloc_r>
 800616e:	6028      	str	r0, [r5, #0]
 8006170:	6128      	str	r0, [r5, #16]
 8006172:	b930      	cbnz	r0, 8006182 <_svfiprintf_r+0x32>
 8006174:	230c      	movs	r3, #12
 8006176:	603b      	str	r3, [r7, #0]
 8006178:	f04f 30ff 	mov.w	r0, #4294967295
 800617c:	b01d      	add	sp, #116	@ 0x74
 800617e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006182:	2340      	movs	r3, #64	@ 0x40
 8006184:	616b      	str	r3, [r5, #20]
 8006186:	2300      	movs	r3, #0
 8006188:	9309      	str	r3, [sp, #36]	@ 0x24
 800618a:	2320      	movs	r3, #32
 800618c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006190:	f8cd 800c 	str.w	r8, [sp, #12]
 8006194:	2330      	movs	r3, #48	@ 0x30
 8006196:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006334 <_svfiprintf_r+0x1e4>
 800619a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800619e:	f04f 0901 	mov.w	r9, #1
 80061a2:	4623      	mov	r3, r4
 80061a4:	469a      	mov	sl, r3
 80061a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061aa:	b10a      	cbz	r2, 80061b0 <_svfiprintf_r+0x60>
 80061ac:	2a25      	cmp	r2, #37	@ 0x25
 80061ae:	d1f9      	bne.n	80061a4 <_svfiprintf_r+0x54>
 80061b0:	ebba 0b04 	subs.w	fp, sl, r4
 80061b4:	d00b      	beq.n	80061ce <_svfiprintf_r+0x7e>
 80061b6:	465b      	mov	r3, fp
 80061b8:	4622      	mov	r2, r4
 80061ba:	4629      	mov	r1, r5
 80061bc:	4638      	mov	r0, r7
 80061be:	f7ff ff6b 	bl	8006098 <__ssputs_r>
 80061c2:	3001      	adds	r0, #1
 80061c4:	f000 80a7 	beq.w	8006316 <_svfiprintf_r+0x1c6>
 80061c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061ca:	445a      	add	r2, fp
 80061cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80061ce:	f89a 3000 	ldrb.w	r3, [sl]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f000 809f 	beq.w	8006316 <_svfiprintf_r+0x1c6>
 80061d8:	2300      	movs	r3, #0
 80061da:	f04f 32ff 	mov.w	r2, #4294967295
 80061de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061e2:	f10a 0a01 	add.w	sl, sl, #1
 80061e6:	9304      	str	r3, [sp, #16]
 80061e8:	9307      	str	r3, [sp, #28]
 80061ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80061ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80061f0:	4654      	mov	r4, sl
 80061f2:	2205      	movs	r2, #5
 80061f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061f8:	484e      	ldr	r0, [pc, #312]	@ (8006334 <_svfiprintf_r+0x1e4>)
 80061fa:	f7f9 ffe9 	bl	80001d0 <memchr>
 80061fe:	9a04      	ldr	r2, [sp, #16]
 8006200:	b9d8      	cbnz	r0, 800623a <_svfiprintf_r+0xea>
 8006202:	06d0      	lsls	r0, r2, #27
 8006204:	bf44      	itt	mi
 8006206:	2320      	movmi	r3, #32
 8006208:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800620c:	0711      	lsls	r1, r2, #28
 800620e:	bf44      	itt	mi
 8006210:	232b      	movmi	r3, #43	@ 0x2b
 8006212:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006216:	f89a 3000 	ldrb.w	r3, [sl]
 800621a:	2b2a      	cmp	r3, #42	@ 0x2a
 800621c:	d015      	beq.n	800624a <_svfiprintf_r+0xfa>
 800621e:	9a07      	ldr	r2, [sp, #28]
 8006220:	4654      	mov	r4, sl
 8006222:	2000      	movs	r0, #0
 8006224:	f04f 0c0a 	mov.w	ip, #10
 8006228:	4621      	mov	r1, r4
 800622a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800622e:	3b30      	subs	r3, #48	@ 0x30
 8006230:	2b09      	cmp	r3, #9
 8006232:	d94b      	bls.n	80062cc <_svfiprintf_r+0x17c>
 8006234:	b1b0      	cbz	r0, 8006264 <_svfiprintf_r+0x114>
 8006236:	9207      	str	r2, [sp, #28]
 8006238:	e014      	b.n	8006264 <_svfiprintf_r+0x114>
 800623a:	eba0 0308 	sub.w	r3, r0, r8
 800623e:	fa09 f303 	lsl.w	r3, r9, r3
 8006242:	4313      	orrs	r3, r2
 8006244:	9304      	str	r3, [sp, #16]
 8006246:	46a2      	mov	sl, r4
 8006248:	e7d2      	b.n	80061f0 <_svfiprintf_r+0xa0>
 800624a:	9b03      	ldr	r3, [sp, #12]
 800624c:	1d19      	adds	r1, r3, #4
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	9103      	str	r1, [sp, #12]
 8006252:	2b00      	cmp	r3, #0
 8006254:	bfbb      	ittet	lt
 8006256:	425b      	neglt	r3, r3
 8006258:	f042 0202 	orrlt.w	r2, r2, #2
 800625c:	9307      	strge	r3, [sp, #28]
 800625e:	9307      	strlt	r3, [sp, #28]
 8006260:	bfb8      	it	lt
 8006262:	9204      	strlt	r2, [sp, #16]
 8006264:	7823      	ldrb	r3, [r4, #0]
 8006266:	2b2e      	cmp	r3, #46	@ 0x2e
 8006268:	d10a      	bne.n	8006280 <_svfiprintf_r+0x130>
 800626a:	7863      	ldrb	r3, [r4, #1]
 800626c:	2b2a      	cmp	r3, #42	@ 0x2a
 800626e:	d132      	bne.n	80062d6 <_svfiprintf_r+0x186>
 8006270:	9b03      	ldr	r3, [sp, #12]
 8006272:	1d1a      	adds	r2, r3, #4
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	9203      	str	r2, [sp, #12]
 8006278:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800627c:	3402      	adds	r4, #2
 800627e:	9305      	str	r3, [sp, #20]
 8006280:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006344 <_svfiprintf_r+0x1f4>
 8006284:	7821      	ldrb	r1, [r4, #0]
 8006286:	2203      	movs	r2, #3
 8006288:	4650      	mov	r0, sl
 800628a:	f7f9 ffa1 	bl	80001d0 <memchr>
 800628e:	b138      	cbz	r0, 80062a0 <_svfiprintf_r+0x150>
 8006290:	9b04      	ldr	r3, [sp, #16]
 8006292:	eba0 000a 	sub.w	r0, r0, sl
 8006296:	2240      	movs	r2, #64	@ 0x40
 8006298:	4082      	lsls	r2, r0
 800629a:	4313      	orrs	r3, r2
 800629c:	3401      	adds	r4, #1
 800629e:	9304      	str	r3, [sp, #16]
 80062a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062a4:	4824      	ldr	r0, [pc, #144]	@ (8006338 <_svfiprintf_r+0x1e8>)
 80062a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80062aa:	2206      	movs	r2, #6
 80062ac:	f7f9 ff90 	bl	80001d0 <memchr>
 80062b0:	2800      	cmp	r0, #0
 80062b2:	d036      	beq.n	8006322 <_svfiprintf_r+0x1d2>
 80062b4:	4b21      	ldr	r3, [pc, #132]	@ (800633c <_svfiprintf_r+0x1ec>)
 80062b6:	bb1b      	cbnz	r3, 8006300 <_svfiprintf_r+0x1b0>
 80062b8:	9b03      	ldr	r3, [sp, #12]
 80062ba:	3307      	adds	r3, #7
 80062bc:	f023 0307 	bic.w	r3, r3, #7
 80062c0:	3308      	adds	r3, #8
 80062c2:	9303      	str	r3, [sp, #12]
 80062c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062c6:	4433      	add	r3, r6
 80062c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80062ca:	e76a      	b.n	80061a2 <_svfiprintf_r+0x52>
 80062cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80062d0:	460c      	mov	r4, r1
 80062d2:	2001      	movs	r0, #1
 80062d4:	e7a8      	b.n	8006228 <_svfiprintf_r+0xd8>
 80062d6:	2300      	movs	r3, #0
 80062d8:	3401      	adds	r4, #1
 80062da:	9305      	str	r3, [sp, #20]
 80062dc:	4619      	mov	r1, r3
 80062de:	f04f 0c0a 	mov.w	ip, #10
 80062e2:	4620      	mov	r0, r4
 80062e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062e8:	3a30      	subs	r2, #48	@ 0x30
 80062ea:	2a09      	cmp	r2, #9
 80062ec:	d903      	bls.n	80062f6 <_svfiprintf_r+0x1a6>
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d0c6      	beq.n	8006280 <_svfiprintf_r+0x130>
 80062f2:	9105      	str	r1, [sp, #20]
 80062f4:	e7c4      	b.n	8006280 <_svfiprintf_r+0x130>
 80062f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80062fa:	4604      	mov	r4, r0
 80062fc:	2301      	movs	r3, #1
 80062fe:	e7f0      	b.n	80062e2 <_svfiprintf_r+0x192>
 8006300:	ab03      	add	r3, sp, #12
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	462a      	mov	r2, r5
 8006306:	4b0e      	ldr	r3, [pc, #56]	@ (8006340 <_svfiprintf_r+0x1f0>)
 8006308:	a904      	add	r1, sp, #16
 800630a:	4638      	mov	r0, r7
 800630c:	f3af 8000 	nop.w
 8006310:	1c42      	adds	r2, r0, #1
 8006312:	4606      	mov	r6, r0
 8006314:	d1d6      	bne.n	80062c4 <_svfiprintf_r+0x174>
 8006316:	89ab      	ldrh	r3, [r5, #12]
 8006318:	065b      	lsls	r3, r3, #25
 800631a:	f53f af2d 	bmi.w	8006178 <_svfiprintf_r+0x28>
 800631e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006320:	e72c      	b.n	800617c <_svfiprintf_r+0x2c>
 8006322:	ab03      	add	r3, sp, #12
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	462a      	mov	r2, r5
 8006328:	4b05      	ldr	r3, [pc, #20]	@ (8006340 <_svfiprintf_r+0x1f0>)
 800632a:	a904      	add	r1, sp, #16
 800632c:	4638      	mov	r0, r7
 800632e:	f000 f9bb 	bl	80066a8 <_printf_i>
 8006332:	e7ed      	b.n	8006310 <_svfiprintf_r+0x1c0>
 8006334:	080080f8 	.word	0x080080f8
 8006338:	08008102 	.word	0x08008102
 800633c:	00000000 	.word	0x00000000
 8006340:	08006099 	.word	0x08006099
 8006344:	080080fe 	.word	0x080080fe

08006348 <__sfputc_r>:
 8006348:	6893      	ldr	r3, [r2, #8]
 800634a:	3b01      	subs	r3, #1
 800634c:	2b00      	cmp	r3, #0
 800634e:	b410      	push	{r4}
 8006350:	6093      	str	r3, [r2, #8]
 8006352:	da08      	bge.n	8006366 <__sfputc_r+0x1e>
 8006354:	6994      	ldr	r4, [r2, #24]
 8006356:	42a3      	cmp	r3, r4
 8006358:	db01      	blt.n	800635e <__sfputc_r+0x16>
 800635a:	290a      	cmp	r1, #10
 800635c:	d103      	bne.n	8006366 <__sfputc_r+0x1e>
 800635e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006362:	f7ff bc68 	b.w	8005c36 <__swbuf_r>
 8006366:	6813      	ldr	r3, [r2, #0]
 8006368:	1c58      	adds	r0, r3, #1
 800636a:	6010      	str	r0, [r2, #0]
 800636c:	7019      	strb	r1, [r3, #0]
 800636e:	4608      	mov	r0, r1
 8006370:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006374:	4770      	bx	lr

08006376 <__sfputs_r>:
 8006376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006378:	4606      	mov	r6, r0
 800637a:	460f      	mov	r7, r1
 800637c:	4614      	mov	r4, r2
 800637e:	18d5      	adds	r5, r2, r3
 8006380:	42ac      	cmp	r4, r5
 8006382:	d101      	bne.n	8006388 <__sfputs_r+0x12>
 8006384:	2000      	movs	r0, #0
 8006386:	e007      	b.n	8006398 <__sfputs_r+0x22>
 8006388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800638c:	463a      	mov	r2, r7
 800638e:	4630      	mov	r0, r6
 8006390:	f7ff ffda 	bl	8006348 <__sfputc_r>
 8006394:	1c43      	adds	r3, r0, #1
 8006396:	d1f3      	bne.n	8006380 <__sfputs_r+0xa>
 8006398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800639c <_vfiprintf_r>:
 800639c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a0:	460d      	mov	r5, r1
 80063a2:	b09d      	sub	sp, #116	@ 0x74
 80063a4:	4614      	mov	r4, r2
 80063a6:	4698      	mov	r8, r3
 80063a8:	4606      	mov	r6, r0
 80063aa:	b118      	cbz	r0, 80063b4 <_vfiprintf_r+0x18>
 80063ac:	6a03      	ldr	r3, [r0, #32]
 80063ae:	b90b      	cbnz	r3, 80063b4 <_vfiprintf_r+0x18>
 80063b0:	f7ff fb38 	bl	8005a24 <__sinit>
 80063b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063b6:	07d9      	lsls	r1, r3, #31
 80063b8:	d405      	bmi.n	80063c6 <_vfiprintf_r+0x2a>
 80063ba:	89ab      	ldrh	r3, [r5, #12]
 80063bc:	059a      	lsls	r2, r3, #22
 80063be:	d402      	bmi.n	80063c6 <_vfiprintf_r+0x2a>
 80063c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063c2:	f7ff fd60 	bl	8005e86 <__retarget_lock_acquire_recursive>
 80063c6:	89ab      	ldrh	r3, [r5, #12]
 80063c8:	071b      	lsls	r3, r3, #28
 80063ca:	d501      	bpl.n	80063d0 <_vfiprintf_r+0x34>
 80063cc:	692b      	ldr	r3, [r5, #16]
 80063ce:	b99b      	cbnz	r3, 80063f8 <_vfiprintf_r+0x5c>
 80063d0:	4629      	mov	r1, r5
 80063d2:	4630      	mov	r0, r6
 80063d4:	f7ff fc6e 	bl	8005cb4 <__swsetup_r>
 80063d8:	b170      	cbz	r0, 80063f8 <_vfiprintf_r+0x5c>
 80063da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063dc:	07dc      	lsls	r4, r3, #31
 80063de:	d504      	bpl.n	80063ea <_vfiprintf_r+0x4e>
 80063e0:	f04f 30ff 	mov.w	r0, #4294967295
 80063e4:	b01d      	add	sp, #116	@ 0x74
 80063e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ea:	89ab      	ldrh	r3, [r5, #12]
 80063ec:	0598      	lsls	r0, r3, #22
 80063ee:	d4f7      	bmi.n	80063e0 <_vfiprintf_r+0x44>
 80063f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063f2:	f7ff fd49 	bl	8005e88 <__retarget_lock_release_recursive>
 80063f6:	e7f3      	b.n	80063e0 <_vfiprintf_r+0x44>
 80063f8:	2300      	movs	r3, #0
 80063fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80063fc:	2320      	movs	r3, #32
 80063fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006402:	f8cd 800c 	str.w	r8, [sp, #12]
 8006406:	2330      	movs	r3, #48	@ 0x30
 8006408:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80065b8 <_vfiprintf_r+0x21c>
 800640c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006410:	f04f 0901 	mov.w	r9, #1
 8006414:	4623      	mov	r3, r4
 8006416:	469a      	mov	sl, r3
 8006418:	f813 2b01 	ldrb.w	r2, [r3], #1
 800641c:	b10a      	cbz	r2, 8006422 <_vfiprintf_r+0x86>
 800641e:	2a25      	cmp	r2, #37	@ 0x25
 8006420:	d1f9      	bne.n	8006416 <_vfiprintf_r+0x7a>
 8006422:	ebba 0b04 	subs.w	fp, sl, r4
 8006426:	d00b      	beq.n	8006440 <_vfiprintf_r+0xa4>
 8006428:	465b      	mov	r3, fp
 800642a:	4622      	mov	r2, r4
 800642c:	4629      	mov	r1, r5
 800642e:	4630      	mov	r0, r6
 8006430:	f7ff ffa1 	bl	8006376 <__sfputs_r>
 8006434:	3001      	adds	r0, #1
 8006436:	f000 80a7 	beq.w	8006588 <_vfiprintf_r+0x1ec>
 800643a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800643c:	445a      	add	r2, fp
 800643e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006440:	f89a 3000 	ldrb.w	r3, [sl]
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 809f 	beq.w	8006588 <_vfiprintf_r+0x1ec>
 800644a:	2300      	movs	r3, #0
 800644c:	f04f 32ff 	mov.w	r2, #4294967295
 8006450:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006454:	f10a 0a01 	add.w	sl, sl, #1
 8006458:	9304      	str	r3, [sp, #16]
 800645a:	9307      	str	r3, [sp, #28]
 800645c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006460:	931a      	str	r3, [sp, #104]	@ 0x68
 8006462:	4654      	mov	r4, sl
 8006464:	2205      	movs	r2, #5
 8006466:	f814 1b01 	ldrb.w	r1, [r4], #1
 800646a:	4853      	ldr	r0, [pc, #332]	@ (80065b8 <_vfiprintf_r+0x21c>)
 800646c:	f7f9 feb0 	bl	80001d0 <memchr>
 8006470:	9a04      	ldr	r2, [sp, #16]
 8006472:	b9d8      	cbnz	r0, 80064ac <_vfiprintf_r+0x110>
 8006474:	06d1      	lsls	r1, r2, #27
 8006476:	bf44      	itt	mi
 8006478:	2320      	movmi	r3, #32
 800647a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800647e:	0713      	lsls	r3, r2, #28
 8006480:	bf44      	itt	mi
 8006482:	232b      	movmi	r3, #43	@ 0x2b
 8006484:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006488:	f89a 3000 	ldrb.w	r3, [sl]
 800648c:	2b2a      	cmp	r3, #42	@ 0x2a
 800648e:	d015      	beq.n	80064bc <_vfiprintf_r+0x120>
 8006490:	9a07      	ldr	r2, [sp, #28]
 8006492:	4654      	mov	r4, sl
 8006494:	2000      	movs	r0, #0
 8006496:	f04f 0c0a 	mov.w	ip, #10
 800649a:	4621      	mov	r1, r4
 800649c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064a0:	3b30      	subs	r3, #48	@ 0x30
 80064a2:	2b09      	cmp	r3, #9
 80064a4:	d94b      	bls.n	800653e <_vfiprintf_r+0x1a2>
 80064a6:	b1b0      	cbz	r0, 80064d6 <_vfiprintf_r+0x13a>
 80064a8:	9207      	str	r2, [sp, #28]
 80064aa:	e014      	b.n	80064d6 <_vfiprintf_r+0x13a>
 80064ac:	eba0 0308 	sub.w	r3, r0, r8
 80064b0:	fa09 f303 	lsl.w	r3, r9, r3
 80064b4:	4313      	orrs	r3, r2
 80064b6:	9304      	str	r3, [sp, #16]
 80064b8:	46a2      	mov	sl, r4
 80064ba:	e7d2      	b.n	8006462 <_vfiprintf_r+0xc6>
 80064bc:	9b03      	ldr	r3, [sp, #12]
 80064be:	1d19      	adds	r1, r3, #4
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	9103      	str	r1, [sp, #12]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	bfbb      	ittet	lt
 80064c8:	425b      	neglt	r3, r3
 80064ca:	f042 0202 	orrlt.w	r2, r2, #2
 80064ce:	9307      	strge	r3, [sp, #28]
 80064d0:	9307      	strlt	r3, [sp, #28]
 80064d2:	bfb8      	it	lt
 80064d4:	9204      	strlt	r2, [sp, #16]
 80064d6:	7823      	ldrb	r3, [r4, #0]
 80064d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80064da:	d10a      	bne.n	80064f2 <_vfiprintf_r+0x156>
 80064dc:	7863      	ldrb	r3, [r4, #1]
 80064de:	2b2a      	cmp	r3, #42	@ 0x2a
 80064e0:	d132      	bne.n	8006548 <_vfiprintf_r+0x1ac>
 80064e2:	9b03      	ldr	r3, [sp, #12]
 80064e4:	1d1a      	adds	r2, r3, #4
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	9203      	str	r2, [sp, #12]
 80064ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80064ee:	3402      	adds	r4, #2
 80064f0:	9305      	str	r3, [sp, #20]
 80064f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80065c8 <_vfiprintf_r+0x22c>
 80064f6:	7821      	ldrb	r1, [r4, #0]
 80064f8:	2203      	movs	r2, #3
 80064fa:	4650      	mov	r0, sl
 80064fc:	f7f9 fe68 	bl	80001d0 <memchr>
 8006500:	b138      	cbz	r0, 8006512 <_vfiprintf_r+0x176>
 8006502:	9b04      	ldr	r3, [sp, #16]
 8006504:	eba0 000a 	sub.w	r0, r0, sl
 8006508:	2240      	movs	r2, #64	@ 0x40
 800650a:	4082      	lsls	r2, r0
 800650c:	4313      	orrs	r3, r2
 800650e:	3401      	adds	r4, #1
 8006510:	9304      	str	r3, [sp, #16]
 8006512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006516:	4829      	ldr	r0, [pc, #164]	@ (80065bc <_vfiprintf_r+0x220>)
 8006518:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800651c:	2206      	movs	r2, #6
 800651e:	f7f9 fe57 	bl	80001d0 <memchr>
 8006522:	2800      	cmp	r0, #0
 8006524:	d03f      	beq.n	80065a6 <_vfiprintf_r+0x20a>
 8006526:	4b26      	ldr	r3, [pc, #152]	@ (80065c0 <_vfiprintf_r+0x224>)
 8006528:	bb1b      	cbnz	r3, 8006572 <_vfiprintf_r+0x1d6>
 800652a:	9b03      	ldr	r3, [sp, #12]
 800652c:	3307      	adds	r3, #7
 800652e:	f023 0307 	bic.w	r3, r3, #7
 8006532:	3308      	adds	r3, #8
 8006534:	9303      	str	r3, [sp, #12]
 8006536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006538:	443b      	add	r3, r7
 800653a:	9309      	str	r3, [sp, #36]	@ 0x24
 800653c:	e76a      	b.n	8006414 <_vfiprintf_r+0x78>
 800653e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006542:	460c      	mov	r4, r1
 8006544:	2001      	movs	r0, #1
 8006546:	e7a8      	b.n	800649a <_vfiprintf_r+0xfe>
 8006548:	2300      	movs	r3, #0
 800654a:	3401      	adds	r4, #1
 800654c:	9305      	str	r3, [sp, #20]
 800654e:	4619      	mov	r1, r3
 8006550:	f04f 0c0a 	mov.w	ip, #10
 8006554:	4620      	mov	r0, r4
 8006556:	f810 2b01 	ldrb.w	r2, [r0], #1
 800655a:	3a30      	subs	r2, #48	@ 0x30
 800655c:	2a09      	cmp	r2, #9
 800655e:	d903      	bls.n	8006568 <_vfiprintf_r+0x1cc>
 8006560:	2b00      	cmp	r3, #0
 8006562:	d0c6      	beq.n	80064f2 <_vfiprintf_r+0x156>
 8006564:	9105      	str	r1, [sp, #20]
 8006566:	e7c4      	b.n	80064f2 <_vfiprintf_r+0x156>
 8006568:	fb0c 2101 	mla	r1, ip, r1, r2
 800656c:	4604      	mov	r4, r0
 800656e:	2301      	movs	r3, #1
 8006570:	e7f0      	b.n	8006554 <_vfiprintf_r+0x1b8>
 8006572:	ab03      	add	r3, sp, #12
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	462a      	mov	r2, r5
 8006578:	4b12      	ldr	r3, [pc, #72]	@ (80065c4 <_vfiprintf_r+0x228>)
 800657a:	a904      	add	r1, sp, #16
 800657c:	4630      	mov	r0, r6
 800657e:	f3af 8000 	nop.w
 8006582:	4607      	mov	r7, r0
 8006584:	1c78      	adds	r0, r7, #1
 8006586:	d1d6      	bne.n	8006536 <_vfiprintf_r+0x19a>
 8006588:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800658a:	07d9      	lsls	r1, r3, #31
 800658c:	d405      	bmi.n	800659a <_vfiprintf_r+0x1fe>
 800658e:	89ab      	ldrh	r3, [r5, #12]
 8006590:	059a      	lsls	r2, r3, #22
 8006592:	d402      	bmi.n	800659a <_vfiprintf_r+0x1fe>
 8006594:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006596:	f7ff fc77 	bl	8005e88 <__retarget_lock_release_recursive>
 800659a:	89ab      	ldrh	r3, [r5, #12]
 800659c:	065b      	lsls	r3, r3, #25
 800659e:	f53f af1f 	bmi.w	80063e0 <_vfiprintf_r+0x44>
 80065a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065a4:	e71e      	b.n	80063e4 <_vfiprintf_r+0x48>
 80065a6:	ab03      	add	r3, sp, #12
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	462a      	mov	r2, r5
 80065ac:	4b05      	ldr	r3, [pc, #20]	@ (80065c4 <_vfiprintf_r+0x228>)
 80065ae:	a904      	add	r1, sp, #16
 80065b0:	4630      	mov	r0, r6
 80065b2:	f000 f879 	bl	80066a8 <_printf_i>
 80065b6:	e7e4      	b.n	8006582 <_vfiprintf_r+0x1e6>
 80065b8:	080080f8 	.word	0x080080f8
 80065bc:	08008102 	.word	0x08008102
 80065c0:	00000000 	.word	0x00000000
 80065c4:	08006377 	.word	0x08006377
 80065c8:	080080fe 	.word	0x080080fe

080065cc <_printf_common>:
 80065cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065d0:	4616      	mov	r6, r2
 80065d2:	4698      	mov	r8, r3
 80065d4:	688a      	ldr	r2, [r1, #8]
 80065d6:	690b      	ldr	r3, [r1, #16]
 80065d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80065dc:	4293      	cmp	r3, r2
 80065de:	bfb8      	it	lt
 80065e0:	4613      	movlt	r3, r2
 80065e2:	6033      	str	r3, [r6, #0]
 80065e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80065e8:	4607      	mov	r7, r0
 80065ea:	460c      	mov	r4, r1
 80065ec:	b10a      	cbz	r2, 80065f2 <_printf_common+0x26>
 80065ee:	3301      	adds	r3, #1
 80065f0:	6033      	str	r3, [r6, #0]
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	0699      	lsls	r1, r3, #26
 80065f6:	bf42      	ittt	mi
 80065f8:	6833      	ldrmi	r3, [r6, #0]
 80065fa:	3302      	addmi	r3, #2
 80065fc:	6033      	strmi	r3, [r6, #0]
 80065fe:	6825      	ldr	r5, [r4, #0]
 8006600:	f015 0506 	ands.w	r5, r5, #6
 8006604:	d106      	bne.n	8006614 <_printf_common+0x48>
 8006606:	f104 0a19 	add.w	sl, r4, #25
 800660a:	68e3      	ldr	r3, [r4, #12]
 800660c:	6832      	ldr	r2, [r6, #0]
 800660e:	1a9b      	subs	r3, r3, r2
 8006610:	42ab      	cmp	r3, r5
 8006612:	dc26      	bgt.n	8006662 <_printf_common+0x96>
 8006614:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006618:	6822      	ldr	r2, [r4, #0]
 800661a:	3b00      	subs	r3, #0
 800661c:	bf18      	it	ne
 800661e:	2301      	movne	r3, #1
 8006620:	0692      	lsls	r2, r2, #26
 8006622:	d42b      	bmi.n	800667c <_printf_common+0xb0>
 8006624:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006628:	4641      	mov	r1, r8
 800662a:	4638      	mov	r0, r7
 800662c:	47c8      	blx	r9
 800662e:	3001      	adds	r0, #1
 8006630:	d01e      	beq.n	8006670 <_printf_common+0xa4>
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	6922      	ldr	r2, [r4, #16]
 8006636:	f003 0306 	and.w	r3, r3, #6
 800663a:	2b04      	cmp	r3, #4
 800663c:	bf02      	ittt	eq
 800663e:	68e5      	ldreq	r5, [r4, #12]
 8006640:	6833      	ldreq	r3, [r6, #0]
 8006642:	1aed      	subeq	r5, r5, r3
 8006644:	68a3      	ldr	r3, [r4, #8]
 8006646:	bf0c      	ite	eq
 8006648:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800664c:	2500      	movne	r5, #0
 800664e:	4293      	cmp	r3, r2
 8006650:	bfc4      	itt	gt
 8006652:	1a9b      	subgt	r3, r3, r2
 8006654:	18ed      	addgt	r5, r5, r3
 8006656:	2600      	movs	r6, #0
 8006658:	341a      	adds	r4, #26
 800665a:	42b5      	cmp	r5, r6
 800665c:	d11a      	bne.n	8006694 <_printf_common+0xc8>
 800665e:	2000      	movs	r0, #0
 8006660:	e008      	b.n	8006674 <_printf_common+0xa8>
 8006662:	2301      	movs	r3, #1
 8006664:	4652      	mov	r2, sl
 8006666:	4641      	mov	r1, r8
 8006668:	4638      	mov	r0, r7
 800666a:	47c8      	blx	r9
 800666c:	3001      	adds	r0, #1
 800666e:	d103      	bne.n	8006678 <_printf_common+0xac>
 8006670:	f04f 30ff 	mov.w	r0, #4294967295
 8006674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006678:	3501      	adds	r5, #1
 800667a:	e7c6      	b.n	800660a <_printf_common+0x3e>
 800667c:	18e1      	adds	r1, r4, r3
 800667e:	1c5a      	adds	r2, r3, #1
 8006680:	2030      	movs	r0, #48	@ 0x30
 8006682:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006686:	4422      	add	r2, r4
 8006688:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800668c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006690:	3302      	adds	r3, #2
 8006692:	e7c7      	b.n	8006624 <_printf_common+0x58>
 8006694:	2301      	movs	r3, #1
 8006696:	4622      	mov	r2, r4
 8006698:	4641      	mov	r1, r8
 800669a:	4638      	mov	r0, r7
 800669c:	47c8      	blx	r9
 800669e:	3001      	adds	r0, #1
 80066a0:	d0e6      	beq.n	8006670 <_printf_common+0xa4>
 80066a2:	3601      	adds	r6, #1
 80066a4:	e7d9      	b.n	800665a <_printf_common+0x8e>
	...

080066a8 <_printf_i>:
 80066a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066ac:	7e0f      	ldrb	r7, [r1, #24]
 80066ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80066b0:	2f78      	cmp	r7, #120	@ 0x78
 80066b2:	4691      	mov	r9, r2
 80066b4:	4680      	mov	r8, r0
 80066b6:	460c      	mov	r4, r1
 80066b8:	469a      	mov	sl, r3
 80066ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80066be:	d807      	bhi.n	80066d0 <_printf_i+0x28>
 80066c0:	2f62      	cmp	r7, #98	@ 0x62
 80066c2:	d80a      	bhi.n	80066da <_printf_i+0x32>
 80066c4:	2f00      	cmp	r7, #0
 80066c6:	f000 80d2 	beq.w	800686e <_printf_i+0x1c6>
 80066ca:	2f58      	cmp	r7, #88	@ 0x58
 80066cc:	f000 80b9 	beq.w	8006842 <_printf_i+0x19a>
 80066d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80066d8:	e03a      	b.n	8006750 <_printf_i+0xa8>
 80066da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80066de:	2b15      	cmp	r3, #21
 80066e0:	d8f6      	bhi.n	80066d0 <_printf_i+0x28>
 80066e2:	a101      	add	r1, pc, #4	@ (adr r1, 80066e8 <_printf_i+0x40>)
 80066e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066e8:	08006741 	.word	0x08006741
 80066ec:	08006755 	.word	0x08006755
 80066f0:	080066d1 	.word	0x080066d1
 80066f4:	080066d1 	.word	0x080066d1
 80066f8:	080066d1 	.word	0x080066d1
 80066fc:	080066d1 	.word	0x080066d1
 8006700:	08006755 	.word	0x08006755
 8006704:	080066d1 	.word	0x080066d1
 8006708:	080066d1 	.word	0x080066d1
 800670c:	080066d1 	.word	0x080066d1
 8006710:	080066d1 	.word	0x080066d1
 8006714:	08006855 	.word	0x08006855
 8006718:	0800677f 	.word	0x0800677f
 800671c:	0800680f 	.word	0x0800680f
 8006720:	080066d1 	.word	0x080066d1
 8006724:	080066d1 	.word	0x080066d1
 8006728:	08006877 	.word	0x08006877
 800672c:	080066d1 	.word	0x080066d1
 8006730:	0800677f 	.word	0x0800677f
 8006734:	080066d1 	.word	0x080066d1
 8006738:	080066d1 	.word	0x080066d1
 800673c:	08006817 	.word	0x08006817
 8006740:	6833      	ldr	r3, [r6, #0]
 8006742:	1d1a      	adds	r2, r3, #4
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	6032      	str	r2, [r6, #0]
 8006748:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800674c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006750:	2301      	movs	r3, #1
 8006752:	e09d      	b.n	8006890 <_printf_i+0x1e8>
 8006754:	6833      	ldr	r3, [r6, #0]
 8006756:	6820      	ldr	r0, [r4, #0]
 8006758:	1d19      	adds	r1, r3, #4
 800675a:	6031      	str	r1, [r6, #0]
 800675c:	0606      	lsls	r6, r0, #24
 800675e:	d501      	bpl.n	8006764 <_printf_i+0xbc>
 8006760:	681d      	ldr	r5, [r3, #0]
 8006762:	e003      	b.n	800676c <_printf_i+0xc4>
 8006764:	0645      	lsls	r5, r0, #25
 8006766:	d5fb      	bpl.n	8006760 <_printf_i+0xb8>
 8006768:	f9b3 5000 	ldrsh.w	r5, [r3]
 800676c:	2d00      	cmp	r5, #0
 800676e:	da03      	bge.n	8006778 <_printf_i+0xd0>
 8006770:	232d      	movs	r3, #45	@ 0x2d
 8006772:	426d      	negs	r5, r5
 8006774:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006778:	4859      	ldr	r0, [pc, #356]	@ (80068e0 <_printf_i+0x238>)
 800677a:	230a      	movs	r3, #10
 800677c:	e011      	b.n	80067a2 <_printf_i+0xfa>
 800677e:	6821      	ldr	r1, [r4, #0]
 8006780:	6833      	ldr	r3, [r6, #0]
 8006782:	0608      	lsls	r0, r1, #24
 8006784:	f853 5b04 	ldr.w	r5, [r3], #4
 8006788:	d402      	bmi.n	8006790 <_printf_i+0xe8>
 800678a:	0649      	lsls	r1, r1, #25
 800678c:	bf48      	it	mi
 800678e:	b2ad      	uxthmi	r5, r5
 8006790:	2f6f      	cmp	r7, #111	@ 0x6f
 8006792:	4853      	ldr	r0, [pc, #332]	@ (80068e0 <_printf_i+0x238>)
 8006794:	6033      	str	r3, [r6, #0]
 8006796:	bf14      	ite	ne
 8006798:	230a      	movne	r3, #10
 800679a:	2308      	moveq	r3, #8
 800679c:	2100      	movs	r1, #0
 800679e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80067a2:	6866      	ldr	r6, [r4, #4]
 80067a4:	60a6      	str	r6, [r4, #8]
 80067a6:	2e00      	cmp	r6, #0
 80067a8:	bfa2      	ittt	ge
 80067aa:	6821      	ldrge	r1, [r4, #0]
 80067ac:	f021 0104 	bicge.w	r1, r1, #4
 80067b0:	6021      	strge	r1, [r4, #0]
 80067b2:	b90d      	cbnz	r5, 80067b8 <_printf_i+0x110>
 80067b4:	2e00      	cmp	r6, #0
 80067b6:	d04b      	beq.n	8006850 <_printf_i+0x1a8>
 80067b8:	4616      	mov	r6, r2
 80067ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80067be:	fb03 5711 	mls	r7, r3, r1, r5
 80067c2:	5dc7      	ldrb	r7, [r0, r7]
 80067c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80067c8:	462f      	mov	r7, r5
 80067ca:	42bb      	cmp	r3, r7
 80067cc:	460d      	mov	r5, r1
 80067ce:	d9f4      	bls.n	80067ba <_printf_i+0x112>
 80067d0:	2b08      	cmp	r3, #8
 80067d2:	d10b      	bne.n	80067ec <_printf_i+0x144>
 80067d4:	6823      	ldr	r3, [r4, #0]
 80067d6:	07df      	lsls	r7, r3, #31
 80067d8:	d508      	bpl.n	80067ec <_printf_i+0x144>
 80067da:	6923      	ldr	r3, [r4, #16]
 80067dc:	6861      	ldr	r1, [r4, #4]
 80067de:	4299      	cmp	r1, r3
 80067e0:	bfde      	ittt	le
 80067e2:	2330      	movle	r3, #48	@ 0x30
 80067e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80067ec:	1b92      	subs	r2, r2, r6
 80067ee:	6122      	str	r2, [r4, #16]
 80067f0:	f8cd a000 	str.w	sl, [sp]
 80067f4:	464b      	mov	r3, r9
 80067f6:	aa03      	add	r2, sp, #12
 80067f8:	4621      	mov	r1, r4
 80067fa:	4640      	mov	r0, r8
 80067fc:	f7ff fee6 	bl	80065cc <_printf_common>
 8006800:	3001      	adds	r0, #1
 8006802:	d14a      	bne.n	800689a <_printf_i+0x1f2>
 8006804:	f04f 30ff 	mov.w	r0, #4294967295
 8006808:	b004      	add	sp, #16
 800680a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800680e:	6823      	ldr	r3, [r4, #0]
 8006810:	f043 0320 	orr.w	r3, r3, #32
 8006814:	6023      	str	r3, [r4, #0]
 8006816:	4833      	ldr	r0, [pc, #204]	@ (80068e4 <_printf_i+0x23c>)
 8006818:	2778      	movs	r7, #120	@ 0x78
 800681a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800681e:	6823      	ldr	r3, [r4, #0]
 8006820:	6831      	ldr	r1, [r6, #0]
 8006822:	061f      	lsls	r7, r3, #24
 8006824:	f851 5b04 	ldr.w	r5, [r1], #4
 8006828:	d402      	bmi.n	8006830 <_printf_i+0x188>
 800682a:	065f      	lsls	r7, r3, #25
 800682c:	bf48      	it	mi
 800682e:	b2ad      	uxthmi	r5, r5
 8006830:	6031      	str	r1, [r6, #0]
 8006832:	07d9      	lsls	r1, r3, #31
 8006834:	bf44      	itt	mi
 8006836:	f043 0320 	orrmi.w	r3, r3, #32
 800683a:	6023      	strmi	r3, [r4, #0]
 800683c:	b11d      	cbz	r5, 8006846 <_printf_i+0x19e>
 800683e:	2310      	movs	r3, #16
 8006840:	e7ac      	b.n	800679c <_printf_i+0xf4>
 8006842:	4827      	ldr	r0, [pc, #156]	@ (80068e0 <_printf_i+0x238>)
 8006844:	e7e9      	b.n	800681a <_printf_i+0x172>
 8006846:	6823      	ldr	r3, [r4, #0]
 8006848:	f023 0320 	bic.w	r3, r3, #32
 800684c:	6023      	str	r3, [r4, #0]
 800684e:	e7f6      	b.n	800683e <_printf_i+0x196>
 8006850:	4616      	mov	r6, r2
 8006852:	e7bd      	b.n	80067d0 <_printf_i+0x128>
 8006854:	6833      	ldr	r3, [r6, #0]
 8006856:	6825      	ldr	r5, [r4, #0]
 8006858:	6961      	ldr	r1, [r4, #20]
 800685a:	1d18      	adds	r0, r3, #4
 800685c:	6030      	str	r0, [r6, #0]
 800685e:	062e      	lsls	r6, r5, #24
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	d501      	bpl.n	8006868 <_printf_i+0x1c0>
 8006864:	6019      	str	r1, [r3, #0]
 8006866:	e002      	b.n	800686e <_printf_i+0x1c6>
 8006868:	0668      	lsls	r0, r5, #25
 800686a:	d5fb      	bpl.n	8006864 <_printf_i+0x1bc>
 800686c:	8019      	strh	r1, [r3, #0]
 800686e:	2300      	movs	r3, #0
 8006870:	6123      	str	r3, [r4, #16]
 8006872:	4616      	mov	r6, r2
 8006874:	e7bc      	b.n	80067f0 <_printf_i+0x148>
 8006876:	6833      	ldr	r3, [r6, #0]
 8006878:	1d1a      	adds	r2, r3, #4
 800687a:	6032      	str	r2, [r6, #0]
 800687c:	681e      	ldr	r6, [r3, #0]
 800687e:	6862      	ldr	r2, [r4, #4]
 8006880:	2100      	movs	r1, #0
 8006882:	4630      	mov	r0, r6
 8006884:	f7f9 fca4 	bl	80001d0 <memchr>
 8006888:	b108      	cbz	r0, 800688e <_printf_i+0x1e6>
 800688a:	1b80      	subs	r0, r0, r6
 800688c:	6060      	str	r0, [r4, #4]
 800688e:	6863      	ldr	r3, [r4, #4]
 8006890:	6123      	str	r3, [r4, #16]
 8006892:	2300      	movs	r3, #0
 8006894:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006898:	e7aa      	b.n	80067f0 <_printf_i+0x148>
 800689a:	6923      	ldr	r3, [r4, #16]
 800689c:	4632      	mov	r2, r6
 800689e:	4649      	mov	r1, r9
 80068a0:	4640      	mov	r0, r8
 80068a2:	47d0      	blx	sl
 80068a4:	3001      	adds	r0, #1
 80068a6:	d0ad      	beq.n	8006804 <_printf_i+0x15c>
 80068a8:	6823      	ldr	r3, [r4, #0]
 80068aa:	079b      	lsls	r3, r3, #30
 80068ac:	d413      	bmi.n	80068d6 <_printf_i+0x22e>
 80068ae:	68e0      	ldr	r0, [r4, #12]
 80068b0:	9b03      	ldr	r3, [sp, #12]
 80068b2:	4298      	cmp	r0, r3
 80068b4:	bfb8      	it	lt
 80068b6:	4618      	movlt	r0, r3
 80068b8:	e7a6      	b.n	8006808 <_printf_i+0x160>
 80068ba:	2301      	movs	r3, #1
 80068bc:	4632      	mov	r2, r6
 80068be:	4649      	mov	r1, r9
 80068c0:	4640      	mov	r0, r8
 80068c2:	47d0      	blx	sl
 80068c4:	3001      	adds	r0, #1
 80068c6:	d09d      	beq.n	8006804 <_printf_i+0x15c>
 80068c8:	3501      	adds	r5, #1
 80068ca:	68e3      	ldr	r3, [r4, #12]
 80068cc:	9903      	ldr	r1, [sp, #12]
 80068ce:	1a5b      	subs	r3, r3, r1
 80068d0:	42ab      	cmp	r3, r5
 80068d2:	dcf2      	bgt.n	80068ba <_printf_i+0x212>
 80068d4:	e7eb      	b.n	80068ae <_printf_i+0x206>
 80068d6:	2500      	movs	r5, #0
 80068d8:	f104 0619 	add.w	r6, r4, #25
 80068dc:	e7f5      	b.n	80068ca <_printf_i+0x222>
 80068de:	bf00      	nop
 80068e0:	08008109 	.word	0x08008109
 80068e4:	0800811a 	.word	0x0800811a

080068e8 <__sflush_r>:
 80068e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80068ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068f0:	0716      	lsls	r6, r2, #28
 80068f2:	4605      	mov	r5, r0
 80068f4:	460c      	mov	r4, r1
 80068f6:	d454      	bmi.n	80069a2 <__sflush_r+0xba>
 80068f8:	684b      	ldr	r3, [r1, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	dc02      	bgt.n	8006904 <__sflush_r+0x1c>
 80068fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006900:	2b00      	cmp	r3, #0
 8006902:	dd48      	ble.n	8006996 <__sflush_r+0xae>
 8006904:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006906:	2e00      	cmp	r6, #0
 8006908:	d045      	beq.n	8006996 <__sflush_r+0xae>
 800690a:	2300      	movs	r3, #0
 800690c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006910:	682f      	ldr	r7, [r5, #0]
 8006912:	6a21      	ldr	r1, [r4, #32]
 8006914:	602b      	str	r3, [r5, #0]
 8006916:	d030      	beq.n	800697a <__sflush_r+0x92>
 8006918:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800691a:	89a3      	ldrh	r3, [r4, #12]
 800691c:	0759      	lsls	r1, r3, #29
 800691e:	d505      	bpl.n	800692c <__sflush_r+0x44>
 8006920:	6863      	ldr	r3, [r4, #4]
 8006922:	1ad2      	subs	r2, r2, r3
 8006924:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006926:	b10b      	cbz	r3, 800692c <__sflush_r+0x44>
 8006928:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800692a:	1ad2      	subs	r2, r2, r3
 800692c:	2300      	movs	r3, #0
 800692e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006930:	6a21      	ldr	r1, [r4, #32]
 8006932:	4628      	mov	r0, r5
 8006934:	47b0      	blx	r6
 8006936:	1c43      	adds	r3, r0, #1
 8006938:	89a3      	ldrh	r3, [r4, #12]
 800693a:	d106      	bne.n	800694a <__sflush_r+0x62>
 800693c:	6829      	ldr	r1, [r5, #0]
 800693e:	291d      	cmp	r1, #29
 8006940:	d82b      	bhi.n	800699a <__sflush_r+0xb2>
 8006942:	4a2a      	ldr	r2, [pc, #168]	@ (80069ec <__sflush_r+0x104>)
 8006944:	410a      	asrs	r2, r1
 8006946:	07d6      	lsls	r6, r2, #31
 8006948:	d427      	bmi.n	800699a <__sflush_r+0xb2>
 800694a:	2200      	movs	r2, #0
 800694c:	6062      	str	r2, [r4, #4]
 800694e:	04d9      	lsls	r1, r3, #19
 8006950:	6922      	ldr	r2, [r4, #16]
 8006952:	6022      	str	r2, [r4, #0]
 8006954:	d504      	bpl.n	8006960 <__sflush_r+0x78>
 8006956:	1c42      	adds	r2, r0, #1
 8006958:	d101      	bne.n	800695e <__sflush_r+0x76>
 800695a:	682b      	ldr	r3, [r5, #0]
 800695c:	b903      	cbnz	r3, 8006960 <__sflush_r+0x78>
 800695e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006960:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006962:	602f      	str	r7, [r5, #0]
 8006964:	b1b9      	cbz	r1, 8006996 <__sflush_r+0xae>
 8006966:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800696a:	4299      	cmp	r1, r3
 800696c:	d002      	beq.n	8006974 <__sflush_r+0x8c>
 800696e:	4628      	mov	r0, r5
 8006970:	f7ff fa9a 	bl	8005ea8 <_free_r>
 8006974:	2300      	movs	r3, #0
 8006976:	6363      	str	r3, [r4, #52]	@ 0x34
 8006978:	e00d      	b.n	8006996 <__sflush_r+0xae>
 800697a:	2301      	movs	r3, #1
 800697c:	4628      	mov	r0, r5
 800697e:	47b0      	blx	r6
 8006980:	4602      	mov	r2, r0
 8006982:	1c50      	adds	r0, r2, #1
 8006984:	d1c9      	bne.n	800691a <__sflush_r+0x32>
 8006986:	682b      	ldr	r3, [r5, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d0c6      	beq.n	800691a <__sflush_r+0x32>
 800698c:	2b1d      	cmp	r3, #29
 800698e:	d001      	beq.n	8006994 <__sflush_r+0xac>
 8006990:	2b16      	cmp	r3, #22
 8006992:	d11e      	bne.n	80069d2 <__sflush_r+0xea>
 8006994:	602f      	str	r7, [r5, #0]
 8006996:	2000      	movs	r0, #0
 8006998:	e022      	b.n	80069e0 <__sflush_r+0xf8>
 800699a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800699e:	b21b      	sxth	r3, r3
 80069a0:	e01b      	b.n	80069da <__sflush_r+0xf2>
 80069a2:	690f      	ldr	r7, [r1, #16]
 80069a4:	2f00      	cmp	r7, #0
 80069a6:	d0f6      	beq.n	8006996 <__sflush_r+0xae>
 80069a8:	0793      	lsls	r3, r2, #30
 80069aa:	680e      	ldr	r6, [r1, #0]
 80069ac:	bf08      	it	eq
 80069ae:	694b      	ldreq	r3, [r1, #20]
 80069b0:	600f      	str	r7, [r1, #0]
 80069b2:	bf18      	it	ne
 80069b4:	2300      	movne	r3, #0
 80069b6:	eba6 0807 	sub.w	r8, r6, r7
 80069ba:	608b      	str	r3, [r1, #8]
 80069bc:	f1b8 0f00 	cmp.w	r8, #0
 80069c0:	dde9      	ble.n	8006996 <__sflush_r+0xae>
 80069c2:	6a21      	ldr	r1, [r4, #32]
 80069c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80069c6:	4643      	mov	r3, r8
 80069c8:	463a      	mov	r2, r7
 80069ca:	4628      	mov	r0, r5
 80069cc:	47b0      	blx	r6
 80069ce:	2800      	cmp	r0, #0
 80069d0:	dc08      	bgt.n	80069e4 <__sflush_r+0xfc>
 80069d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069da:	81a3      	strh	r3, [r4, #12]
 80069dc:	f04f 30ff 	mov.w	r0, #4294967295
 80069e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069e4:	4407      	add	r7, r0
 80069e6:	eba8 0800 	sub.w	r8, r8, r0
 80069ea:	e7e7      	b.n	80069bc <__sflush_r+0xd4>
 80069ec:	dfbffffe 	.word	0xdfbffffe

080069f0 <_fflush_r>:
 80069f0:	b538      	push	{r3, r4, r5, lr}
 80069f2:	690b      	ldr	r3, [r1, #16]
 80069f4:	4605      	mov	r5, r0
 80069f6:	460c      	mov	r4, r1
 80069f8:	b913      	cbnz	r3, 8006a00 <_fflush_r+0x10>
 80069fa:	2500      	movs	r5, #0
 80069fc:	4628      	mov	r0, r5
 80069fe:	bd38      	pop	{r3, r4, r5, pc}
 8006a00:	b118      	cbz	r0, 8006a0a <_fflush_r+0x1a>
 8006a02:	6a03      	ldr	r3, [r0, #32]
 8006a04:	b90b      	cbnz	r3, 8006a0a <_fflush_r+0x1a>
 8006a06:	f7ff f80d 	bl	8005a24 <__sinit>
 8006a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d0f3      	beq.n	80069fa <_fflush_r+0xa>
 8006a12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a14:	07d0      	lsls	r0, r2, #31
 8006a16:	d404      	bmi.n	8006a22 <_fflush_r+0x32>
 8006a18:	0599      	lsls	r1, r3, #22
 8006a1a:	d402      	bmi.n	8006a22 <_fflush_r+0x32>
 8006a1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a1e:	f7ff fa32 	bl	8005e86 <__retarget_lock_acquire_recursive>
 8006a22:	4628      	mov	r0, r5
 8006a24:	4621      	mov	r1, r4
 8006a26:	f7ff ff5f 	bl	80068e8 <__sflush_r>
 8006a2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a2c:	07da      	lsls	r2, r3, #31
 8006a2e:	4605      	mov	r5, r0
 8006a30:	d4e4      	bmi.n	80069fc <_fflush_r+0xc>
 8006a32:	89a3      	ldrh	r3, [r4, #12]
 8006a34:	059b      	lsls	r3, r3, #22
 8006a36:	d4e1      	bmi.n	80069fc <_fflush_r+0xc>
 8006a38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a3a:	f7ff fa25 	bl	8005e88 <__retarget_lock_release_recursive>
 8006a3e:	e7dd      	b.n	80069fc <_fflush_r+0xc>

08006a40 <__swhatbuf_r>:
 8006a40:	b570      	push	{r4, r5, r6, lr}
 8006a42:	460c      	mov	r4, r1
 8006a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a48:	2900      	cmp	r1, #0
 8006a4a:	b096      	sub	sp, #88	@ 0x58
 8006a4c:	4615      	mov	r5, r2
 8006a4e:	461e      	mov	r6, r3
 8006a50:	da0d      	bge.n	8006a6e <__swhatbuf_r+0x2e>
 8006a52:	89a3      	ldrh	r3, [r4, #12]
 8006a54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006a58:	f04f 0100 	mov.w	r1, #0
 8006a5c:	bf14      	ite	ne
 8006a5e:	2340      	movne	r3, #64	@ 0x40
 8006a60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006a64:	2000      	movs	r0, #0
 8006a66:	6031      	str	r1, [r6, #0]
 8006a68:	602b      	str	r3, [r5, #0]
 8006a6a:	b016      	add	sp, #88	@ 0x58
 8006a6c:	bd70      	pop	{r4, r5, r6, pc}
 8006a6e:	466a      	mov	r2, sp
 8006a70:	f000 f848 	bl	8006b04 <_fstat_r>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	dbec      	blt.n	8006a52 <__swhatbuf_r+0x12>
 8006a78:	9901      	ldr	r1, [sp, #4]
 8006a7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006a7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006a82:	4259      	negs	r1, r3
 8006a84:	4159      	adcs	r1, r3
 8006a86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a8a:	e7eb      	b.n	8006a64 <__swhatbuf_r+0x24>

08006a8c <__smakebuf_r>:
 8006a8c:	898b      	ldrh	r3, [r1, #12]
 8006a8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a90:	079d      	lsls	r5, r3, #30
 8006a92:	4606      	mov	r6, r0
 8006a94:	460c      	mov	r4, r1
 8006a96:	d507      	bpl.n	8006aa8 <__smakebuf_r+0x1c>
 8006a98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006a9c:	6023      	str	r3, [r4, #0]
 8006a9e:	6123      	str	r3, [r4, #16]
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	6163      	str	r3, [r4, #20]
 8006aa4:	b003      	add	sp, #12
 8006aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aa8:	ab01      	add	r3, sp, #4
 8006aaa:	466a      	mov	r2, sp
 8006aac:	f7ff ffc8 	bl	8006a40 <__swhatbuf_r>
 8006ab0:	9f00      	ldr	r7, [sp, #0]
 8006ab2:	4605      	mov	r5, r0
 8006ab4:	4639      	mov	r1, r7
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	f7ff fa62 	bl	8005f80 <_malloc_r>
 8006abc:	b948      	cbnz	r0, 8006ad2 <__smakebuf_r+0x46>
 8006abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ac2:	059a      	lsls	r2, r3, #22
 8006ac4:	d4ee      	bmi.n	8006aa4 <__smakebuf_r+0x18>
 8006ac6:	f023 0303 	bic.w	r3, r3, #3
 8006aca:	f043 0302 	orr.w	r3, r3, #2
 8006ace:	81a3      	strh	r3, [r4, #12]
 8006ad0:	e7e2      	b.n	8006a98 <__smakebuf_r+0xc>
 8006ad2:	89a3      	ldrh	r3, [r4, #12]
 8006ad4:	6020      	str	r0, [r4, #0]
 8006ad6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ada:	81a3      	strh	r3, [r4, #12]
 8006adc:	9b01      	ldr	r3, [sp, #4]
 8006ade:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006ae2:	b15b      	cbz	r3, 8006afc <__smakebuf_r+0x70>
 8006ae4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ae8:	4630      	mov	r0, r6
 8006aea:	f000 f81d 	bl	8006b28 <_isatty_r>
 8006aee:	b128      	cbz	r0, 8006afc <__smakebuf_r+0x70>
 8006af0:	89a3      	ldrh	r3, [r4, #12]
 8006af2:	f023 0303 	bic.w	r3, r3, #3
 8006af6:	f043 0301 	orr.w	r3, r3, #1
 8006afa:	81a3      	strh	r3, [r4, #12]
 8006afc:	89a3      	ldrh	r3, [r4, #12]
 8006afe:	431d      	orrs	r5, r3
 8006b00:	81a5      	strh	r5, [r4, #12]
 8006b02:	e7cf      	b.n	8006aa4 <__smakebuf_r+0x18>

08006b04 <_fstat_r>:
 8006b04:	b538      	push	{r3, r4, r5, lr}
 8006b06:	4d07      	ldr	r5, [pc, #28]	@ (8006b24 <_fstat_r+0x20>)
 8006b08:	2300      	movs	r3, #0
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	4608      	mov	r0, r1
 8006b0e:	4611      	mov	r1, r2
 8006b10:	602b      	str	r3, [r5, #0]
 8006b12:	f7fa fc2c 	bl	800136e <_fstat>
 8006b16:	1c43      	adds	r3, r0, #1
 8006b18:	d102      	bne.n	8006b20 <_fstat_r+0x1c>
 8006b1a:	682b      	ldr	r3, [r5, #0]
 8006b1c:	b103      	cbz	r3, 8006b20 <_fstat_r+0x1c>
 8006b1e:	6023      	str	r3, [r4, #0]
 8006b20:	bd38      	pop	{r3, r4, r5, pc}
 8006b22:	bf00      	nop
 8006b24:	20000710 	.word	0x20000710

08006b28 <_isatty_r>:
 8006b28:	b538      	push	{r3, r4, r5, lr}
 8006b2a:	4d06      	ldr	r5, [pc, #24]	@ (8006b44 <_isatty_r+0x1c>)
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	4604      	mov	r4, r0
 8006b30:	4608      	mov	r0, r1
 8006b32:	602b      	str	r3, [r5, #0]
 8006b34:	f7fa fc2b 	bl	800138e <_isatty>
 8006b38:	1c43      	adds	r3, r0, #1
 8006b3a:	d102      	bne.n	8006b42 <_isatty_r+0x1a>
 8006b3c:	682b      	ldr	r3, [r5, #0]
 8006b3e:	b103      	cbz	r3, 8006b42 <_isatty_r+0x1a>
 8006b40:	6023      	str	r3, [r4, #0]
 8006b42:	bd38      	pop	{r3, r4, r5, pc}
 8006b44:	20000710 	.word	0x20000710

08006b48 <_sbrk_r>:
 8006b48:	b538      	push	{r3, r4, r5, lr}
 8006b4a:	4d06      	ldr	r5, [pc, #24]	@ (8006b64 <_sbrk_r+0x1c>)
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	4604      	mov	r4, r0
 8006b50:	4608      	mov	r0, r1
 8006b52:	602b      	str	r3, [r5, #0]
 8006b54:	f7fa fc34 	bl	80013c0 <_sbrk>
 8006b58:	1c43      	adds	r3, r0, #1
 8006b5a:	d102      	bne.n	8006b62 <_sbrk_r+0x1a>
 8006b5c:	682b      	ldr	r3, [r5, #0]
 8006b5e:	b103      	cbz	r3, 8006b62 <_sbrk_r+0x1a>
 8006b60:	6023      	str	r3, [r4, #0]
 8006b62:	bd38      	pop	{r3, r4, r5, pc}
 8006b64:	20000710 	.word	0x20000710

08006b68 <_realloc_r>:
 8006b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b6c:	4680      	mov	r8, r0
 8006b6e:	4615      	mov	r5, r2
 8006b70:	460c      	mov	r4, r1
 8006b72:	b921      	cbnz	r1, 8006b7e <_realloc_r+0x16>
 8006b74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b78:	4611      	mov	r1, r2
 8006b7a:	f7ff ba01 	b.w	8005f80 <_malloc_r>
 8006b7e:	b92a      	cbnz	r2, 8006b8c <_realloc_r+0x24>
 8006b80:	f7ff f992 	bl	8005ea8 <_free_r>
 8006b84:	2400      	movs	r4, #0
 8006b86:	4620      	mov	r0, r4
 8006b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b8c:	f000 f81a 	bl	8006bc4 <_malloc_usable_size_r>
 8006b90:	4285      	cmp	r5, r0
 8006b92:	4606      	mov	r6, r0
 8006b94:	d802      	bhi.n	8006b9c <_realloc_r+0x34>
 8006b96:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006b9a:	d8f4      	bhi.n	8006b86 <_realloc_r+0x1e>
 8006b9c:	4629      	mov	r1, r5
 8006b9e:	4640      	mov	r0, r8
 8006ba0:	f7ff f9ee 	bl	8005f80 <_malloc_r>
 8006ba4:	4607      	mov	r7, r0
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	d0ec      	beq.n	8006b84 <_realloc_r+0x1c>
 8006baa:	42b5      	cmp	r5, r6
 8006bac:	462a      	mov	r2, r5
 8006bae:	4621      	mov	r1, r4
 8006bb0:	bf28      	it	cs
 8006bb2:	4632      	movcs	r2, r6
 8006bb4:	f7ff f969 	bl	8005e8a <memcpy>
 8006bb8:	4621      	mov	r1, r4
 8006bba:	4640      	mov	r0, r8
 8006bbc:	f7ff f974 	bl	8005ea8 <_free_r>
 8006bc0:	463c      	mov	r4, r7
 8006bc2:	e7e0      	b.n	8006b86 <_realloc_r+0x1e>

08006bc4 <_malloc_usable_size_r>:
 8006bc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bc8:	1f18      	subs	r0, r3, #4
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	bfbc      	itt	lt
 8006bce:	580b      	ldrlt	r3, [r1, r0]
 8006bd0:	18c0      	addlt	r0, r0, r3
 8006bd2:	4770      	bx	lr

08006bd4 <_init>:
 8006bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd6:	bf00      	nop
 8006bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bda:	bc08      	pop	{r3}
 8006bdc:	469e      	mov	lr, r3
 8006bde:	4770      	bx	lr

08006be0 <_fini>:
 8006be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be2:	bf00      	nop
 8006be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006be6:	bc08      	pop	{r3}
 8006be8:	469e      	mov	lr, r3
 8006bea:	4770      	bx	lr
