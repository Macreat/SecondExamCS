
SecondExamSource.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d78  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001428  08005f00  08005f00  00006f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007328  08007328  0000909c  2**0
                  CONTENTS
  4 .ARM          00000008  08007328  08007328  00008328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007330  08007330  0000909c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007330  08007330  00008330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007334  08007334  00008334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  08007338  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000680  2000009c  080073d4  0000909c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000071c  080073d4  0000971c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000118c5  00000000  00000000  000090cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b0b  00000000  00000000  0001a991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  0001d4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ba1  00000000  00000000  0001e3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d45  00000000  00000000  0001ef71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014075  00000000  00000000  00046cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000edade  00000000  00000000  0005ad2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00148809  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043e8  00000000  00000000  0014884c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0014cc34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000009c 	.word	0x2000009c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005ee8 	.word	0x08005ee8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a0 	.word	0x200000a0
 80001c4:	08005ee8 	.word	0x08005ee8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <keypad_debounce>:

#include "main.h"


static uint8_t keypad_debounce(uint16_t GPIO_Pin)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	80fb      	strh	r3, [r7, #6]
	 */
	//just managemente for DEBOUNCE delay
	static uint16_t last_pressed = 0xFFFF;
	static uint32_t last_tick = 0;

	if (last_pressed == GPIO_Pin) {
 80004c2:	4b0e      	ldr	r3, [pc, #56]	@ (80004fc <keypad_debounce+0x44>)
 80004c4:	881b      	ldrh	r3, [r3, #0]
 80004c6:	88fa      	ldrh	r2, [r7, #6]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	d109      	bne.n	80004e0 <keypad_debounce+0x28>
		if (HAL_GetTick() < (last_tick + 200)) {
 80004cc:	f000 fe9c 	bl	8001208 <HAL_GetTick>
 80004d0:	4602      	mov	r2, r0
 80004d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000500 <keypad_debounce+0x48>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	33c8      	adds	r3, #200	@ 0xc8
 80004d8:	429a      	cmp	r2, r3
 80004da:	d201      	bcs.n	80004e0 <keypad_debounce+0x28>
			return 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	e008      	b.n	80004f2 <keypad_debounce+0x3a>
		}
	}
	last_pressed = GPIO_Pin;
 80004e0:	4a06      	ldr	r2, [pc, #24]	@ (80004fc <keypad_debounce+0x44>)
 80004e2:	88fb      	ldrh	r3, [r7, #6]
 80004e4:	8013      	strh	r3, [r2, #0]
	last_tick = HAL_GetTick();
 80004e6:	f000 fe8f 	bl	8001208 <HAL_GetTick>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4a04      	ldr	r2, [pc, #16]	@ (8000500 <keypad_debounce+0x48>)
 80004ee:	6013      	str	r3, [r2, #0]

	return 1;
 80004f0:	2301      	movs	r3, #1
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000010 	.word	0x20000010
 8000500:	200000b8 	.word	0x200000b8

08000504 <keypad_scan_row>:
If a key press is detected, the function returns the row number where the key was pressed.
 *
 *
 */
uint8_t keypad_scan_row(GPIO_TypeDef *COLx_GPIO_Port, uint16_t COLx_Pin)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	460b      	mov	r3, r1
 800050e:	807b      	strh	r3, [r7, #2]
	uint8_t row_pressed = 0xFF;
 8000510:	23ff      	movs	r3, #255	@ 0xff
 8000512:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	2180      	movs	r1, #128	@ 0x80
 8000518:	4830      	ldr	r0, [pc, #192]	@ (80005dc <keypad_scan_row+0xd8>)
 800051a:	f001 f9f7 	bl	800190c <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLx_GPIO_Port, COLx_Pin) == 0) {
 800051e:	887b      	ldrh	r3, [r7, #2]
 8000520:	4619      	mov	r1, r3
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f001 f9da 	bl	80018dc <HAL_GPIO_ReadPin>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d102      	bne.n	8000534 <keypad_scan_row+0x30>
		row_pressed =  1;
 800052e:	2301      	movs	r3, #1
 8000530:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 8000532:	e035      	b.n	80005a0 <keypad_scan_row+0x9c>
	}
	HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, GPIO_PIN_RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800053a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800053e:	f001 f9e5 	bl	800190c <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLx_GPIO_Port, COLx_Pin) == 0) {
 8000542:	887b      	ldrh	r3, [r7, #2]
 8000544:	4619      	mov	r1, r3
 8000546:	6878      	ldr	r0, [r7, #4]
 8000548:	f001 f9c8 	bl	80018dc <HAL_GPIO_ReadPin>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d102      	bne.n	8000558 <keypad_scan_row+0x54>
		row_pressed =  2;
 8000552:	2302      	movs	r3, #2
 8000554:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 8000556:	e023      	b.n	80005a0 <keypad_scan_row+0x9c>
	}
	HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800055e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000562:	f001 f9d3 	bl	800190c <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLx_GPIO_Port, COLx_Pin) == 0) {
 8000566:	887b      	ldrh	r3, [r7, #2]
 8000568:	4619      	mov	r1, r3
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f001 f9b6 	bl	80018dc <HAL_GPIO_ReadPin>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d102      	bne.n	800057c <keypad_scan_row+0x78>
		row_pressed =  3;
 8000576:	2303      	movs	r3, #3
 8000578:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 800057a:	e011      	b.n	80005a0 <keypad_scan_row+0x9c>
	}
	HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000582:	4817      	ldr	r0, [pc, #92]	@ (80005e0 <keypad_scan_row+0xdc>)
 8000584:	f001 f9c2 	bl	800190c <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLx_GPIO_Port, COLx_Pin) == 0) {
 8000588:	887b      	ldrh	r3, [r7, #2]
 800058a:	4619      	mov	r1, r3
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f001 f9a5 	bl	80018dc <HAL_GPIO_ReadPin>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d102      	bne.n	800059e <keypad_scan_row+0x9a>
		row_pressed =  4;
 8000598:	2304      	movs	r3, #4
 800059a:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 800059c:	e000      	b.n	80005a0 <keypad_scan_row+0x9c>
	}
row_scan_end:
 800059e:	bf00      	nop
	HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2180      	movs	r1, #128	@ 0x80
 80005a4:	480d      	ldr	r0, [pc, #52]	@ (80005dc <keypad_scan_row+0xd8>)
 80005a6:	f001 f9b1 	bl	800190c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, GPIO_PIN_SET);
 80005aa:	2201      	movs	r2, #1
 80005ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005b4:	f001 f9aa 	bl	800190c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, GPIO_PIN_SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c2:	f001 f9a3 	bl	800190c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, GPIO_PIN_SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005cc:	4804      	ldr	r0, [pc, #16]	@ (80005e0 <keypad_scan_row+0xdc>)
 80005ce:	f001 f99d 	bl	800190c <HAL_GPIO_WritePin>
	return row_pressed; // not detected
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	48000800 	.word	0x48000800
 80005e0:	48000400 	.word	0x48000400

080005e4 <keypad_scan>:
 *
 *
 *
 */
uint8_t keypad_scan(uint16_t GPIO_Pin)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	80fb      	strh	r3, [r7, #6]
	uint8_t key_pressed = 0xFF;
 80005ee:	23ff      	movs	r3, #255	@ 0xff
 80005f0:	73fb      	strb	r3, [r7, #15]

	if (keypad_debounce(GPIO_Pin) == 0) { // to ensure the press is valid,
 80005f2:	88fb      	ldrh	r3, [r7, #6]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ff5f 	bl	80004b8 <keypad_debounce>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d101      	bne.n	8000604 <keypad_scan+0x20>
		return key_pressed;
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	e04b      	b.n	800069c <keypad_scan+0xb8>
	}
	uint8_t row = 0xFF;
 8000604:	23ff      	movs	r3, #255	@ 0xff
 8000606:	73bb      	strb	r3, [r7, #14]
	switch (GPIO_Pin) {
 8000608:	88fb      	ldrh	r3, [r7, #6]
 800060a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800060e:	d033      	beq.n	8000678 <keypad_scan+0x94>
 8000610:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000614:	dc40      	bgt.n	8000698 <keypad_scan+0xb4>
 8000616:	2b20      	cmp	r3, #32
 8000618:	d012      	beq.n	8000640 <keypad_scan+0x5c>
 800061a:	2b20      	cmp	r3, #32
 800061c:	dc3c      	bgt.n	8000698 <keypad_scan+0xb4>
 800061e:	2b08      	cmp	r3, #8
 8000620:	d01c      	beq.n	800065c <keypad_scan+0x78>
 8000622:	2b10      	cmp	r3, #16
 8000624:	d138      	bne.n	8000698 <keypad_scan+0xb4>
	case COL_1_Pin:
		row = keypad_scan_row(COL_1_GPIO_Port, COL_1_Pin);
 8000626:	2110      	movs	r1, #16
 8000628:	481e      	ldr	r0, [pc, #120]	@ (80006a4 <keypad_scan+0xc0>)
 800062a:	f7ff ff6b 	bl	8000504 <keypad_scan_row>
 800062e:	4603      	mov	r3, r0
 8000630:	73bb      	strb	r3, [r7, #14]
		key_pressed = keypad_chars[row - 1][1 - 1];
 8000632:	7bbb      	ldrb	r3, [r7, #14]
 8000634:	3b01      	subs	r3, #1
 8000636:	4a1c      	ldr	r2, [pc, #112]	@ (80006a8 <keypad_scan+0xc4>)
 8000638:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800063c:	73fb      	strb	r3, [r7, #15]
		break;
 800063e:	e02c      	b.n	800069a <keypad_scan+0xb6>

	case COL_2_Pin:
		row = keypad_scan_row(COL_2_GPIO_Port, COL_2_Pin);
 8000640:	2120      	movs	r1, #32
 8000642:	4818      	ldr	r0, [pc, #96]	@ (80006a4 <keypad_scan+0xc0>)
 8000644:	f7ff ff5e 	bl	8000504 <keypad_scan_row>
 8000648:	4603      	mov	r3, r0
 800064a:	73bb      	strb	r3, [r7, #14]
		key_pressed = keypad_chars[row - 1][2 - 1];
 800064c:	7bbb      	ldrb	r3, [r7, #14]
 800064e:	3b01      	subs	r3, #1
 8000650:	4a15      	ldr	r2, [pc, #84]	@ (80006a8 <keypad_scan+0xc4>)
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	4413      	add	r3, r2
 8000656:	785b      	ldrb	r3, [r3, #1]
 8000658:	73fb      	strb	r3, [r7, #15]
		break;
 800065a:	e01e      	b.n	800069a <keypad_scan+0xb6>

	case COL_3_Pin:
			row = keypad_scan_row(COL_3_GPIO_Port, COL_3_Pin);
 800065c:	2108      	movs	r1, #8
 800065e:	4811      	ldr	r0, [pc, #68]	@ (80006a4 <keypad_scan+0xc0>)
 8000660:	f7ff ff50 	bl	8000504 <keypad_scan_row>
 8000664:	4603      	mov	r3, r0
 8000666:	73bb      	strb	r3, [r7, #14]
			key_pressed = keypad_chars[row - 1][3 - 1];
 8000668:	7bbb      	ldrb	r3, [r7, #14]
 800066a:	3b01      	subs	r3, #1
 800066c:	4a0e      	ldr	r2, [pc, #56]	@ (80006a8 <keypad_scan+0xc4>)
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	4413      	add	r3, r2
 8000672:	789b      	ldrb	r3, [r3, #2]
 8000674:	73fb      	strb	r3, [r7, #15]
			break;
 8000676:	e010      	b.n	800069a <keypad_scan+0xb6>

	case COL_4_Pin:
			row = keypad_scan_row(COL_4_GPIO_Port, COL_4_Pin);
 8000678:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800067c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000680:	f7ff ff40 	bl	8000504 <keypad_scan_row>
 8000684:	4603      	mov	r3, r0
 8000686:	73bb      	strb	r3, [r7, #14]
			key_pressed = keypad_chars[row - 1][4 - 1];
 8000688:	7bbb      	ldrb	r3, [r7, #14]
 800068a:	3b01      	subs	r3, #1
 800068c:	4a06      	ldr	r2, [pc, #24]	@ (80006a8 <keypad_scan+0xc4>)
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	4413      	add	r3, r2
 8000692:	78db      	ldrb	r3, [r3, #3]
 8000694:	73fb      	strb	r3, [r7, #15]
			break;
 8000696:	e000      	b.n	800069a <keypad_scan+0xb6>
	default:
		break;
 8000698:	bf00      	nop
	}
	return key_pressed;
 800069a:	7bfb      	ldrb	r3, [r7, #15]
}
 800069c:	4618      	mov	r0, r3
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	48000400 	.word	0x48000400
 80006a8:	20000000 	.word	0x20000000

080006ac <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// weak function to transmit via UART
int _write(int file, char *ptr, int len)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	230a      	movs	r3, #10
 80006be:	68b9      	ldr	r1, [r7, #8]
 80006c0:	4803      	ldr	r0, [pc, #12]	@ (80006d0 <_write+0x24>)
 80006c2:	f003 f991 	bl	80039e8 <HAL_UART_Transmit>
  return len;
 80006c6:	687b      	ldr	r3, [r7, #4]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000110 	.word	0x20000110

080006d4 <HAL_UART_RxCpltCallback>:

// implementing reception callback for USART entrys
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  /* Data received in USART2 */
  if (huart->Instance == USART2)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a1a      	ldr	r2, [pc, #104]	@ (800074c <HAL_UART_RxCpltCallback+0x78>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d12d      	bne.n	8000742 <HAL_UART_RxCpltCallback+0x6e>
  {
    // selecting of arithmetic operation (2COND REQUIREMENT)
    if (usart2_data == '+' || usart2_data == '-' || usart2_data == '*' || usart2_data == '/')
 80006e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000750 <HAL_UART_RxCpltCallback+0x7c>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b2b      	cmp	r3, #43	@ 0x2b
 80006ec:	d00b      	beq.n	8000706 <HAL_UART_RxCpltCallback+0x32>
 80006ee:	4b18      	ldr	r3, [pc, #96]	@ (8000750 <HAL_UART_RxCpltCallback+0x7c>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b2d      	cmp	r3, #45	@ 0x2d
 80006f4:	d007      	beq.n	8000706 <HAL_UART_RxCpltCallback+0x32>
 80006f6:	4b16      	ldr	r3, [pc, #88]	@ (8000750 <HAL_UART_RxCpltCallback+0x7c>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80006fc:	d003      	beq.n	8000706 <HAL_UART_RxCpltCallback+0x32>
 80006fe:	4b14      	ldr	r3, [pc, #80]	@ (8000750 <HAL_UART_RxCpltCallback+0x7c>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b2f      	cmp	r3, #47	@ 0x2f
 8000704:	d118      	bne.n	8000738 <HAL_UART_RxCpltCallback+0x64>
    {
      usart2_data_ready = 1;
 8000706:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <HAL_UART_RxCpltCallback+0x80>)
 8000708:	2201      	movs	r2, #1
 800070a:	701a      	strb	r2, [r3, #0]
      ring_buffer_write(&usart2_rb, usart2_data);
 800070c:	4b10      	ldr	r3, [pc, #64]	@ (8000750 <HAL_UART_RxCpltCallback+0x7c>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	4619      	mov	r1, r3
 8000712:	4811      	ldr	r0, [pc, #68]	@ (8000758 <HAL_UART_RxCpltCallback+0x84>)
 8000714:	f000 fac5 	bl	8000ca2 <ring_buffer_write>
      if (ring_buffer_is_full(&usart2_rb) != 0)
 8000718:	480f      	ldr	r0, [pc, #60]	@ (8000758 <HAL_UART_RxCpltCallback+0x84>)
 800071a:	f000 fab6 	bl	8000c8a <ring_buffer_is_full>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d002      	beq.n	800072a <HAL_UART_RxCpltCallback+0x56>
      {
        // Transmit "receiving data" message via USART2
        printf("uSart buffer FULL\r\n");
 8000724:	480d      	ldr	r0, [pc, #52]	@ (800075c <HAL_UART_RxCpltCallback+0x88>)
 8000726:	f005 f84b 	bl	80057c0 <puts>
      }
      HAL_UART_Transmit(&huart2, (uint8_t *)"receiving data from UART \r\n", 25, HAL_MAX_DELAY);
 800072a:	f04f 33ff 	mov.w	r3, #4294967295
 800072e:	2219      	movs	r2, #25
 8000730:	490b      	ldr	r1, [pc, #44]	@ (8000760 <HAL_UART_RxCpltCallback+0x8c>)
 8000732:	480c      	ldr	r0, [pc, #48]	@ (8000764 <HAL_UART_RxCpltCallback+0x90>)
 8000734:	f003 f958 	bl	80039e8 <HAL_UART_Transmit>
    }
    HAL_UART_Receive_IT(&huart2, &usart2_data, 1);
 8000738:	2201      	movs	r2, #1
 800073a:	4905      	ldr	r1, [pc, #20]	@ (8000750 <HAL_UART_RxCpltCallback+0x7c>)
 800073c:	4809      	ldr	r0, [pc, #36]	@ (8000764 <HAL_UART_RxCpltCallback+0x90>)
 800073e:	f003 f9dd 	bl	8003afc <HAL_UART_Receive_IT>

  }
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40004400 	.word	0x40004400
 8000750:	20000013 	.word	0x20000013
 8000754:	200001b8 	.word	0x200001b8
 8000758:	200001b0 	.word	0x200001b0
 800075c:	08005f00 	.word	0x08005f00
 8000760:	08005f14 	.word	0x08005f14
 8000764:	20000110 	.word	0x20000110

08000768 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	80fb      	strh	r3, [r7, #6]

  uint8_t key_pressed = keypad_scan(GPIO_Pin);
 8000772:	88fb      	ldrh	r3, [r7, #6]
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ff35 	bl	80005e4 <keypad_scan>
 800077a:	4603      	mov	r3, r0
 800077c:	73fb      	strb	r3, [r7, #15]
  if (key_pressed != 0xFF)
 800077e:	7bfb      	ldrb	r3, [r7, #15]
 8000780:	2bff      	cmp	r3, #255	@ 0xff
 8000782:	d026      	beq.n	80007d2 <HAL_GPIO_EXTI_Callback+0x6a>
  {
    if (key_pressed == '#')
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	2b23      	cmp	r3, #35	@ 0x23
 8000788:	d10c      	bne.n	80007a4 <HAL_GPIO_EXTI_Callback+0x3c>
    {
      ring_buffer_reset(&keypad_rb);
 800078a:	4814      	ldr	r0, [pc, #80]	@ (80007dc <HAL_GPIO_EXTI_Callback+0x74>)
 800078c:	f000 fa6a 	bl	8000c64 <ring_buffer_reset>
      ring_buffer_reset(&keypad1_rb);
 8000790:	4813      	ldr	r0, [pc, #76]	@ (80007e0 <HAL_GPIO_EXTI_Callback+0x78>)
 8000792:	f000 fa67 	bl	8000c64 <ring_buffer_reset>
      ring_buffer_reset(&usart2_rb);
 8000796:	4813      	ldr	r0, [pc, #76]	@ (80007e4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000798:	f000 fa64 	bl	8000c64 <ring_buffer_reset>
      printf("buffers reseted \r\n");
 800079c:	4812      	ldr	r0, [pc, #72]	@ (80007e8 <HAL_GPIO_EXTI_Callback+0x80>)
 800079e:	f005 f80f 	bl	80057c0 <puts>
 80007a2:	e013      	b.n	80007cc <HAL_GPIO_EXTI_Callback+0x64>

    }

    else if (key_pressed >= '0' && key_pressed <= '9') // validation of numbers on HEXA keyboard
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	2b2f      	cmp	r3, #47	@ 0x2f
 80007a8:	d910      	bls.n	80007cc <HAL_GPIO_EXTI_Callback+0x64>
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	2b39      	cmp	r3, #57	@ 0x39
 80007ae:	d80d      	bhi.n	80007cc <HAL_GPIO_EXTI_Callback+0x64>
        {
          ring_buffer_write(&keypad_rb, key_pressed);
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	4619      	mov	r1, r3
 80007b4:	4809      	ldr	r0, [pc, #36]	@ (80007dc <HAL_GPIO_EXTI_Callback+0x74>)
 80007b6:	f000 fa74 	bl	8000ca2 <ring_buffer_write>
          if (ring_buffer_is_full(&keypad_rb) != 0)
 80007ba:	4808      	ldr	r0, [pc, #32]	@ (80007dc <HAL_GPIO_EXTI_Callback+0x74>)
 80007bc:	f000 fa65 	bl	8000c8a <ring_buffer_is_full>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d002      	beq.n	80007cc <HAL_GPIO_EXTI_Callback+0x64>
          {
            // Transmit "receiving data" message via USART2
              printf("ring buffer 1 FULL\r\n");
 80007c6:	4809      	ldr	r0, [pc, #36]	@ (80007ec <HAL_GPIO_EXTI_Callback+0x84>)
 80007c8:	f004 fffa 	bl	80057c0 <puts>

          }
        }

    keypad_data = key_pressed;
 80007cc:	4a08      	ldr	r2, [pc, #32]	@ (80007f0 <HAL_GPIO_EXTI_Callback+0x88>)
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	7013      	strb	r3, [r2, #0]
  }
}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	2000019c 	.word	0x2000019c
 80007e0:	200001a4 	.word	0x200001a4
 80007e4:	200001b0 	.word	0x200001b0
 80007e8:	08005f30 	.word	0x08005f30
 80007ec:	08005f44 	.word	0x08005f44
 80007f0:	20000012 	.word	0x20000012

080007f4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fa:	f000 fc95 	bl	8001128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fe:	f000 f881 	bl	8000904 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */


  MX_GPIO_Init();
 8000802:	f000 f941 	bl	8000a88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000806:	f000 f90f 	bl	8000a28 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800080a:	f000 f8cd 	bl	80009a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 800080e:	f004 fcc1 	bl	8005194 <ssd1306_Init>
  ssd1306_Fill(Black);
 8000812:	2000      	movs	r0, #0
 8000814:	f004 fd28 	bl	8005268 <ssd1306_Fill>

  ssd1306_WriteString("Starting ARITHMETIC \nsoftware...\r\n", Font_6x8, White);
 8000818:	4b2d      	ldr	r3, [pc, #180]	@ (80008d0 <main+0xdc>)
 800081a:	2201      	movs	r2, #1
 800081c:	9200      	str	r2, [sp, #0]
 800081e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000820:	482c      	ldr	r0, [pc, #176]	@ (80008d4 <main+0xe0>)
 8000822:	f004 fe45 	bl	80054b0 <ssd1306_WriteString>

  ssd1306_UpdateScreen();
 8000826:	f004 fd37 	bl	8005298 <ssd1306_UpdateScreen>

  ring_buffer_init(&usart2_rb, usart2_buffer, USART2_RB_LEN);
 800082a:	2201      	movs	r2, #1
 800082c:	492a      	ldr	r1, [pc, #168]	@ (80008d8 <main+0xe4>)
 800082e:	482b      	ldr	r0, [pc, #172]	@ (80008dc <main+0xe8>)
 8000830:	f000 fa04 	bl	8000c3c <ring_buffer_init>
  ring_buffer_init(&keypad_rb, keypad_buffer, KEYPAD_RB_LEN);
 8000834:	2203      	movs	r2, #3
 8000836:	492a      	ldr	r1, [pc, #168]	@ (80008e0 <main+0xec>)
 8000838:	482a      	ldr	r0, [pc, #168]	@ (80008e4 <main+0xf0>)
 800083a:	f000 f9ff 	bl	8000c3c <ring_buffer_init>
  HAL_UART_Receive_IT(&huart2, &usart2_data, 1);
 800083e:	2201      	movs	r2, #1
 8000840:	4929      	ldr	r1, [pc, #164]	@ (80008e8 <main+0xf4>)
 8000842:	482a      	ldr	r0, [pc, #168]	@ (80008ec <main+0xf8>)
 8000844:	f003 f95a 	bl	8003afc <HAL_UART_Receive_IT>
  while (1)
  {

    // adding logic to implement heartbeat
    static uint32_t last_heartbeat_time = 0;
    if (HAL_GetTick() - last_heartbeat_time >= 500) // toggling for 1Hz (500ms on / 500ms off)
 8000848:	f000 fcde 	bl	8001208 <HAL_GetTick>
 800084c:	4602      	mov	r2, r0
 800084e:	4b28      	ldr	r3, [pc, #160]	@ (80008f0 <main+0xfc>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	1ad3      	subs	r3, r2, r3
 8000854:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000858:	d30f      	bcc.n	800087a <main+0x86>
    {
      HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 800085a:	2120      	movs	r1, #32
 800085c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000860:	f001 f86c 	bl	800193c <HAL_GPIO_TogglePin>
      last_heartbeat_time = HAL_GetTick();
 8000864:	f000 fcd0 	bl	8001208 <HAL_GetTick>
 8000868:	4603      	mov	r3, r0
 800086a:	4a21      	ldr	r2, [pc, #132]	@ (80008f0 <main+0xfc>)
 800086c:	6013      	str	r3, [r2, #0]
      HAL_UART_Transmit(&huart2, HB, sizeof(HB) - 1, 100);
 800086e:	2364      	movs	r3, #100	@ 0x64
 8000870:	221f      	movs	r2, #31
 8000872:	4920      	ldr	r1, [pc, #128]	@ (80008f4 <main+0x100>)
 8000874:	481d      	ldr	r0, [pc, #116]	@ (80008ec <main+0xf8>)
 8000876:	f003 f8b7 	bl	80039e8 <HAL_UART_Transmit>
    }

    if (keypad_data != 0xFF)
 800087a:	4b1f      	ldr	r3, [pc, #124]	@ (80008f8 <main+0x104>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2bff      	cmp	r3, #255	@ 0xff
 8000880:	d00f      	beq.n	80008a2 <main+0xae>
       {
         ssd1306_SetCursor(20, 20);
 8000882:	2114      	movs	r1, #20
 8000884:	2014      	movs	r0, #20
 8000886:	f004 fe39 	bl	80054fc <ssd1306_SetCursor>
         ssd1306_WriteString(&keypad_data, Font_11x18, White);
 800088a:	4b1c      	ldr	r3, [pc, #112]	@ (80008fc <main+0x108>)
 800088c:	2201      	movs	r2, #1
 800088e:	9200      	str	r2, [sp, #0]
 8000890:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000892:	4819      	ldr	r0, [pc, #100]	@ (80008f8 <main+0x104>)
 8000894:	f004 fe0c 	bl	80054b0 <ssd1306_WriteString>
         ssd1306_UpdateScreen();
 8000898:	f004 fcfe 	bl	8005298 <ssd1306_UpdateScreen>
         keypad_data = 0xFF;
 800089c:	4b16      	ldr	r3, [pc, #88]	@ (80008f8 <main+0x104>)
 800089e:	22ff      	movs	r2, #255	@ 0xff
 80008a0:	701a      	strb	r2, [r3, #0]
       }
    if (usart2_data_ready)
 80008a2:	4b17      	ldr	r3, [pc, #92]	@ (8000900 <main+0x10c>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d0cd      	beq.n	8000848 <main+0x54>
      {
        ssd1306_SetCursor(20, 40);
 80008ac:	2128      	movs	r1, #40	@ 0x28
 80008ae:	2014      	movs	r0, #20
 80008b0:	f004 fe24 	bl	80054fc <ssd1306_SetCursor>
        ssd1306_WriteString(&usart2_data, Font_11x18, White);
 80008b4:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <main+0x108>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	9200      	str	r2, [sp, #0]
 80008ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008bc:	480a      	ldr	r0, [pc, #40]	@ (80008e8 <main+0xf4>)
 80008be:	f004 fdf7 	bl	80054b0 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 80008c2:	f004 fce9 	bl	8005298 <ssd1306_UpdateScreen>
        usart2_data_ready = 0; // Reiniciar la bandera
 80008c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <main+0x10c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
  {
 80008cc:	e7bc      	b.n	8000848 <main+0x54>
 80008ce:	bf00      	nop
 80008d0:	08007310 	.word	0x08007310
 80008d4:	08005f58 	.word	0x08005f58
 80008d8:	200001ac 	.word	0x200001ac
 80008dc:	200001b0 	.word	0x200001b0
 80008e0:	20000198 	.word	0x20000198
 80008e4:	2000019c 	.word	0x2000019c
 80008e8:	20000013 	.word	0x20000013
 80008ec:	20000110 	.word	0x20000110
 80008f0:	200001bc 	.word	0x200001bc
 80008f4:	20000014 	.word	0x20000014
 80008f8:	20000012 	.word	0x20000012
 80008fc:	0800731c 	.word	0x0800731c
 8000900:	200001b8 	.word	0x200001b8

08000904 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b096      	sub	sp, #88	@ 0x58
 8000908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	2244      	movs	r2, #68	@ 0x44
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f005 f834 	bl	8005980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000918:	463b      	mov	r3, r7
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000926:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800092a:	f001 fcfd 	bl	8002328 <HAL_PWREx_ControlVoltageScaling>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000934:	f000 f97c 	bl	8000c30 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000938:	2302      	movs	r3, #2
 800093a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800093c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000940:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000942:	2310      	movs	r3, #16
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000946:	2302      	movs	r3, #2
 8000948:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800094a:	2302      	movs	r3, #2
 800094c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800094e:	2301      	movs	r3, #1
 8000950:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000952:	230a      	movs	r3, #10
 8000954:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000956:	2307      	movs	r3, #7
 8000958:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800095a:	2302      	movs	r3, #2
 800095c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800095e:	2302      	movs	r3, #2
 8000960:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	4618      	mov	r0, r3
 8000968:	f001 fd34 	bl	80023d4 <HAL_RCC_OscConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000972:	f000 f95d 	bl	8000c30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000976:	230f      	movs	r3, #15
 8000978:	603b      	str	r3, [r7, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800097a:	2303      	movs	r3, #3
 800097c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800098a:	463b      	mov	r3, r7
 800098c:	2104      	movs	r1, #4
 800098e:	4618      	mov	r0, r3
 8000990:	f002 f8fc 	bl	8002b8c <HAL_RCC_ClockConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800099a:	f000 f949 	bl	8000c30 <Error_Handler>
  }
}
 800099e:	bf00      	nop
 80009a0:	3758      	adds	r7, #88	@ 0x58
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009ac:	4b1b      	ldr	r3, [pc, #108]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000a20 <MX_I2C1_Init+0x78>)
 80009b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80009b2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a24 <MX_I2C1_Init+0x7c>)
 80009b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009b8:	4b18      	ldr	r3, [pc, #96]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009be:	4b17      	ldr	r3, [pc, #92]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c4:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009ca:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009d0:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d6:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009d8:	2200      	movs	r2, #0
 80009da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009e2:	480e      	ldr	r0, [pc, #56]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009e4:	f000 ffdc 	bl	80019a0 <HAL_I2C_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009ee:	f000 f91f 	bl	8000c30 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009f2:	2100      	movs	r1, #0
 80009f4:	4809      	ldr	r0, [pc, #36]	@ (8000a1c <MX_I2C1_Init+0x74>)
 80009f6:	f001 fbf1 	bl	80021dc <HAL_I2CEx_ConfigAnalogFilter>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a00:	f000 f916 	bl	8000c30 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a04:	2100      	movs	r1, #0
 8000a06:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <MX_I2C1_Init+0x74>)
 8000a08:	f001 fc33 	bl	8002272 <HAL_I2CEx_ConfigDigitalFilter>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a12:	f000 f90d 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200000bc 	.word	0x200000bc
 8000a20:	40005400 	.word	0x40005400
 8000a24:	10d19ce4 	.word	0x10d19ce4

08000a28 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a2e:	4a15      	ldr	r2, [pc, #84]	@ (8000a84 <MX_USART2_UART_Init+0x5c>)
 8000a30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a32:	4b13      	ldr	r3, [pc, #76]	@ (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a58:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	@ (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a64:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	@ (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a6c:	f002 ff6e 	bl	800394c <HAL_UART_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a76:	f000 f8db 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000110 	.word	0x20000110
 8000a84:	40004400 	.word	0x40004400

08000a88 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	@ 0x28
 8000a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9e:	4b61      	ldr	r3, [pc, #388]	@ (8000c24 <MX_GPIO_Init+0x19c>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa2:	4a60      	ldr	r2, [pc, #384]	@ (8000c24 <MX_GPIO_Init+0x19c>)
 8000aa4:	f043 0304 	orr.w	r3, r3, #4
 8000aa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aaa:	4b5e      	ldr	r3, [pc, #376]	@ (8000c24 <MX_GPIO_Init+0x19c>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aae:	f003 0304 	and.w	r3, r3, #4
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab6:	4b5b      	ldr	r3, [pc, #364]	@ (8000c24 <MX_GPIO_Init+0x19c>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aba:	4a5a      	ldr	r2, [pc, #360]	@ (8000c24 <MX_GPIO_Init+0x19c>)
 8000abc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ac0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac2:	4b58      	ldr	r3, [pc, #352]	@ (8000c24 <MX_GPIO_Init+0x19c>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	4b55      	ldr	r3, [pc, #340]	@ (8000c24 <MX_GPIO_Init+0x19c>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad2:	4a54      	ldr	r2, [pc, #336]	@ (8000c24 <MX_GPIO_Init+0x19c>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ada:	4b52      	ldr	r3, [pc, #328]	@ (8000c24 <MX_GPIO_Init+0x19c>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	4b4f      	ldr	r3, [pc, #316]	@ (8000c24 <MX_GPIO_Init+0x19c>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aea:	4a4e      	ldr	r2, [pc, #312]	@ (8000c24 <MX_GPIO_Init+0x19c>)
 8000aec:	f043 0302 	orr.w	r3, r3, #2
 8000af0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000af2:	4b4c      	ldr	r3, [pc, #304]	@ (8000c24 <MX_GPIO_Init+0x19c>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2120      	movs	r1, #32
 8000b02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b06:	f000 ff01 	bl	800190c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, GPIO_PIN_SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b10:	4845      	ldr	r0, [pc, #276]	@ (8000c28 <MX_GPIO_Init+0x1a0>)
 8000b12:	f000 fefb 	bl	800190c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, GPIO_PIN_SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2180      	movs	r1, #128	@ 0x80
 8000b1a:	4844      	ldr	r0, [pc, #272]	@ (8000c2c <MX_GPIO_Init+0x1a4>)
 8000b1c:	f000 fef6 	bl	800190c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROW_3_Pin | ROW_2_Pin, GPIO_PIN_SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000b26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b2a:	f000 feef 	bl	800190c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b34:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4839      	ldr	r0, [pc, #228]	@ (8000c2c <MX_GPIO_Init+0x1a4>)
 8000b46:	f000 fd1f 	bl	8001588 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin ROW_3_Pin ROW_2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin | ROW_3_Pin | ROW_2_Pin;
 8000b4a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b66:	f000 fd0f 	bl	8001588 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROW_4_Pin */
  GPIO_InitStruct.Pin = ROW_4_Pin;
 8000b6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ROW_4_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	4829      	ldr	r0, [pc, #164]	@ (8000c28 <MX_GPIO_Init+0x1a0>)
 8000b84:	f000 fd00 	bl	8001588 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROW_1_Pin */
  GPIO_InitStruct.Pin = ROW_1_Pin;
 8000b88:	2380      	movs	r3, #128	@ 0x80
 8000b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ROW_1_GPIO_Port, &GPIO_InitStruct);
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4823      	ldr	r0, [pc, #140]	@ (8000c2c <MX_GPIO_Init+0x1a4>)
 8000ba0:	f000 fcf2 	bl	8001588 <HAL_GPIO_Init>

  /*Configure GPIO pin : COL_4_Pin */
  GPIO_InitStruct.Pin = COL_4_Pin;
 8000ba4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000baa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COL_4_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bbe:	f000 fce3 	bl	8001588 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL_3_Pin COL_1_Pin COL_2_Pin */
  GPIO_InitStruct.Pin = COL_3_Pin | COL_1_Pin | COL_2_Pin;
 8000bc2:	2338      	movs	r3, #56	@ 0x38
 8000bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4814      	ldr	r0, [pc, #80]	@ (8000c28 <MX_GPIO_Init+0x1a0>)
 8000bd8:	f000 fcd6 	bl	8001588 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2100      	movs	r1, #0
 8000be0:	2009      	movs	r0, #9
 8000be2:	f000 fc1c 	bl	800141e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000be6:	2009      	movs	r0, #9
 8000be8:	f000 fc35 	bl	8001456 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2100      	movs	r1, #0
 8000bf0:	200a      	movs	r0, #10
 8000bf2:	f000 fc14 	bl	800141e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000bf6:	200a      	movs	r0, #10
 8000bf8:	f000 fc2d 	bl	8001456 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2017      	movs	r0, #23
 8000c02:	f000 fc0c 	bl	800141e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c06:	2017      	movs	r0, #23
 8000c08:	f000 fc25 	bl	8001456 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2100      	movs	r1, #0
 8000c10:	2028      	movs	r0, #40	@ 0x28
 8000c12:	f000 fc04 	bl	800141e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c16:	2028      	movs	r0, #40	@ 0x28
 8000c18:	f000 fc1d 	bl	8001456 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c1c:	bf00      	nop
 8000c1e:	3728      	adds	r7, #40	@ 0x28
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40021000 	.word	0x40021000
 8000c28:	48000400 	.word	0x48000400
 8000c2c:	48000800 	.word	0x48000800

08000c30 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <Error_Handler+0x8>

08000c3c <ring_buffer_init>:

#include "ring_buffer.h"

void ring_buffer_init(ring_buffer_t *rb, uint8_t *mem_add, uint8_t cap)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	4613      	mov	r3, r2
 8000c48:	71fb      	strb	r3, [r7, #7]
    rb->buffer = mem_add;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	68ba      	ldr	r2, [r7, #8]
 8000c4e:	601a      	str	r2, [r3, #0]
    rb->capacity = cap;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	79fa      	ldrb	r2, [r7, #7]
 8000c54:	71da      	strb	r2, [r3, #7]

    ring_buffer_reset(rb);
 8000c56:	68f8      	ldr	r0, [r7, #12]
 8000c58:	f000 f804 	bl	8000c64 <ring_buffer_reset>
}
 8000c5c:	bf00      	nop
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <ring_buffer_reset>:
 * @brief Esta funcion reinicia los datos disponibles en el buffer
 *
 * @retval size: cantidad de datos disponibles
 */
void ring_buffer_reset(ring_buffer_t *rb)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
    rb->head = 0;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	711a      	strb	r2, [r3, #4]
    rb->tail = 0;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2200      	movs	r2, #0
 8000c76:	715a      	strb	r2, [r3, #5]
    rb->is_full = 0;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	719a      	strb	r2, [r3, #6]
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <ring_buffer_is_full>:
 * @brief Esta funcion revisa si el buffer esta lleno
 *
 * @retval is_full: 0 si no esta lleno, 1 si esta lleno
 */
uint8_t ring_buffer_is_full(ring_buffer_t *rb)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
    return rb->is_full;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	799b      	ldrb	r3, [r3, #6]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <ring_buffer_write>:
 * @param data: el dato que se va a escribir
 *
 * @retval Ninguno
 */
void ring_buffer_write(ring_buffer_t *rb, uint8_t data)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	460b      	mov	r3, r1
 8000cac:	70fb      	strb	r3, [r7, #3]
    rb->buffer[rb->head] = data;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	7912      	ldrb	r2, [r2, #4]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	78fa      	ldrb	r2, [r7, #3]
 8000cba:	701a      	strb	r2, [r3, #0]
    rb->head = rb->head + 1;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	791b      	ldrb	r3, [r3, #4]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	711a      	strb	r2, [r3, #4]

    if (rb->head >= rb->capacity)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	791a      	ldrb	r2, [r3, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	79db      	ldrb	r3, [r3, #7]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d302      	bcc.n	8000cda <ring_buffer_write+0x38>
    { // si la cabeza llega al final de la memoria
        rb->head = 0;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	711a      	strb	r2, [r3, #4]
    }

    if (rb->is_full != 0)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	799b      	ldrb	r3, [r3, #6]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d005      	beq.n	8000cee <ring_buffer_write+0x4c>
    { // si se pierden datos viejos (continar enviando datos)
        rb->tail = rb->tail + 1;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	795b      	ldrb	r3, [r3, #5]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	715a      	strb	r2, [r3, #5]
    }

    if (rb->tail >= rb->capacity)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	795a      	ldrb	r2, [r3, #5]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	79db      	ldrb	r3, [r3, #7]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d302      	bcc.n	8000d00 <ring_buffer_write+0x5e>
    {                 // si la cola llega al final de la memoria
        rb->tail = 0; // avoiding unncesary data
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	715a      	strb	r2, [r3, #5]
    }

    if (rb->head == rb->tail)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	791a      	ldrb	r2, [r3, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	795b      	ldrb	r3, [r3, #5]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d102      	bne.n	8000d12 <ring_buffer_write+0x70>
    { // si la cabeza alcanza la cola
        rb->is_full = 1;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2201      	movs	r2, #1
 8000d10:	719a      	strb	r2, [r3, #6]
    }
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
	...

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	4b0f      	ldr	r3, [pc, #60]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d32:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d42:	4a08      	ldr	r2, [pc, #32]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d48:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d4a:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40021000 	.word	0x40021000

08000d68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b0ac      	sub	sp, #176	@ 0xb0
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2288      	movs	r2, #136	@ 0x88
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f004 fdf9 	bl	8005980 <memset>
  if(hi2c->Instance==I2C1)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a21      	ldr	r2, [pc, #132]	@ (8000e18 <HAL_I2C_MspInit+0xb0>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d13b      	bne.n	8000e10 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d98:	2340      	movs	r3, #64	@ 0x40
 8000d9a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4618      	mov	r0, r3
 8000da6:	f002 f915 	bl	8002fd4 <HAL_RCCEx_PeriphCLKConfig>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000db0:	f7ff ff3e 	bl	8000c30 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db4:	4b19      	ldr	r3, [pc, #100]	@ (8000e1c <HAL_I2C_MspInit+0xb4>)
 8000db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db8:	4a18      	ldr	r2, [pc, #96]	@ (8000e1c <HAL_I2C_MspInit+0xb4>)
 8000dba:	f043 0302 	orr.w	r3, r3, #2
 8000dbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc0:	4b16      	ldr	r3, [pc, #88]	@ (8000e1c <HAL_I2C_MspInit+0xb4>)
 8000dc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dcc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dd0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd4:	2312      	movs	r3, #18
 8000dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000de6:	2304      	movs	r3, #4
 8000de8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000df0:	4619      	mov	r1, r3
 8000df2:	480b      	ldr	r0, [pc, #44]	@ (8000e20 <HAL_I2C_MspInit+0xb8>)
 8000df4:	f000 fbc8 	bl	8001588 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000df8:	4b08      	ldr	r3, [pc, #32]	@ (8000e1c <HAL_I2C_MspInit+0xb4>)
 8000dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dfc:	4a07      	ldr	r2, [pc, #28]	@ (8000e1c <HAL_I2C_MspInit+0xb4>)
 8000dfe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e02:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e04:	4b05      	ldr	r3, [pc, #20]	@ (8000e1c <HAL_I2C_MspInit+0xb4>)
 8000e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e10:	bf00      	nop
 8000e12:	37b0      	adds	r7, #176	@ 0xb0
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40005400 	.word	0x40005400
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	48000400 	.word	0x48000400

08000e24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b0ac      	sub	sp, #176	@ 0xb0
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	2288      	movs	r2, #136	@ 0x88
 8000e42:	2100      	movs	r1, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f004 fd9b 	bl	8005980 <memset>
  if(huart->Instance==USART2)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a25      	ldr	r2, [pc, #148]	@ (8000ee4 <HAL_UART_MspInit+0xc0>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d143      	bne.n	8000edc <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e54:	2302      	movs	r3, #2
 8000e56:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4618      	mov	r0, r3
 8000e62:	f002 f8b7 	bl	8002fd4 <HAL_RCCEx_PeriphCLKConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e6c:	f7ff fee0 	bl	8000c30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e70:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee8 <HAL_UART_MspInit+0xc4>)
 8000e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e74:	4a1c      	ldr	r2, [pc, #112]	@ (8000ee8 <HAL_UART_MspInit+0xc4>)
 8000e76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee8 <HAL_UART_MspInit+0xc4>)
 8000e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e88:	4b17      	ldr	r3, [pc, #92]	@ (8000ee8 <HAL_UART_MspInit+0xc4>)
 8000e8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8c:	4a16      	ldr	r2, [pc, #88]	@ (8000ee8 <HAL_UART_MspInit+0xc4>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e94:	4b14      	ldr	r3, [pc, #80]	@ (8000ee8 <HAL_UART_MspInit+0xc4>)
 8000e96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ea0:	230c      	movs	r3, #12
 8000ea2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eb8:	2307      	movs	r3, #7
 8000eba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebe:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ec8:	f000 fb5e 	bl	8001588 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2100      	movs	r1, #0
 8000ed0:	2026      	movs	r0, #38	@ 0x26
 8000ed2:	f000 faa4 	bl	800141e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ed6:	2026      	movs	r0, #38	@ 0x26
 8000ed8:	f000 fabd 	bl	8001456 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000edc:	bf00      	nop
 8000ede:	37b0      	adds	r7, #176	@ 0xb0
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40004400 	.word	0x40004400
 8000ee8:	40021000 	.word	0x40021000

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <NMI_Handler+0x4>

08000ef4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <HardFault_Handler+0x4>

08000efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <MemManage_Handler+0x4>

08000f04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <BusFault_Handler+0x4>

08000f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <UsageFault_Handler+0x4>

08000f14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f42:	f000 f94d 	bl	80011e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_3_Pin);
 8000f4e:	2008      	movs	r0, #8
 8000f50:	f000 fd0e 	bl	8001970 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_1_Pin);
 8000f5c:	2010      	movs	r0, #16
 8000f5e:	f000 fd07 	bl	8001970 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_2_Pin);
 8000f6a:	2020      	movs	r0, #32
 8000f6c:	f000 fd00 	bl	8001970 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f78:	4802      	ldr	r0, [pc, #8]	@ (8000f84 <USART2_IRQHandler+0x10>)
 8000f7a:	f002 fe0b 	bl	8003b94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000110 	.word	0x20000110

08000f88 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_4_Pin);
 8000f8c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000f90:	f000 fcee 	bl	8001970 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f94:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f98:	f000 fcea 	bl	8001970 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	e00a      	b.n	8000fc8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fb2:	f3af 8000 	nop.w
 8000fb6:	4601      	mov	r1, r0
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	1c5a      	adds	r2, r3, #1
 8000fbc:	60ba      	str	r2, [r7, #8]
 8000fbe:	b2ca      	uxtb	r2, r1
 8000fc0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	dbf0      	blt.n	8000fb2 <_read+0x12>
  }

  return len;
 8000fd0:	687b      	ldr	r3, [r7, #4]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <_close>:
  }
  return len;
}

int _close(int file)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001002:	605a      	str	r2, [r3, #4]
  return 0;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <_isatty>:

int _isatty(int file)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800101a:	2301      	movs	r3, #1
}
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800104c:	4a14      	ldr	r2, [pc, #80]	@ (80010a0 <_sbrk+0x5c>)
 800104e:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <_sbrk+0x60>)
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001058:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <_sbrk+0x64>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001060:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <_sbrk+0x64>)
 8001062:	4a12      	ldr	r2, [pc, #72]	@ (80010ac <_sbrk+0x68>)
 8001064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001066:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <_sbrk+0x64>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	429a      	cmp	r2, r3
 8001072:	d207      	bcs.n	8001084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001074:	f004 fcd2 	bl	8005a1c <__errno>
 8001078:	4603      	mov	r3, r0
 800107a:	220c      	movs	r2, #12
 800107c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	e009      	b.n	8001098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001084:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <_sbrk+0x64>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800108a:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <_sbrk+0x64>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	4a05      	ldr	r2, [pc, #20]	@ (80010a8 <_sbrk+0x64>)
 8001094:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001096:	68fb      	ldr	r3, [r7, #12]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20018000 	.word	0x20018000
 80010a4:	00000400 	.word	0x00000400
 80010a8:	200001c0 	.word	0x200001c0
 80010ac:	20000720 	.word	0x20000720

080010b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <SystemInit+0x20>)
 80010b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ba:	4a05      	ldr	r2, [pc, #20]	@ (80010d0 <SystemInit+0x20>)
 80010bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800110c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010d8:	f7ff ffea 	bl	80010b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010dc:	480c      	ldr	r0, [pc, #48]	@ (8001110 <LoopForever+0x6>)
  ldr r1, =_edata
 80010de:	490d      	ldr	r1, [pc, #52]	@ (8001114 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001118 <LoopForever+0xe>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e4:	e002      	b.n	80010ec <LoopCopyDataInit>

080010e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ea:	3304      	adds	r3, #4

080010ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f0:	d3f9      	bcc.n	80010e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f2:	4a0a      	ldr	r2, [pc, #40]	@ (800111c <LoopForever+0x12>)
  ldr r4, =_ebss
 80010f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001120 <LoopForever+0x16>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f8:	e001      	b.n	80010fe <LoopFillZerobss>

080010fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010fc:	3204      	adds	r2, #4

080010fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001100:	d3fb      	bcc.n	80010fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001102:	f004 fc91 	bl	8005a28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001106:	f7ff fb75 	bl	80007f4 <main>

0800110a <LoopForever>:

LoopForever:
    b LoopForever
 800110a:	e7fe      	b.n	800110a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800110c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001114:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001118:	08007338 	.word	0x08007338
  ldr r2, =_sbss
 800111c:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001120:	2000071c 	.word	0x2000071c

08001124 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC1_2_IRQHandler>
	...

08001128 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001132:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <HAL_Init+0x3c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a0b      	ldr	r2, [pc, #44]	@ (8001164 <HAL_Init+0x3c>)
 8001138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800113c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800113e:	2003      	movs	r0, #3
 8001140:	f000 f962 	bl	8001408 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001144:	2000      	movs	r0, #0
 8001146:	f000 f80f 	bl	8001168 <HAL_InitTick>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d002      	beq.n	8001156 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	71fb      	strb	r3, [r7, #7]
 8001154:	e001      	b.n	800115a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001156:	f7ff fde3 	bl	8000d20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800115a:	79fb      	ldrb	r3, [r7, #7]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40022000 	.word	0x40022000

08001168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001170:	2300      	movs	r3, #0
 8001172:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001174:	4b17      	ldr	r3, [pc, #92]	@ (80011d4 <HAL_InitTick+0x6c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d023      	beq.n	80011c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800117c:	4b16      	ldr	r3, [pc, #88]	@ (80011d8 <HAL_InitTick+0x70>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <HAL_InitTick+0x6c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800118a:	fbb3 f3f1 	udiv	r3, r3, r1
 800118e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f000 f96d 	bl	8001472 <HAL_SYSTICK_Config>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10f      	bne.n	80011be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b0f      	cmp	r3, #15
 80011a2:	d809      	bhi.n	80011b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a4:	2200      	movs	r2, #0
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f000 f937 	bl	800141e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011b0:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <HAL_InitTick+0x74>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	e007      	b.n	80011c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	e004      	b.n	80011c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	73fb      	strb	r3, [r7, #15]
 80011c2:	e001      	b.n	80011c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	2000003c 	.word	0x2000003c
 80011d8:	20000034 	.word	0x20000034
 80011dc:	20000038 	.word	0x20000038

080011e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <HAL_IncTick+0x20>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <HAL_IncTick+0x24>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a04      	ldr	r2, [pc, #16]	@ (8001204 <HAL_IncTick+0x24>)
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	2000003c 	.word	0x2000003c
 8001204:	200001c4 	.word	0x200001c4

08001208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return uwTick;
 800120c:	4b03      	ldr	r3, [pc, #12]	@ (800121c <HAL_GetTick+0x14>)
 800120e:	681b      	ldr	r3, [r3, #0]
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	200001c4 	.word	0x200001c4

08001220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001228:	f7ff ffee 	bl	8001208 <HAL_GetTick>
 800122c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001238:	d005      	beq.n	8001246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800123a:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <HAL_Delay+0x44>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4413      	add	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001246:	bf00      	nop
 8001248:	f7ff ffde 	bl	8001208 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	429a      	cmp	r2, r3
 8001256:	d8f7      	bhi.n	8001248 <HAL_Delay+0x28>
  {
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	2000003c 	.word	0x2000003c

08001268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001278:	4b0c      	ldr	r3, [pc, #48]	@ (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001284:	4013      	ands	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001290:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001294:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129a:	4a04      	ldr	r2, [pc, #16]	@ (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	60d3      	str	r3, [r2, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b4:	4b04      	ldr	r3, [pc, #16]	@ (80012c8 <__NVIC_GetPriorityGrouping+0x18>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	f003 0307 	and.w	r3, r3, #7
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	db0b      	blt.n	80012f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	f003 021f 	and.w	r2, r3, #31
 80012e4:	4907      	ldr	r1, [pc, #28]	@ (8001304 <__NVIC_EnableIRQ+0x38>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	095b      	lsrs	r3, r3, #5
 80012ec:	2001      	movs	r0, #1
 80012ee:	fa00 f202 	lsl.w	r2, r0, r2
 80012f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000e100 	.word	0xe000e100

08001308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	2b00      	cmp	r3, #0
 800131a:	db0a      	blt.n	8001332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	490c      	ldr	r1, [pc, #48]	@ (8001354 <__NVIC_SetPriority+0x4c>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	0112      	lsls	r2, r2, #4
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	440b      	add	r3, r1
 800132c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001330:	e00a      	b.n	8001348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4908      	ldr	r1, [pc, #32]	@ (8001358 <__NVIC_SetPriority+0x50>)
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	3b04      	subs	r3, #4
 8001340:	0112      	lsls	r2, r2, #4
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	440b      	add	r3, r1
 8001346:	761a      	strb	r2, [r3, #24]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000e100 	.word	0xe000e100
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	@ 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f1c3 0307 	rsb	r3, r3, #7
 8001376:	2b04      	cmp	r3, #4
 8001378:	bf28      	it	cs
 800137a:	2304      	movcs	r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3304      	adds	r3, #4
 8001382:	2b06      	cmp	r3, #6
 8001384:	d902      	bls.n	800138c <NVIC_EncodePriority+0x30>
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3b03      	subs	r3, #3
 800138a:	e000      	b.n	800138e <NVIC_EncodePriority+0x32>
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	f04f 32ff 	mov.w	r2, #4294967295
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	401a      	ands	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a4:	f04f 31ff 	mov.w	r1, #4294967295
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	43d9      	mvns	r1, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	4313      	orrs	r3, r2
         );
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3724      	adds	r7, #36	@ 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013d4:	d301      	bcc.n	80013da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00f      	b.n	80013fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013da:	4a0a      	ldr	r2, [pc, #40]	@ (8001404 <SysTick_Config+0x40>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e2:	210f      	movs	r1, #15
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295
 80013e8:	f7ff ff8e 	bl	8001308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ec:	4b05      	ldr	r3, [pc, #20]	@ (8001404 <SysTick_Config+0x40>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f2:	4b04      	ldr	r3, [pc, #16]	@ (8001404 <SysTick_Config+0x40>)
 80013f4:	2207      	movs	r2, #7
 80013f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	e000e010 	.word	0xe000e010

08001408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ff29 	bl	8001268 <__NVIC_SetPriorityGrouping>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
 800142a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001430:	f7ff ff3e 	bl	80012b0 <__NVIC_GetPriorityGrouping>
 8001434:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	68b9      	ldr	r1, [r7, #8]
 800143a:	6978      	ldr	r0, [r7, #20]
 800143c:	f7ff ff8e 	bl	800135c <NVIC_EncodePriority>
 8001440:	4602      	mov	r2, r0
 8001442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff5d 	bl	8001308 <__NVIC_SetPriority>
}
 800144e:	bf00      	nop
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff31 	bl	80012cc <__NVIC_EnableIRQ>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ffa2 	bl	80013c4 <SysTick_Config>
 8001480:	4603      	mov	r3, r0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800148a:	b480      	push	{r7}
 800148c:	b085      	sub	sp, #20
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d008      	beq.n	80014b4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2204      	movs	r2, #4
 80014a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e022      	b.n	80014fa <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 020e 	bic.w	r2, r2, #14
 80014c2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 0201 	bic.w	r2, r2, #1
 80014d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d8:	f003 021c 	and.w	r2, r3, #28
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e0:	2101      	movs	r1, #1
 80014e2:	fa01 f202 	lsl.w	r2, r1, r2
 80014e6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2201      	movs	r2, #1
 80014ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b084      	sub	sp, #16
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d005      	beq.n	800152a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2204      	movs	r2, #4
 8001522:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	73fb      	strb	r3, [r7, #15]
 8001528:	e029      	b.n	800157e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 020e 	bic.w	r2, r2, #14
 8001538:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0201 	bic.w	r2, r2, #1
 8001548:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154e:	f003 021c 	and.w	r2, r3, #28
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001556:	2101      	movs	r1, #1
 8001558:	fa01 f202 	lsl.w	r2, r1, r2
 800155c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	4798      	blx	r3
    }
  }
  return status;
 800157e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001588:	b480      	push	{r7}
 800158a:	b087      	sub	sp, #28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001596:	e17f      	b.n	8001898 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	2101      	movs	r1, #1
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	fa01 f303 	lsl.w	r3, r1, r3
 80015a4:	4013      	ands	r3, r2
 80015a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f000 8171 	beq.w	8001892 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d005      	beq.n	80015c8 <HAL_GPIO_Init+0x40>
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 0303 	and.w	r3, r3, #3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d130      	bne.n	800162a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	2203      	movs	r2, #3
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4013      	ands	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	68da      	ldr	r2, [r3, #12]
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015fe:	2201      	movs	r2, #1
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4013      	ands	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	091b      	lsrs	r3, r3, #4
 8001614:	f003 0201 	and.w	r2, r3, #1
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4313      	orrs	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 0303 	and.w	r3, r3, #3
 8001632:	2b03      	cmp	r3, #3
 8001634:	d118      	bne.n	8001668 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800163a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800163c:	2201      	movs	r2, #1
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	08db      	lsrs	r3, r3, #3
 8001652:	f003 0201 	and.w	r2, r3, #1
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	4313      	orrs	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	2b03      	cmp	r3, #3
 8001672:	d017      	beq.n	80016a4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	2203      	movs	r2, #3
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4013      	ands	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 0303 	and.w	r3, r3, #3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d123      	bne.n	80016f8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	08da      	lsrs	r2, r3, #3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3208      	adds	r2, #8
 80016b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	220f      	movs	r2, #15
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	691a      	ldr	r2, [r3, #16]
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	08da      	lsrs	r2, r3, #3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3208      	adds	r2, #8
 80016f2:	6939      	ldr	r1, [r7, #16]
 80016f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	2203      	movs	r2, #3
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 0203 	and.w	r2, r3, #3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4313      	orrs	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 80ac 	beq.w	8001892 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173a:	4b5f      	ldr	r3, [pc, #380]	@ (80018b8 <HAL_GPIO_Init+0x330>)
 800173c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800173e:	4a5e      	ldr	r2, [pc, #376]	@ (80018b8 <HAL_GPIO_Init+0x330>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6613      	str	r3, [r2, #96]	@ 0x60
 8001746:	4b5c      	ldr	r3, [pc, #368]	@ (80018b8 <HAL_GPIO_Init+0x330>)
 8001748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001752:	4a5a      	ldr	r2, [pc, #360]	@ (80018bc <HAL_GPIO_Init+0x334>)
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	089b      	lsrs	r3, r3, #2
 8001758:	3302      	adds	r3, #2
 800175a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800175e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	220f      	movs	r2, #15
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4013      	ands	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800177c:	d025      	beq.n	80017ca <HAL_GPIO_Init+0x242>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a4f      	ldr	r2, [pc, #316]	@ (80018c0 <HAL_GPIO_Init+0x338>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d01f      	beq.n	80017c6 <HAL_GPIO_Init+0x23e>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4e      	ldr	r2, [pc, #312]	@ (80018c4 <HAL_GPIO_Init+0x33c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d019      	beq.n	80017c2 <HAL_GPIO_Init+0x23a>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4d      	ldr	r2, [pc, #308]	@ (80018c8 <HAL_GPIO_Init+0x340>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d013      	beq.n	80017be <HAL_GPIO_Init+0x236>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a4c      	ldr	r2, [pc, #304]	@ (80018cc <HAL_GPIO_Init+0x344>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d00d      	beq.n	80017ba <HAL_GPIO_Init+0x232>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a4b      	ldr	r2, [pc, #300]	@ (80018d0 <HAL_GPIO_Init+0x348>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d007      	beq.n	80017b6 <HAL_GPIO_Init+0x22e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a4a      	ldr	r2, [pc, #296]	@ (80018d4 <HAL_GPIO_Init+0x34c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d101      	bne.n	80017b2 <HAL_GPIO_Init+0x22a>
 80017ae:	2306      	movs	r3, #6
 80017b0:	e00c      	b.n	80017cc <HAL_GPIO_Init+0x244>
 80017b2:	2307      	movs	r3, #7
 80017b4:	e00a      	b.n	80017cc <HAL_GPIO_Init+0x244>
 80017b6:	2305      	movs	r3, #5
 80017b8:	e008      	b.n	80017cc <HAL_GPIO_Init+0x244>
 80017ba:	2304      	movs	r3, #4
 80017bc:	e006      	b.n	80017cc <HAL_GPIO_Init+0x244>
 80017be:	2303      	movs	r3, #3
 80017c0:	e004      	b.n	80017cc <HAL_GPIO_Init+0x244>
 80017c2:	2302      	movs	r3, #2
 80017c4:	e002      	b.n	80017cc <HAL_GPIO_Init+0x244>
 80017c6:	2301      	movs	r3, #1
 80017c8:	e000      	b.n	80017cc <HAL_GPIO_Init+0x244>
 80017ca:	2300      	movs	r3, #0
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	f002 0203 	and.w	r2, r2, #3
 80017d2:	0092      	lsls	r2, r2, #2
 80017d4:	4093      	lsls	r3, r2
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017dc:	4937      	ldr	r1, [pc, #220]	@ (80018bc <HAL_GPIO_Init+0x334>)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	089b      	lsrs	r3, r3, #2
 80017e2:	3302      	adds	r3, #2
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017ea:	4b3b      	ldr	r3, [pc, #236]	@ (80018d8 <HAL_GPIO_Init+0x350>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	43db      	mvns	r3, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4013      	ands	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4313      	orrs	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800180e:	4a32      	ldr	r2, [pc, #200]	@ (80018d8 <HAL_GPIO_Init+0x350>)
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001814:	4b30      	ldr	r3, [pc, #192]	@ (80018d8 <HAL_GPIO_Init+0x350>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	43db      	mvns	r3, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001838:	4a27      	ldr	r2, [pc, #156]	@ (80018d8 <HAL_GPIO_Init+0x350>)
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800183e:	4b26      	ldr	r3, [pc, #152]	@ (80018d8 <HAL_GPIO_Init+0x350>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	43db      	mvns	r3, r3
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001862:	4a1d      	ldr	r2, [pc, #116]	@ (80018d8 <HAL_GPIO_Init+0x350>)
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001868:	4b1b      	ldr	r3, [pc, #108]	@ (80018d8 <HAL_GPIO_Init+0x350>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800188c:	4a12      	ldr	r2, [pc, #72]	@ (80018d8 <HAL_GPIO_Init+0x350>)
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	3301      	adds	r3, #1
 8001896:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	fa22 f303 	lsr.w	r3, r2, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f47f ae78 	bne.w	8001598 <HAL_GPIO_Init+0x10>
  }
}
 80018a8:	bf00      	nop
 80018aa:	bf00      	nop
 80018ac:	371c      	adds	r7, #28
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40010000 	.word	0x40010000
 80018c0:	48000400 	.word	0x48000400
 80018c4:	48000800 	.word	0x48000800
 80018c8:	48000c00 	.word	0x48000c00
 80018cc:	48001000 	.word	0x48001000
 80018d0:	48001400 	.word	0x48001400
 80018d4:	48001800 	.word	0x48001800
 80018d8:	40010400 	.word	0x40010400

080018dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691a      	ldr	r2, [r3, #16]
 80018ec:	887b      	ldrh	r3, [r7, #2]
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018f4:	2301      	movs	r3, #1
 80018f6:	73fb      	strb	r3, [r7, #15]
 80018f8:	e001      	b.n	80018fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018fa:	2300      	movs	r3, #0
 80018fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	807b      	strh	r3, [r7, #2]
 8001918:	4613      	mov	r3, r2
 800191a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800191c:	787b      	ldrb	r3, [r7, #1]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001922:	887a      	ldrh	r2, [r7, #2]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001928:	e002      	b.n	8001930 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800192a:	887a      	ldrh	r2, [r7, #2]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800194e:	887a      	ldrh	r2, [r7, #2]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4013      	ands	r3, r2
 8001954:	041a      	lsls	r2, r3, #16
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	43d9      	mvns	r1, r3
 800195a:	887b      	ldrh	r3, [r7, #2]
 800195c:	400b      	ands	r3, r1
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	619a      	str	r2, [r3, #24]
}
 8001964:	bf00      	nop
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800197a:	4b08      	ldr	r3, [pc, #32]	@ (800199c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800197c:	695a      	ldr	r2, [r3, #20]
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	4013      	ands	r3, r2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d006      	beq.n	8001994 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001986:	4a05      	ldr	r2, [pc, #20]	@ (800199c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800198c:	88fb      	ldrh	r3, [r7, #6]
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe feea 	bl	8000768 <HAL_GPIO_EXTI_Callback>
  }
}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40010400 	.word	0x40010400

080019a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e08d      	b.n	8001ace <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d106      	bne.n	80019cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff f9ce 	bl	8000d68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2224      	movs	r2, #36	@ 0x24
 80019d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0201 	bic.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d107      	bne.n	8001a1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	e006      	b.n	8001a28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001a26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d108      	bne.n	8001a42 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	685a      	ldr	r2, [r3, #4]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	e007      	b.n	8001a52 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691a      	ldr	r2, [r3, #16]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69d9      	ldr	r1, [r3, #28]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a1a      	ldr	r2, [r3, #32]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2220      	movs	r2, #32
 8001aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af02      	add	r7, sp, #8
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	4608      	mov	r0, r1
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	817b      	strh	r3, [r7, #10]
 8001aea:	460b      	mov	r3, r1
 8001aec:	813b      	strh	r3, [r7, #8]
 8001aee:	4613      	mov	r3, r2
 8001af0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b20      	cmp	r3, #32
 8001afc:	f040 80f9 	bne.w	8001cf2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b00:	6a3b      	ldr	r3, [r7, #32]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <HAL_I2C_Mem_Write+0x34>
 8001b06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d105      	bne.n	8001b18 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b12:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0ed      	b.n	8001cf4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_I2C_Mem_Write+0x4e>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e0e6      	b.n	8001cf4 <HAL_I2C_Mem_Write+0x21c>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b2e:	f7ff fb6b 	bl	8001208 <HAL_GetTick>
 8001b32:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	2319      	movs	r3, #25
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f000 f955 	bl	8001df0 <I2C_WaitOnFlagUntilTimeout>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0d1      	b.n	8001cf4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2221      	movs	r2, #33	@ 0x21
 8001b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2240      	movs	r2, #64	@ 0x40
 8001b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6a3a      	ldr	r2, [r7, #32]
 8001b6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001b70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b78:	88f8      	ldrh	r0, [r7, #6]
 8001b7a:	893a      	ldrh	r2, [r7, #8]
 8001b7c:	8979      	ldrh	r1, [r7, #10]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	9301      	str	r3, [sp, #4]
 8001b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	4603      	mov	r3, r0
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f000 f8b9 	bl	8001d00 <I2C_RequestMemoryWrite>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d005      	beq.n	8001ba0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0a9      	b.n	8001cf4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	2bff      	cmp	r3, #255	@ 0xff
 8001ba8:	d90e      	bls.n	8001bc8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	22ff      	movs	r2, #255	@ 0xff
 8001bae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	8979      	ldrh	r1, [r7, #10]
 8001bb8:	2300      	movs	r3, #0
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 fad9 	bl	8002178 <I2C_TransferConfig>
 8001bc6:	e00f      	b.n	8001be8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	8979      	ldrh	r1, [r7, #10]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 fac8 	bl	8002178 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f000 f958 	bl	8001ea2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e07b      	b.n	8001cf4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c00:	781a      	ldrb	r2, [r3, #0]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c24:	3b01      	subs	r3, #1
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d034      	beq.n	8001ca0 <HAL_I2C_Mem_Write+0x1c8>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d130      	bne.n	8001ca0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c44:	2200      	movs	r2, #0
 8001c46:	2180      	movs	r1, #128	@ 0x80
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 f8d1 	bl	8001df0 <I2C_WaitOnFlagUntilTimeout>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e04d      	b.n	8001cf4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	2bff      	cmp	r3, #255	@ 0xff
 8001c60:	d90e      	bls.n	8001c80 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	22ff      	movs	r2, #255	@ 0xff
 8001c66:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	8979      	ldrh	r1, [r7, #10]
 8001c70:	2300      	movs	r3, #0
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f000 fa7d 	bl	8002178 <I2C_TransferConfig>
 8001c7e:	e00f      	b.n	8001ca0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	8979      	ldrh	r1, [r7, #10]
 8001c92:	2300      	movs	r3, #0
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f000 fa6c 	bl	8002178 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d19e      	bne.n	8001be8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 f93e 	bl	8001f30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e01a      	b.n	8001cf4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6859      	ldr	r1, [r3, #4]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001cfc <HAL_I2C_Mem_Write+0x224>)
 8001cd2:	400b      	ands	r3, r1
 8001cd4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	e000      	b.n	8001cf4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001cf2:	2302      	movs	r3, #2
  }
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	fe00e800 	.word	0xfe00e800

08001d00 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af02      	add	r7, sp, #8
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	4608      	mov	r0, r1
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4603      	mov	r3, r0
 8001d10:	817b      	strh	r3, [r7, #10]
 8001d12:	460b      	mov	r3, r1
 8001d14:	813b      	strh	r3, [r7, #8]
 8001d16:	4613      	mov	r3, r2
 8001d18:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	8979      	ldrh	r1, [r7, #10]
 8001d20:	4b20      	ldr	r3, [pc, #128]	@ (8001da4 <I2C_RequestMemoryWrite+0xa4>)
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f000 fa25 	bl	8002178 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d2e:	69fa      	ldr	r2, [r7, #28]
 8001d30:	69b9      	ldr	r1, [r7, #24]
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f000 f8b5 	bl	8001ea2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e02c      	b.n	8001d9c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d105      	bne.n	8001d54 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d48:	893b      	ldrh	r3, [r7, #8]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d52:	e015      	b.n	8001d80 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d54:	893b      	ldrh	r3, [r7, #8]
 8001d56:	0a1b      	lsrs	r3, r3, #8
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d62:	69fa      	ldr	r2, [r7, #28]
 8001d64:	69b9      	ldr	r1, [r7, #24]
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 f89b 	bl	8001ea2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e012      	b.n	8001d9c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d76:	893b      	ldrh	r3, [r7, #8]
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	2200      	movs	r2, #0
 8001d88:	2180      	movs	r1, #128	@ 0x80
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f000 f830 	bl	8001df0 <I2C_WaitOnFlagUntilTimeout>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	80002000 	.word	0x80002000

08001da8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d103      	bne.n	8001dc6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d007      	beq.n	8001de4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699a      	ldr	r2, [r3, #24]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0201 	orr.w	r2, r2, #1
 8001de2:	619a      	str	r2, [r3, #24]
  }
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e00:	e03b      	b.n	8001e7a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	6839      	ldr	r1, [r7, #0]
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 f8d6 	bl	8001fb8 <I2C_IsErrorOccurred>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e041      	b.n	8001e9a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1c:	d02d      	beq.n	8001e7a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e1e:	f7ff f9f3 	bl	8001208 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d302      	bcc.n	8001e34 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d122      	bne.n	8001e7a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699a      	ldr	r2, [r3, #24]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	bf0c      	ite	eq
 8001e44:	2301      	moveq	r3, #1
 8001e46:	2300      	movne	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d113      	bne.n	8001e7a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e56:	f043 0220 	orr.w	r2, r3, #32
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2220      	movs	r2, #32
 8001e62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e00f      	b.n	8001e9a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	699a      	ldr	r2, [r3, #24]
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	4013      	ands	r3, r2
 8001e84:	68ba      	ldr	r2, [r7, #8]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	bf0c      	ite	eq
 8001e8a:	2301      	moveq	r3, #1
 8001e8c:	2300      	movne	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d0b4      	beq.n	8001e02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001eae:	e033      	b.n	8001f18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	68b9      	ldr	r1, [r7, #8]
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f000 f87f 	bl	8001fb8 <I2C_IsErrorOccurred>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e031      	b.n	8001f28 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eca:	d025      	beq.n	8001f18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ecc:	f7ff f99c 	bl	8001208 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d302      	bcc.n	8001ee2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d11a      	bne.n	8001f18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d013      	beq.n	8001f18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef4:	f043 0220 	orr.w	r2, r3, #32
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2220      	movs	r2, #32
 8001f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e007      	b.n	8001f28 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d1c4      	bne.n	8001eb0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f3c:	e02f      	b.n	8001f9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68b9      	ldr	r1, [r7, #8]
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 f838 	bl	8001fb8 <I2C_IsErrorOccurred>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e02d      	b.n	8001fae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f52:	f7ff f959 	bl	8001208 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d302      	bcc.n	8001f68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d11a      	bne.n	8001f9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	f003 0320 	and.w	r3, r3, #32
 8001f72:	2b20      	cmp	r3, #32
 8001f74:	d013      	beq.n	8001f9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7a:	f043 0220 	orr.w	r2, r3, #32
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2220      	movs	r2, #32
 8001f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e007      	b.n	8001fae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	f003 0320 	and.w	r3, r3, #32
 8001fa8:	2b20      	cmp	r3, #32
 8001faa:	d1c8      	bne.n	8001f3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	@ 0x28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	f003 0310 	and.w	r3, r3, #16
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d068      	beq.n	80020b6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2210      	movs	r2, #16
 8001fea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001fec:	e049      	b.n	8002082 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff4:	d045      	beq.n	8002082 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ff6:	f7ff f907 	bl	8001208 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	68ba      	ldr	r2, [r7, #8]
 8002002:	429a      	cmp	r2, r3
 8002004:	d302      	bcc.n	800200c <I2C_IsErrorOccurred+0x54>
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d13a      	bne.n	8002082 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002016:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800201e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800202a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800202e:	d121      	bne.n	8002074 <I2C_IsErrorOccurred+0xbc>
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002036:	d01d      	beq.n	8002074 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002038:	7cfb      	ldrb	r3, [r7, #19]
 800203a:	2b20      	cmp	r3, #32
 800203c:	d01a      	beq.n	8002074 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800204c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800204e:	f7ff f8db 	bl	8001208 <HAL_GetTick>
 8002052:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002054:	e00e      	b.n	8002074 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002056:	f7ff f8d7 	bl	8001208 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b19      	cmp	r3, #25
 8002062:	d907      	bls.n	8002074 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002064:	6a3b      	ldr	r3, [r7, #32]
 8002066:	f043 0320 	orr.w	r3, r3, #32
 800206a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002072:	e006      	b.n	8002082 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	f003 0320 	and.w	r3, r3, #32
 800207e:	2b20      	cmp	r3, #32
 8002080:	d1e9      	bne.n	8002056 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	f003 0320 	and.w	r3, r3, #32
 800208c:	2b20      	cmp	r3, #32
 800208e:	d003      	beq.n	8002098 <I2C_IsErrorOccurred+0xe0>
 8002090:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0aa      	beq.n	8001fee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002098:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800209c:	2b00      	cmp	r3, #0
 800209e:	d103      	bne.n	80020a8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2220      	movs	r2, #32
 80020a6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	f043 0304 	orr.w	r3, r3, #4
 80020ae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00b      	beq.n	80020e0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00b      	beq.n	8002102 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80020ea:	6a3b      	ldr	r3, [r7, #32]
 80020ec:	f043 0308 	orr.w	r3, r3, #8
 80020f0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00b      	beq.n	8002124 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	f043 0302 	orr.w	r3, r3, #2
 8002112:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800211c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002124:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002128:	2b00      	cmp	r3, #0
 800212a:	d01c      	beq.n	8002166 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f7ff fe3b 	bl	8001da8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6859      	ldr	r1, [r3, #4]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b0d      	ldr	r3, [pc, #52]	@ (8002174 <I2C_IsErrorOccurred+0x1bc>)
 800213e:	400b      	ands	r3, r1
 8002140:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002146:	6a3b      	ldr	r3, [r7, #32]
 8002148:	431a      	orrs	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2220      	movs	r2, #32
 8002152:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002166:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800216a:	4618      	mov	r0, r3
 800216c:	3728      	adds	r7, #40	@ 0x28
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	fe00e800 	.word	0xfe00e800

08002178 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002178:	b480      	push	{r7}
 800217a:	b087      	sub	sp, #28
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	607b      	str	r3, [r7, #4]
 8002182:	460b      	mov	r3, r1
 8002184:	817b      	strh	r3, [r7, #10]
 8002186:	4613      	mov	r3, r2
 8002188:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800218a:	897b      	ldrh	r3, [r7, #10]
 800218c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002190:	7a7b      	ldrb	r3, [r7, #9]
 8002192:	041b      	lsls	r3, r3, #16
 8002194:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002198:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80021a6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	0d5b      	lsrs	r3, r3, #21
 80021b2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80021b6:	4b08      	ldr	r3, [pc, #32]	@ (80021d8 <I2C_TransferConfig+0x60>)
 80021b8:	430b      	orrs	r3, r1
 80021ba:	43db      	mvns	r3, r3
 80021bc:	ea02 0103 	and.w	r1, r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80021ca:	bf00      	nop
 80021cc:	371c      	adds	r7, #28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	03ff63ff 	.word	0x03ff63ff

080021dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b20      	cmp	r3, #32
 80021f0:	d138      	bne.n	8002264 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d101      	bne.n	8002200 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021fc:	2302      	movs	r3, #2
 80021fe:	e032      	b.n	8002266 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2224      	movs	r2, #36	@ 0x24
 800220c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0201 	bic.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800222e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6819      	ldr	r1, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0201 	orr.w	r2, r2, #1
 800224e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2220      	movs	r2, #32
 8002254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	e000      	b.n	8002266 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002264:	2302      	movs	r3, #2
  }
}
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002272:	b480      	push	{r7}
 8002274:	b085      	sub	sp, #20
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b20      	cmp	r3, #32
 8002286:	d139      	bne.n	80022fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002292:	2302      	movs	r3, #2
 8002294:	e033      	b.n	80022fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2224      	movs	r2, #36	@ 0x24
 80022a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0201 	bic.w	r2, r2, #1
 80022b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80022c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	021b      	lsls	r3, r3, #8
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0201 	orr.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2220      	movs	r2, #32
 80022ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	e000      	b.n	80022fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022fc:	2302      	movs	r3, #2
  }
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
	...

0800230c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002310:	4b04      	ldr	r3, [pc, #16]	@ (8002324 <HAL_PWREx_GetVoltageRange+0x18>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40007000 	.word	0x40007000

08002328 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002336:	d130      	bne.n	800239a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002338:	4b23      	ldr	r3, [pc, #140]	@ (80023c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002340:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002344:	d038      	beq.n	80023b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002346:	4b20      	ldr	r3, [pc, #128]	@ (80023c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800234e:	4a1e      	ldr	r2, [pc, #120]	@ (80023c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002350:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002354:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002356:	4b1d      	ldr	r3, [pc, #116]	@ (80023cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2232      	movs	r2, #50	@ 0x32
 800235c:	fb02 f303 	mul.w	r3, r2, r3
 8002360:	4a1b      	ldr	r2, [pc, #108]	@ (80023d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002362:	fba2 2303 	umull	r2, r3, r2, r3
 8002366:	0c9b      	lsrs	r3, r3, #18
 8002368:	3301      	adds	r3, #1
 800236a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800236c:	e002      	b.n	8002374 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	3b01      	subs	r3, #1
 8002372:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002374:	4b14      	ldr	r3, [pc, #80]	@ (80023c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800237c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002380:	d102      	bne.n	8002388 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1f2      	bne.n	800236e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002388:	4b0f      	ldr	r3, [pc, #60]	@ (80023c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002390:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002394:	d110      	bne.n	80023b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e00f      	b.n	80023ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800239a:	4b0b      	ldr	r3, [pc, #44]	@ (80023c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023a6:	d007      	beq.n	80023b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023a8:	4b07      	ldr	r3, [pc, #28]	@ (80023c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023b0:	4a05      	ldr	r2, [pc, #20]	@ (80023c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	40007000 	.word	0x40007000
 80023cc:	20000034 	.word	0x20000034
 80023d0:	431bde83 	.word	0x431bde83

080023d4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e3ca      	b.n	8002b7c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023e6:	4b97      	ldr	r3, [pc, #604]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 030c 	and.w	r3, r3, #12
 80023ee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023f0:	4b94      	ldr	r3, [pc, #592]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f003 0303 	and.w	r3, r3, #3
 80023f8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0310 	and.w	r3, r3, #16
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 80e4 	beq.w	80025d0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d007      	beq.n	800241e <HAL_RCC_OscConfig+0x4a>
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	2b0c      	cmp	r3, #12
 8002412:	f040 808b 	bne.w	800252c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	2b01      	cmp	r3, #1
 800241a:	f040 8087 	bne.w	800252c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800241e:	4b89      	ldr	r3, [pc, #548]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <HAL_RCC_OscConfig+0x62>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e3a2      	b.n	8002b7c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1a      	ldr	r2, [r3, #32]
 800243a:	4b82      	ldr	r3, [pc, #520]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d004      	beq.n	8002450 <HAL_RCC_OscConfig+0x7c>
 8002446:	4b7f      	ldr	r3, [pc, #508]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800244e:	e005      	b.n	800245c <HAL_RCC_OscConfig+0x88>
 8002450:	4b7c      	ldr	r3, [pc, #496]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 8002452:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002456:	091b      	lsrs	r3, r3, #4
 8002458:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800245c:	4293      	cmp	r3, r2
 800245e:	d223      	bcs.n	80024a8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	4618      	mov	r0, r3
 8002466:	f000 fd55 	bl	8002f14 <RCC_SetFlashLatencyFromMSIRange>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e383      	b.n	8002b7c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002474:	4b73      	ldr	r3, [pc, #460]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a72      	ldr	r2, [pc, #456]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 800247a:	f043 0308 	orr.w	r3, r3, #8
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	4b70      	ldr	r3, [pc, #448]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	496d      	ldr	r1, [pc, #436]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 800248e:	4313      	orrs	r3, r2
 8002490:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002492:	4b6c      	ldr	r3, [pc, #432]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	021b      	lsls	r3, r3, #8
 80024a0:	4968      	ldr	r1, [pc, #416]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	604b      	str	r3, [r1, #4]
 80024a6:	e025      	b.n	80024f4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024a8:	4b66      	ldr	r3, [pc, #408]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a65      	ldr	r2, [pc, #404]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 80024ae:	f043 0308 	orr.w	r3, r3, #8
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	4b63      	ldr	r3, [pc, #396]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	4960      	ldr	r1, [pc, #384]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024c6:	4b5f      	ldr	r3, [pc, #380]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	021b      	lsls	r3, r3, #8
 80024d4:	495b      	ldr	r1, [pc, #364]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d109      	bne.n	80024f4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 fd15 	bl	8002f14 <RCC_SetFlashLatencyFromMSIRange>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e343      	b.n	8002b7c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024f4:	f000 fc4a 	bl	8002d8c <HAL_RCC_GetSysClockFreq>
 80024f8:	4602      	mov	r2, r0
 80024fa:	4b52      	ldr	r3, [pc, #328]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	091b      	lsrs	r3, r3, #4
 8002500:	f003 030f 	and.w	r3, r3, #15
 8002504:	4950      	ldr	r1, [pc, #320]	@ (8002648 <HAL_RCC_OscConfig+0x274>)
 8002506:	5ccb      	ldrb	r3, [r1, r3]
 8002508:	f003 031f 	and.w	r3, r3, #31
 800250c:	fa22 f303 	lsr.w	r3, r2, r3
 8002510:	4a4e      	ldr	r2, [pc, #312]	@ (800264c <HAL_RCC_OscConfig+0x278>)
 8002512:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002514:	4b4e      	ldr	r3, [pc, #312]	@ (8002650 <HAL_RCC_OscConfig+0x27c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe fe25 	bl	8001168 <HAL_InitTick>
 800251e:	4603      	mov	r3, r0
 8002520:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d052      	beq.n	80025ce <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	e327      	b.n	8002b7c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d032      	beq.n	800259a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002534:	4b43      	ldr	r3, [pc, #268]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a42      	ldr	r2, [pc, #264]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002540:	f7fe fe62 	bl	8001208 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002548:	f7fe fe5e 	bl	8001208 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e310      	b.n	8002b7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800255a:	4b3a      	ldr	r3, [pc, #232]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002566:	4b37      	ldr	r3, [pc, #220]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a36      	ldr	r2, [pc, #216]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 800256c:	f043 0308 	orr.w	r3, r3, #8
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	4b34      	ldr	r3, [pc, #208]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	4931      	ldr	r1, [pc, #196]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 8002580:	4313      	orrs	r3, r2
 8002582:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002584:	4b2f      	ldr	r3, [pc, #188]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	021b      	lsls	r3, r3, #8
 8002592:	492c      	ldr	r1, [pc, #176]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 8002594:	4313      	orrs	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
 8002598:	e01a      	b.n	80025d0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800259a:	4b2a      	ldr	r3, [pc, #168]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a29      	ldr	r2, [pc, #164]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 80025a0:	f023 0301 	bic.w	r3, r3, #1
 80025a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025a6:	f7fe fe2f 	bl	8001208 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025ae:	f7fe fe2b 	bl	8001208 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e2dd      	b.n	8002b7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025c0:	4b20      	ldr	r3, [pc, #128]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f0      	bne.n	80025ae <HAL_RCC_OscConfig+0x1da>
 80025cc:	e000      	b.n	80025d0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025ce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d074      	beq.n	80026c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d005      	beq.n	80025ee <HAL_RCC_OscConfig+0x21a>
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	2b0c      	cmp	r3, #12
 80025e6:	d10e      	bne.n	8002606 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	d10b      	bne.n	8002606 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ee:	4b15      	ldr	r3, [pc, #84]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d064      	beq.n	80026c4 <HAL_RCC_OscConfig+0x2f0>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d160      	bne.n	80026c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e2ba      	b.n	8002b7c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800260e:	d106      	bne.n	800261e <HAL_RCC_OscConfig+0x24a>
 8002610:	4b0c      	ldr	r3, [pc, #48]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a0b      	ldr	r2, [pc, #44]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 8002616:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	e026      	b.n	800266c <HAL_RCC_OscConfig+0x298>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002626:	d115      	bne.n	8002654 <HAL_RCC_OscConfig+0x280>
 8002628:	4b06      	ldr	r3, [pc, #24]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a05      	ldr	r2, [pc, #20]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 800262e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	4b03      	ldr	r3, [pc, #12]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a02      	ldr	r2, [pc, #8]	@ (8002644 <HAL_RCC_OscConfig+0x270>)
 800263a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	e014      	b.n	800266c <HAL_RCC_OscConfig+0x298>
 8002642:	bf00      	nop
 8002644:	40021000 	.word	0x40021000
 8002648:	08005f7c 	.word	0x08005f7c
 800264c:	20000034 	.word	0x20000034
 8002650:	20000038 	.word	0x20000038
 8002654:	4ba0      	ldr	r3, [pc, #640]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a9f      	ldr	r2, [pc, #636]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 800265a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800265e:	6013      	str	r3, [r2, #0]
 8002660:	4b9d      	ldr	r3, [pc, #628]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a9c      	ldr	r2, [pc, #624]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 8002666:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800266a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d013      	beq.n	800269c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002674:	f7fe fdc8 	bl	8001208 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800267c:	f7fe fdc4 	bl	8001208 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b64      	cmp	r3, #100	@ 0x64
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e276      	b.n	8002b7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800268e:	4b92      	ldr	r3, [pc, #584]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0f0      	beq.n	800267c <HAL_RCC_OscConfig+0x2a8>
 800269a:	e014      	b.n	80026c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269c:	f7fe fdb4 	bl	8001208 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a4:	f7fe fdb0 	bl	8001208 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b64      	cmp	r3, #100	@ 0x64
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e262      	b.n	8002b7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026b6:	4b88      	ldr	r3, [pc, #544]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f0      	bne.n	80026a4 <HAL_RCC_OscConfig+0x2d0>
 80026c2:	e000      	b.n	80026c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d060      	beq.n	8002794 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d005      	beq.n	80026e4 <HAL_RCC_OscConfig+0x310>
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	2b0c      	cmp	r3, #12
 80026dc:	d119      	bne.n	8002712 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d116      	bne.n	8002712 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026e4:	4b7c      	ldr	r3, [pc, #496]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_RCC_OscConfig+0x328>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e23f      	b.n	8002b7c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fc:	4b76      	ldr	r3, [pc, #472]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	061b      	lsls	r3, r3, #24
 800270a:	4973      	ldr	r1, [pc, #460]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 800270c:	4313      	orrs	r3, r2
 800270e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002710:	e040      	b.n	8002794 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d023      	beq.n	8002762 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800271a:	4b6f      	ldr	r3, [pc, #444]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a6e      	ldr	r2, [pc, #440]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 8002720:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002724:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002726:	f7fe fd6f 	bl	8001208 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800272e:	f7fe fd6b 	bl	8001208 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e21d      	b.n	8002b7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002740:	4b65      	ldr	r3, [pc, #404]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0f0      	beq.n	800272e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274c:	4b62      	ldr	r3, [pc, #392]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	061b      	lsls	r3, r3, #24
 800275a:	495f      	ldr	r1, [pc, #380]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 800275c:	4313      	orrs	r3, r2
 800275e:	604b      	str	r3, [r1, #4]
 8002760:	e018      	b.n	8002794 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002762:	4b5d      	ldr	r3, [pc, #372]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a5c      	ldr	r2, [pc, #368]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 8002768:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800276c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276e:	f7fe fd4b 	bl	8001208 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002776:	f7fe fd47 	bl	8001208 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e1f9      	b.n	8002b7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002788:	4b53      	ldr	r3, [pc, #332]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1f0      	bne.n	8002776 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b00      	cmp	r3, #0
 800279e:	d03c      	beq.n	800281a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d01c      	beq.n	80027e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027a8:	4b4b      	ldr	r3, [pc, #300]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 80027aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027ae:	4a4a      	ldr	r2, [pc, #296]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b8:	f7fe fd26 	bl	8001208 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c0:	f7fe fd22 	bl	8001208 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e1d4      	b.n	8002b7c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027d2:	4b41      	ldr	r3, [pc, #260]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 80027d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0ef      	beq.n	80027c0 <HAL_RCC_OscConfig+0x3ec>
 80027e0:	e01b      	b.n	800281a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027e2:	4b3d      	ldr	r3, [pc, #244]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 80027e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027e8:	4a3b      	ldr	r2, [pc, #236]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 80027ea:	f023 0301 	bic.w	r3, r3, #1
 80027ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f2:	f7fe fd09 	bl	8001208 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027fa:	f7fe fd05 	bl	8001208 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e1b7      	b.n	8002b7c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800280c:	4b32      	ldr	r3, [pc, #200]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 800280e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1ef      	bne.n	80027fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 80a6 	beq.w	8002974 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002828:	2300      	movs	r3, #0
 800282a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800282c:	4b2a      	ldr	r3, [pc, #168]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 800282e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10d      	bne.n	8002854 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002838:	4b27      	ldr	r3, [pc, #156]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 800283a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800283c:	4a26      	ldr	r2, [pc, #152]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 800283e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002842:	6593      	str	r3, [r2, #88]	@ 0x58
 8002844:	4b24      	ldr	r3, [pc, #144]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 8002846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002848:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002850:	2301      	movs	r3, #1
 8002852:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002854:	4b21      	ldr	r3, [pc, #132]	@ (80028dc <HAL_RCC_OscConfig+0x508>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800285c:	2b00      	cmp	r3, #0
 800285e:	d118      	bne.n	8002892 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002860:	4b1e      	ldr	r3, [pc, #120]	@ (80028dc <HAL_RCC_OscConfig+0x508>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a1d      	ldr	r2, [pc, #116]	@ (80028dc <HAL_RCC_OscConfig+0x508>)
 8002866:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800286a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800286c:	f7fe fccc 	bl	8001208 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002874:	f7fe fcc8 	bl	8001208 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e17a      	b.n	8002b7c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002886:	4b15      	ldr	r3, [pc, #84]	@ (80028dc <HAL_RCC_OscConfig+0x508>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f0      	beq.n	8002874 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d108      	bne.n	80028ac <HAL_RCC_OscConfig+0x4d8>
 800289a:	4b0f      	ldr	r3, [pc, #60]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 800289c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a0:	4a0d      	ldr	r2, [pc, #52]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028aa:	e029      	b.n	8002900 <HAL_RCC_OscConfig+0x52c>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b05      	cmp	r3, #5
 80028b2:	d115      	bne.n	80028e0 <HAL_RCC_OscConfig+0x50c>
 80028b4:	4b08      	ldr	r3, [pc, #32]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 80028b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ba:	4a07      	ldr	r2, [pc, #28]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 80028bc:	f043 0304 	orr.w	r3, r3, #4
 80028c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028c4:	4b04      	ldr	r3, [pc, #16]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 80028c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ca:	4a03      	ldr	r2, [pc, #12]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028d4:	e014      	b.n	8002900 <HAL_RCC_OscConfig+0x52c>
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40007000 	.word	0x40007000
 80028e0:	4b9c      	ldr	r3, [pc, #624]	@ (8002b54 <HAL_RCC_OscConfig+0x780>)
 80028e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e6:	4a9b      	ldr	r2, [pc, #620]	@ (8002b54 <HAL_RCC_OscConfig+0x780>)
 80028e8:	f023 0301 	bic.w	r3, r3, #1
 80028ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028f0:	4b98      	ldr	r3, [pc, #608]	@ (8002b54 <HAL_RCC_OscConfig+0x780>)
 80028f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f6:	4a97      	ldr	r2, [pc, #604]	@ (8002b54 <HAL_RCC_OscConfig+0x780>)
 80028f8:	f023 0304 	bic.w	r3, r3, #4
 80028fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d016      	beq.n	8002936 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002908:	f7fe fc7e 	bl	8001208 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800290e:	e00a      	b.n	8002926 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002910:	f7fe fc7a 	bl	8001208 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800291e:	4293      	cmp	r3, r2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e12a      	b.n	8002b7c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002926:	4b8b      	ldr	r3, [pc, #556]	@ (8002b54 <HAL_RCC_OscConfig+0x780>)
 8002928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0ed      	beq.n	8002910 <HAL_RCC_OscConfig+0x53c>
 8002934:	e015      	b.n	8002962 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002936:	f7fe fc67 	bl	8001208 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800293c:	e00a      	b.n	8002954 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293e:	f7fe fc63 	bl	8001208 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	f241 3288 	movw	r2, #5000	@ 0x1388
 800294c:	4293      	cmp	r3, r2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e113      	b.n	8002b7c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002954:	4b7f      	ldr	r3, [pc, #508]	@ (8002b54 <HAL_RCC_OscConfig+0x780>)
 8002956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1ed      	bne.n	800293e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002962:	7ffb      	ldrb	r3, [r7, #31]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d105      	bne.n	8002974 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002968:	4b7a      	ldr	r3, [pc, #488]	@ (8002b54 <HAL_RCC_OscConfig+0x780>)
 800296a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296c:	4a79      	ldr	r2, [pc, #484]	@ (8002b54 <HAL_RCC_OscConfig+0x780>)
 800296e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002972:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 80fe 	beq.w	8002b7a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002982:	2b02      	cmp	r3, #2
 8002984:	f040 80d0 	bne.w	8002b28 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002988:	4b72      	ldr	r3, [pc, #456]	@ (8002b54 <HAL_RCC_OscConfig+0x780>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f003 0203 	and.w	r2, r3, #3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002998:	429a      	cmp	r2, r3
 800299a:	d130      	bne.n	80029fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a6:	3b01      	subs	r3, #1
 80029a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d127      	bne.n	80029fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d11f      	bne.n	80029fe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80029c8:	2a07      	cmp	r2, #7
 80029ca:	bf14      	ite	ne
 80029cc:	2201      	movne	r2, #1
 80029ce:	2200      	moveq	r2, #0
 80029d0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d113      	bne.n	80029fe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e0:	085b      	lsrs	r3, r3, #1
 80029e2:	3b01      	subs	r3, #1
 80029e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d109      	bne.n	80029fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f4:	085b      	lsrs	r3, r3, #1
 80029f6:	3b01      	subs	r3, #1
 80029f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d06e      	beq.n	8002adc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	2b0c      	cmp	r3, #12
 8002a02:	d069      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a04:	4b53      	ldr	r3, [pc, #332]	@ (8002b54 <HAL_RCC_OscConfig+0x780>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d105      	bne.n	8002a1c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a10:	4b50      	ldr	r3, [pc, #320]	@ (8002b54 <HAL_RCC_OscConfig+0x780>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0ad      	b.n	8002b7c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a20:	4b4c      	ldr	r3, [pc, #304]	@ (8002b54 <HAL_RCC_OscConfig+0x780>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a4b      	ldr	r2, [pc, #300]	@ (8002b54 <HAL_RCC_OscConfig+0x780>)
 8002a26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a2a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a2c:	f7fe fbec 	bl	8001208 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a34:	f7fe fbe8 	bl	8001208 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e09a      	b.n	8002b7c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a46:	4b43      	ldr	r3, [pc, #268]	@ (8002b54 <HAL_RCC_OscConfig+0x780>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a52:	4b40      	ldr	r3, [pc, #256]	@ (8002b54 <HAL_RCC_OscConfig+0x780>)
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	4b40      	ldr	r3, [pc, #256]	@ (8002b58 <HAL_RCC_OscConfig+0x784>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a62:	3a01      	subs	r2, #1
 8002a64:	0112      	lsls	r2, r2, #4
 8002a66:	4311      	orrs	r1, r2
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a6c:	0212      	lsls	r2, r2, #8
 8002a6e:	4311      	orrs	r1, r2
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a74:	0852      	lsrs	r2, r2, #1
 8002a76:	3a01      	subs	r2, #1
 8002a78:	0552      	lsls	r2, r2, #21
 8002a7a:	4311      	orrs	r1, r2
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002a80:	0852      	lsrs	r2, r2, #1
 8002a82:	3a01      	subs	r2, #1
 8002a84:	0652      	lsls	r2, r2, #25
 8002a86:	4311      	orrs	r1, r2
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a8c:	0912      	lsrs	r2, r2, #4
 8002a8e:	0452      	lsls	r2, r2, #17
 8002a90:	430a      	orrs	r2, r1
 8002a92:	4930      	ldr	r1, [pc, #192]	@ (8002b54 <HAL_RCC_OscConfig+0x780>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a98:	4b2e      	ldr	r3, [pc, #184]	@ (8002b54 <HAL_RCC_OscConfig+0x780>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a2d      	ldr	r2, [pc, #180]	@ (8002b54 <HAL_RCC_OscConfig+0x780>)
 8002a9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aa2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8002b54 <HAL_RCC_OscConfig+0x780>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	4a2a      	ldr	r2, [pc, #168]	@ (8002b54 <HAL_RCC_OscConfig+0x780>)
 8002aaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ab0:	f7fe fbaa 	bl	8001208 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab8:	f7fe fba6 	bl	8001208 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e058      	b.n	8002b7c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aca:	4b22      	ldr	r3, [pc, #136]	@ (8002b54 <HAL_RCC_OscConfig+0x780>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ad6:	e050      	b.n	8002b7a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e04f      	b.n	8002b7c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002adc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b54 <HAL_RCC_OscConfig+0x780>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d148      	bne.n	8002b7a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b54 <HAL_RCC_OscConfig+0x780>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a19      	ldr	r2, [pc, #100]	@ (8002b54 <HAL_RCC_OscConfig+0x780>)
 8002aee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002af2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002af4:	4b17      	ldr	r3, [pc, #92]	@ (8002b54 <HAL_RCC_OscConfig+0x780>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	4a16      	ldr	r2, [pc, #88]	@ (8002b54 <HAL_RCC_OscConfig+0x780>)
 8002afa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002afe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b00:	f7fe fb82 	bl	8001208 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b08:	f7fe fb7e 	bl	8001208 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e030      	b.n	8002b7c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b54 <HAL_RCC_OscConfig+0x780>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0x734>
 8002b26:	e028      	b.n	8002b7a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	2b0c      	cmp	r3, #12
 8002b2c:	d023      	beq.n	8002b76 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b2e:	4b09      	ldr	r3, [pc, #36]	@ (8002b54 <HAL_RCC_OscConfig+0x780>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a08      	ldr	r2, [pc, #32]	@ (8002b54 <HAL_RCC_OscConfig+0x780>)
 8002b34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3a:	f7fe fb65 	bl	8001208 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b40:	e00c      	b.n	8002b5c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b42:	f7fe fb61 	bl	8001208 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d905      	bls.n	8002b5c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e013      	b.n	8002b7c <HAL_RCC_OscConfig+0x7a8>
 8002b54:	40021000 	.word	0x40021000
 8002b58:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b5c:	4b09      	ldr	r3, [pc, #36]	@ (8002b84 <HAL_RCC_OscConfig+0x7b0>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1ec      	bne.n	8002b42 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b68:	4b06      	ldr	r3, [pc, #24]	@ (8002b84 <HAL_RCC_OscConfig+0x7b0>)
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	4905      	ldr	r1, [pc, #20]	@ (8002b84 <HAL_RCC_OscConfig+0x7b0>)
 8002b6e:	4b06      	ldr	r3, [pc, #24]	@ (8002b88 <HAL_RCC_OscConfig+0x7b4>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	60cb      	str	r3, [r1, #12]
 8002b74:	e001      	b.n	8002b7a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3720      	adds	r7, #32
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40021000 	.word	0x40021000
 8002b88:	feeefffc 	.word	0xfeeefffc

08002b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e0e7      	b.n	8002d70 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ba0:	4b75      	ldr	r3, [pc, #468]	@ (8002d78 <HAL_RCC_ClockConfig+0x1ec>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d910      	bls.n	8002bd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bae:	4b72      	ldr	r3, [pc, #456]	@ (8002d78 <HAL_RCC_ClockConfig+0x1ec>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f023 0207 	bic.w	r2, r3, #7
 8002bb6:	4970      	ldr	r1, [pc, #448]	@ (8002d78 <HAL_RCC_ClockConfig+0x1ec>)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bbe:	4b6e      	ldr	r3, [pc, #440]	@ (8002d78 <HAL_RCC_ClockConfig+0x1ec>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d001      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e0cf      	b.n	8002d70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d010      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	4b66      	ldr	r3, [pc, #408]	@ (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d908      	bls.n	8002bfe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bec:	4b63      	ldr	r3, [pc, #396]	@ (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	4960      	ldr	r1, [pc, #384]	@ (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d04c      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	d107      	bne.n	8002c22 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c12:	4b5a      	ldr	r3, [pc, #360]	@ (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d121      	bne.n	8002c62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e0a6      	b.n	8002d70 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d107      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c2a:	4b54      	ldr	r3, [pc, #336]	@ (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d115      	bne.n	8002c62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e09a      	b.n	8002d70 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d107      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c42:	4b4e      	ldr	r3, [pc, #312]	@ (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d109      	bne.n	8002c62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e08e      	b.n	8002d70 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c52:	4b4a      	ldr	r3, [pc, #296]	@ (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e086      	b.n	8002d70 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c62:	4b46      	ldr	r3, [pc, #280]	@ (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f023 0203 	bic.w	r2, r3, #3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	4943      	ldr	r1, [pc, #268]	@ (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c74:	f7fe fac8 	bl	8001208 <HAL_GetTick>
 8002c78:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7a:	e00a      	b.n	8002c92 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c7c:	f7fe fac4 	bl	8001208 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e06e      	b.n	8002d70 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c92:	4b3a      	ldr	r3, [pc, #232]	@ (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 020c 	and.w	r2, r3, #12
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d1eb      	bne.n	8002c7c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d010      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	4b31      	ldr	r3, [pc, #196]	@ (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d208      	bcs.n	8002cd2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cc0:	4b2e      	ldr	r3, [pc, #184]	@ (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	492b      	ldr	r1, [pc, #172]	@ (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd2:	4b29      	ldr	r3, [pc, #164]	@ (8002d78 <HAL_RCC_ClockConfig+0x1ec>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d210      	bcs.n	8002d02 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce0:	4b25      	ldr	r3, [pc, #148]	@ (8002d78 <HAL_RCC_ClockConfig+0x1ec>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f023 0207 	bic.w	r2, r3, #7
 8002ce8:	4923      	ldr	r1, [pc, #140]	@ (8002d78 <HAL_RCC_ClockConfig+0x1ec>)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf0:	4b21      	ldr	r3, [pc, #132]	@ (8002d78 <HAL_RCC_ClockConfig+0x1ec>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d001      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e036      	b.n	8002d70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d008      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	4918      	ldr	r1, [pc, #96]	@ (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d009      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d2c:	4b13      	ldr	r3, [pc, #76]	@ (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4910      	ldr	r1, [pc, #64]	@ (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d40:	f000 f824 	bl	8002d8c <HAL_RCC_GetSysClockFreq>
 8002d44:	4602      	mov	r2, r0
 8002d46:	4b0d      	ldr	r3, [pc, #52]	@ (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	091b      	lsrs	r3, r3, #4
 8002d4c:	f003 030f 	and.w	r3, r3, #15
 8002d50:	490b      	ldr	r1, [pc, #44]	@ (8002d80 <HAL_RCC_ClockConfig+0x1f4>)
 8002d52:	5ccb      	ldrb	r3, [r1, r3]
 8002d54:	f003 031f 	and.w	r3, r3, #31
 8002d58:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5c:	4a09      	ldr	r2, [pc, #36]	@ (8002d84 <HAL_RCC_ClockConfig+0x1f8>)
 8002d5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d60:	4b09      	ldr	r3, [pc, #36]	@ (8002d88 <HAL_RCC_ClockConfig+0x1fc>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fe f9ff 	bl	8001168 <HAL_InitTick>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d6e:	7afb      	ldrb	r3, [r7, #11]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40022000 	.word	0x40022000
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	08005f7c 	.word	0x08005f7c
 8002d84:	20000034 	.word	0x20000034
 8002d88:	20000038 	.word	0x20000038

08002d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b089      	sub	sp, #36	@ 0x24
 8002d90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
 8002d96:	2300      	movs	r3, #0
 8002d98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d9a:	4b3e      	ldr	r3, [pc, #248]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
 8002da2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002da4:	4b3b      	ldr	r3, [pc, #236]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f003 0303 	and.w	r3, r3, #3
 8002dac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x34>
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	2b0c      	cmp	r3, #12
 8002db8:	d121      	bne.n	8002dfe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d11e      	bne.n	8002dfe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002dc0:	4b34      	ldr	r3, [pc, #208]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d107      	bne.n	8002ddc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002dcc:	4b31      	ldr	r3, [pc, #196]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dd2:	0a1b      	lsrs	r3, r3, #8
 8002dd4:	f003 030f 	and.w	r3, r3, #15
 8002dd8:	61fb      	str	r3, [r7, #28]
 8002dda:	e005      	b.n	8002de8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ddc:	4b2d      	ldr	r3, [pc, #180]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	091b      	lsrs	r3, r3, #4
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002de8:	4a2b      	ldr	r2, [pc, #172]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10d      	bne.n	8002e14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dfc:	e00a      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d102      	bne.n	8002e0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e04:	4b25      	ldr	r3, [pc, #148]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x110>)
 8002e06:	61bb      	str	r3, [r7, #24]
 8002e08:	e004      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d101      	bne.n	8002e14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e10:	4b23      	ldr	r3, [pc, #140]	@ (8002ea0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	2b0c      	cmp	r3, #12
 8002e18:	d134      	bne.n	8002e84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d003      	beq.n	8002e32 <HAL_RCC_GetSysClockFreq+0xa6>
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	2b03      	cmp	r3, #3
 8002e2e:	d003      	beq.n	8002e38 <HAL_RCC_GetSysClockFreq+0xac>
 8002e30:	e005      	b.n	8002e3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e32:	4b1a      	ldr	r3, [pc, #104]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x110>)
 8002e34:	617b      	str	r3, [r7, #20]
      break;
 8002e36:	e005      	b.n	8002e44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e38:	4b19      	ldr	r3, [pc, #100]	@ (8002ea0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e3a:	617b      	str	r3, [r7, #20]
      break;
 8002e3c:	e002      	b.n	8002e44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	617b      	str	r3, [r7, #20]
      break;
 8002e42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e44:	4b13      	ldr	r3, [pc, #76]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	091b      	lsrs	r3, r3, #4
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	3301      	adds	r3, #1
 8002e50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e52:	4b10      	ldr	r3, [pc, #64]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	0a1b      	lsrs	r3, r3, #8
 8002e58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	fb03 f202 	mul.w	r2, r3, r2
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	0e5b      	lsrs	r3, r3, #25
 8002e70:	f003 0303 	and.w	r3, r3, #3
 8002e74:	3301      	adds	r3, #1
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e84:	69bb      	ldr	r3, [r7, #24]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3724      	adds	r7, #36	@ 0x24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40021000 	.word	0x40021000
 8002e98:	08005f94 	.word	0x08005f94
 8002e9c:	00f42400 	.word	0x00f42400
 8002ea0:	007a1200 	.word	0x007a1200

08002ea4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ea8:	4b03      	ldr	r3, [pc, #12]	@ (8002eb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	20000034 	.word	0x20000034

08002ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ec0:	f7ff fff0 	bl	8002ea4 <HAL_RCC_GetHCLKFreq>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	4b06      	ldr	r3, [pc, #24]	@ (8002ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	0a1b      	lsrs	r3, r3, #8
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	4904      	ldr	r1, [pc, #16]	@ (8002ee4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ed2:	5ccb      	ldrb	r3, [r1, r3]
 8002ed4:	f003 031f 	and.w	r3, r3, #31
 8002ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	08005f8c 	.word	0x08005f8c

08002ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002eec:	f7ff ffda 	bl	8002ea4 <HAL_RCC_GetHCLKFreq>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	4b06      	ldr	r3, [pc, #24]	@ (8002f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	0adb      	lsrs	r3, r3, #11
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	4904      	ldr	r1, [pc, #16]	@ (8002f10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002efe:	5ccb      	ldrb	r3, [r1, r3]
 8002f00:	f003 031f 	and.w	r3, r3, #31
 8002f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	08005f8c 	.word	0x08005f8c

08002f14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f20:	4b2a      	ldr	r3, [pc, #168]	@ (8002fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f2c:	f7ff f9ee 	bl	800230c <HAL_PWREx_GetVoltageRange>
 8002f30:	6178      	str	r0, [r7, #20]
 8002f32:	e014      	b.n	8002f5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f34:	4b25      	ldr	r3, [pc, #148]	@ (8002fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f38:	4a24      	ldr	r2, [pc, #144]	@ (8002fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f40:	4b22      	ldr	r3, [pc, #136]	@ (8002fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f4c:	f7ff f9de 	bl	800230c <HAL_PWREx_GetVoltageRange>
 8002f50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f52:	4b1e      	ldr	r3, [pc, #120]	@ (8002fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f56:	4a1d      	ldr	r2, [pc, #116]	@ (8002fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f5c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f64:	d10b      	bne.n	8002f7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b80      	cmp	r3, #128	@ 0x80
 8002f6a:	d919      	bls.n	8002fa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f70:	d902      	bls.n	8002f78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f72:	2302      	movs	r3, #2
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	e013      	b.n	8002fa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f78:	2301      	movs	r3, #1
 8002f7a:	613b      	str	r3, [r7, #16]
 8002f7c:	e010      	b.n	8002fa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b80      	cmp	r3, #128	@ 0x80
 8002f82:	d902      	bls.n	8002f8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f84:	2303      	movs	r3, #3
 8002f86:	613b      	str	r3, [r7, #16]
 8002f88:	e00a      	b.n	8002fa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b80      	cmp	r3, #128	@ 0x80
 8002f8e:	d102      	bne.n	8002f96 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f90:	2302      	movs	r3, #2
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	e004      	b.n	8002fa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b70      	cmp	r3, #112	@ 0x70
 8002f9a:	d101      	bne.n	8002fa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f023 0207 	bic.w	r2, r3, #7
 8002fa8:	4909      	ldr	r1, [pc, #36]	@ (8002fd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fb0:	4b07      	ldr	r3, [pc, #28]	@ (8002fd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d001      	beq.n	8002fc2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	40022000 	.word	0x40022000

08002fd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fdc:	2300      	movs	r3, #0
 8002fde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d041      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ff4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ff8:	d02a      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002ffa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ffe:	d824      	bhi.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003000:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003004:	d008      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003006:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800300a:	d81e      	bhi.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00a      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003010:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003014:	d010      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003016:	e018      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003018:	4b86      	ldr	r3, [pc, #536]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	4a85      	ldr	r2, [pc, #532]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800301e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003022:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003024:	e015      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3304      	adds	r3, #4
 800302a:	2100      	movs	r1, #0
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fabb 	bl	80035a8 <RCCEx_PLLSAI1_Config>
 8003032:	4603      	mov	r3, r0
 8003034:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003036:	e00c      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3320      	adds	r3, #32
 800303c:	2100      	movs	r1, #0
 800303e:	4618      	mov	r0, r3
 8003040:	f000 fba6 	bl	8003790 <RCCEx_PLLSAI2_Config>
 8003044:	4603      	mov	r3, r0
 8003046:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003048:	e003      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	74fb      	strb	r3, [r7, #19]
      break;
 800304e:	e000      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003050:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003052:	7cfb      	ldrb	r3, [r7, #19]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10b      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003058:	4b76      	ldr	r3, [pc, #472]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800305a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800305e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003066:	4973      	ldr	r1, [pc, #460]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003068:	4313      	orrs	r3, r2
 800306a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800306e:	e001      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003070:	7cfb      	ldrb	r3, [r7, #19]
 8003072:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d041      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003084:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003088:	d02a      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800308a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800308e:	d824      	bhi.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003090:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003094:	d008      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003096:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800309a:	d81e      	bhi.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x106>
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00a      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80030a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030a4:	d010      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030a6:	e018      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030a8:	4b62      	ldr	r3, [pc, #392]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	4a61      	ldr	r2, [pc, #388]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030b2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030b4:	e015      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3304      	adds	r3, #4
 80030ba:	2100      	movs	r1, #0
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 fa73 	bl	80035a8 <RCCEx_PLLSAI1_Config>
 80030c2:	4603      	mov	r3, r0
 80030c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030c6:	e00c      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3320      	adds	r3, #32
 80030cc:	2100      	movs	r1, #0
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fb5e 	bl	8003790 <RCCEx_PLLSAI2_Config>
 80030d4:	4603      	mov	r3, r0
 80030d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030d8:	e003      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	74fb      	strb	r3, [r7, #19]
      break;
 80030de:	e000      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80030e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030e2:	7cfb      	ldrb	r3, [r7, #19]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10b      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030e8:	4b52      	ldr	r3, [pc, #328]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030f6:	494f      	ldr	r1, [pc, #316]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80030fe:	e001      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003100:	7cfb      	ldrb	r3, [r7, #19]
 8003102:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 80a0 	beq.w	8003252 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003112:	2300      	movs	r3, #0
 8003114:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003116:	4b47      	ldr	r3, [pc, #284]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800311a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003126:	2300      	movs	r3, #0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00d      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312c:	4b41      	ldr	r3, [pc, #260]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800312e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003130:	4a40      	ldr	r2, [pc, #256]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003132:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003136:	6593      	str	r3, [r2, #88]	@ 0x58
 8003138:	4b3e      	ldr	r3, [pc, #248]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800313a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003144:	2301      	movs	r3, #1
 8003146:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003148:	4b3b      	ldr	r3, [pc, #236]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a3a      	ldr	r2, [pc, #232]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800314e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003152:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003154:	f7fe f858 	bl	8001208 <HAL_GetTick>
 8003158:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800315a:	e009      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800315c:	f7fe f854 	bl	8001208 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d902      	bls.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	74fb      	strb	r3, [r7, #19]
        break;
 800316e:	e005      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003170:	4b31      	ldr	r3, [pc, #196]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0ef      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800317c:	7cfb      	ldrb	r3, [r7, #19]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d15c      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003182:	4b2c      	ldr	r3, [pc, #176]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003188:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800318c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d01f      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	429a      	cmp	r2, r3
 800319e:	d019      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031a0:	4b24      	ldr	r3, [pc, #144]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031ac:	4b21      	ldr	r3, [pc, #132]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b2:	4a20      	ldr	r2, [pc, #128]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c2:	4a1c      	ldr	r2, [pc, #112]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031cc:	4a19      	ldr	r2, [pc, #100]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d016      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031de:	f7fe f813 	bl	8001208 <HAL_GetTick>
 80031e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031e4:	e00b      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e6:	f7fe f80f 	bl	8001208 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d902      	bls.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	74fb      	strb	r3, [r7, #19]
            break;
 80031fc:	e006      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0ec      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800320c:	7cfb      	ldrb	r3, [r7, #19]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10c      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003212:	4b08      	ldr	r3, [pc, #32]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003218:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003222:	4904      	ldr	r1, [pc, #16]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003224:	4313      	orrs	r3, r2
 8003226:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800322a:	e009      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800322c:	7cfb      	ldrb	r3, [r7, #19]
 800322e:	74bb      	strb	r3, [r7, #18]
 8003230:	e006      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003232:	bf00      	nop
 8003234:	40021000 	.word	0x40021000
 8003238:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800323c:	7cfb      	ldrb	r3, [r7, #19]
 800323e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003240:	7c7b      	ldrb	r3, [r7, #17]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d105      	bne.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003246:	4b9e      	ldr	r3, [pc, #632]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800324a:	4a9d      	ldr	r2, [pc, #628]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003250:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00a      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800325e:	4b98      	ldr	r3, [pc, #608]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003264:	f023 0203 	bic.w	r2, r3, #3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800326c:	4994      	ldr	r1, [pc, #592]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326e:	4313      	orrs	r3, r2
 8003270:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00a      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003280:	4b8f      	ldr	r3, [pc, #572]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003286:	f023 020c 	bic.w	r2, r3, #12
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800328e:	498c      	ldr	r1, [pc, #560]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003290:	4313      	orrs	r3, r2
 8003292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0304 	and.w	r3, r3, #4
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00a      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032a2:	4b87      	ldr	r3, [pc, #540]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b0:	4983      	ldr	r1, [pc, #524]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0308 	and.w	r3, r3, #8
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00a      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032c4:	4b7e      	ldr	r3, [pc, #504]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d2:	497b      	ldr	r1, [pc, #492]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032e6:	4b76      	ldr	r3, [pc, #472]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032f4:	4972      	ldr	r1, [pc, #456]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0320 	and.w	r3, r3, #32
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00a      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003308:	4b6d      	ldr	r3, [pc, #436]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800330e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003316:	496a      	ldr	r1, [pc, #424]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003318:	4313      	orrs	r3, r2
 800331a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800332a:	4b65      	ldr	r3, [pc, #404]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003330:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003338:	4961      	ldr	r1, [pc, #388]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333a:	4313      	orrs	r3, r2
 800333c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00a      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800334c:	4b5c      	ldr	r3, [pc, #368]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003352:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800335a:	4959      	ldr	r1, [pc, #356]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335c:	4313      	orrs	r3, r2
 800335e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00a      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800336e:	4b54      	ldr	r3, [pc, #336]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003374:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800337c:	4950      	ldr	r1, [pc, #320]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00a      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003390:	4b4b      	ldr	r3, [pc, #300]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003396:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800339e:	4948      	ldr	r1, [pc, #288]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00a      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033b2:	4b43      	ldr	r3, [pc, #268]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c0:	493f      	ldr	r1, [pc, #252]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d028      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033d4:	4b3a      	ldr	r3, [pc, #232]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033e2:	4937      	ldr	r1, [pc, #220]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033f2:	d106      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033f4:	4b32      	ldr	r3, [pc, #200]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	4a31      	ldr	r2, [pc, #196]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033fe:	60d3      	str	r3, [r2, #12]
 8003400:	e011      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003406:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800340a:	d10c      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3304      	adds	r3, #4
 8003410:	2101      	movs	r1, #1
 8003412:	4618      	mov	r0, r3
 8003414:	f000 f8c8 	bl	80035a8 <RCCEx_PLLSAI1_Config>
 8003418:	4603      	mov	r3, r0
 800341a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800341c:	7cfb      	ldrb	r3, [r7, #19]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003422:	7cfb      	ldrb	r3, [r7, #19]
 8003424:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d028      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003432:	4b23      	ldr	r3, [pc, #140]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003438:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003440:	491f      	ldr	r1, [pc, #124]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800344c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003450:	d106      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003452:	4b1b      	ldr	r3, [pc, #108]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	4a1a      	ldr	r2, [pc, #104]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003458:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800345c:	60d3      	str	r3, [r2, #12]
 800345e:	e011      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003464:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003468:	d10c      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3304      	adds	r3, #4
 800346e:	2101      	movs	r1, #1
 8003470:	4618      	mov	r0, r3
 8003472:	f000 f899 	bl	80035a8 <RCCEx_PLLSAI1_Config>
 8003476:	4603      	mov	r3, r0
 8003478:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800347a:	7cfb      	ldrb	r3, [r7, #19]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003480:	7cfb      	ldrb	r3, [r7, #19]
 8003482:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d02b      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003490:	4b0b      	ldr	r3, [pc, #44]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003496:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800349e:	4908      	ldr	r1, [pc, #32]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034ae:	d109      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034b0:	4b03      	ldr	r3, [pc, #12]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	4a02      	ldr	r2, [pc, #8]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034ba:	60d3      	str	r3, [r2, #12]
 80034bc:	e014      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80034be:	bf00      	nop
 80034c0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034cc:	d10c      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3304      	adds	r3, #4
 80034d2:	2101      	movs	r1, #1
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 f867 	bl	80035a8 <RCCEx_PLLSAI1_Config>
 80034da:	4603      	mov	r3, r0
 80034dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034de:	7cfb      	ldrb	r3, [r7, #19]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80034e4:	7cfb      	ldrb	r3, [r7, #19]
 80034e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d02f      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034f4:	4b2b      	ldr	r3, [pc, #172]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034fa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003502:	4928      	ldr	r1, [pc, #160]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800350e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003512:	d10d      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3304      	adds	r3, #4
 8003518:	2102      	movs	r1, #2
 800351a:	4618      	mov	r0, r3
 800351c:	f000 f844 	bl	80035a8 <RCCEx_PLLSAI1_Config>
 8003520:	4603      	mov	r3, r0
 8003522:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003524:	7cfb      	ldrb	r3, [r7, #19]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d014      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800352a:	7cfb      	ldrb	r3, [r7, #19]
 800352c:	74bb      	strb	r3, [r7, #18]
 800352e:	e011      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003534:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003538:	d10c      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	3320      	adds	r3, #32
 800353e:	2102      	movs	r1, #2
 8003540:	4618      	mov	r0, r3
 8003542:	f000 f925 	bl	8003790 <RCCEx_PLLSAI2_Config>
 8003546:	4603      	mov	r3, r0
 8003548:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800354a:	7cfb      	ldrb	r3, [r7, #19]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003550:	7cfb      	ldrb	r3, [r7, #19]
 8003552:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00a      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003560:	4b10      	ldr	r3, [pc, #64]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003566:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800356e:	490d      	ldr	r1, [pc, #52]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003570:	4313      	orrs	r3, r2
 8003572:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00b      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003582:	4b08      	ldr	r3, [pc, #32]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003588:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003592:	4904      	ldr	r1, [pc, #16]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800359a:	7cbb      	ldrb	r3, [r7, #18]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3718      	adds	r7, #24
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40021000 	.word	0x40021000

080035a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035b6:	4b75      	ldr	r3, [pc, #468]	@ (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d018      	beq.n	80035f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035c2:	4b72      	ldr	r3, [pc, #456]	@ (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f003 0203 	and.w	r2, r3, #3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d10d      	bne.n	80035ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
       ||
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d009      	beq.n	80035ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035da:	4b6c      	ldr	r3, [pc, #432]	@ (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	091b      	lsrs	r3, r3, #4
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	1c5a      	adds	r2, r3, #1
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
       ||
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d047      	beq.n	800367e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	73fb      	strb	r3, [r7, #15]
 80035f2:	e044      	b.n	800367e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d018      	beq.n	800362e <RCCEx_PLLSAI1_Config+0x86>
 80035fc:	2b03      	cmp	r3, #3
 80035fe:	d825      	bhi.n	800364c <RCCEx_PLLSAI1_Config+0xa4>
 8003600:	2b01      	cmp	r3, #1
 8003602:	d002      	beq.n	800360a <RCCEx_PLLSAI1_Config+0x62>
 8003604:	2b02      	cmp	r3, #2
 8003606:	d009      	beq.n	800361c <RCCEx_PLLSAI1_Config+0x74>
 8003608:	e020      	b.n	800364c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800360a:	4b60      	ldr	r3, [pc, #384]	@ (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d11d      	bne.n	8003652 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800361a:	e01a      	b.n	8003652 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800361c:	4b5b      	ldr	r3, [pc, #364]	@ (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003624:	2b00      	cmp	r3, #0
 8003626:	d116      	bne.n	8003656 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800362c:	e013      	b.n	8003656 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800362e:	4b57      	ldr	r3, [pc, #348]	@ (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10f      	bne.n	800365a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800363a:	4b54      	ldr	r3, [pc, #336]	@ (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d109      	bne.n	800365a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800364a:	e006      	b.n	800365a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	73fb      	strb	r3, [r7, #15]
      break;
 8003650:	e004      	b.n	800365c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003652:	bf00      	nop
 8003654:	e002      	b.n	800365c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003656:	bf00      	nop
 8003658:	e000      	b.n	800365c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800365a:	bf00      	nop
    }

    if(status == HAL_OK)
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10d      	bne.n	800367e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003662:	4b4a      	ldr	r3, [pc, #296]	@ (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6819      	ldr	r1, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	3b01      	subs	r3, #1
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	430b      	orrs	r3, r1
 8003678:	4944      	ldr	r1, [pc, #272]	@ (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 800367a:	4313      	orrs	r3, r2
 800367c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d17d      	bne.n	8003780 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003684:	4b41      	ldr	r3, [pc, #260]	@ (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a40      	ldr	r2, [pc, #256]	@ (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 800368a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800368e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003690:	f7fd fdba 	bl	8001208 <HAL_GetTick>
 8003694:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003696:	e009      	b.n	80036ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003698:	f7fd fdb6 	bl	8001208 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d902      	bls.n	80036ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	73fb      	strb	r3, [r7, #15]
        break;
 80036aa:	e005      	b.n	80036b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036ac:	4b37      	ldr	r3, [pc, #220]	@ (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1ef      	bne.n	8003698 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d160      	bne.n	8003780 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d111      	bne.n	80036e8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036c4:	4b31      	ldr	r3, [pc, #196]	@ (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80036cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6892      	ldr	r2, [r2, #8]
 80036d4:	0211      	lsls	r1, r2, #8
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	68d2      	ldr	r2, [r2, #12]
 80036da:	0912      	lsrs	r2, r2, #4
 80036dc:	0452      	lsls	r2, r2, #17
 80036de:	430a      	orrs	r2, r1
 80036e0:	492a      	ldr	r1, [pc, #168]	@ (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	610b      	str	r3, [r1, #16]
 80036e6:	e027      	b.n	8003738 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d112      	bne.n	8003714 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036ee:	4b27      	ldr	r3, [pc, #156]	@ (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80036f6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6892      	ldr	r2, [r2, #8]
 80036fe:	0211      	lsls	r1, r2, #8
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6912      	ldr	r2, [r2, #16]
 8003704:	0852      	lsrs	r2, r2, #1
 8003706:	3a01      	subs	r2, #1
 8003708:	0552      	lsls	r2, r2, #21
 800370a:	430a      	orrs	r2, r1
 800370c:	491f      	ldr	r1, [pc, #124]	@ (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 800370e:	4313      	orrs	r3, r2
 8003710:	610b      	str	r3, [r1, #16]
 8003712:	e011      	b.n	8003738 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003714:	4b1d      	ldr	r3, [pc, #116]	@ (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800371c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6892      	ldr	r2, [r2, #8]
 8003724:	0211      	lsls	r1, r2, #8
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6952      	ldr	r2, [r2, #20]
 800372a:	0852      	lsrs	r2, r2, #1
 800372c:	3a01      	subs	r2, #1
 800372e:	0652      	lsls	r2, r2, #25
 8003730:	430a      	orrs	r2, r1
 8003732:	4916      	ldr	r1, [pc, #88]	@ (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003734:	4313      	orrs	r3, r2
 8003736:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003738:	4b14      	ldr	r3, [pc, #80]	@ (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a13      	ldr	r2, [pc, #76]	@ (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 800373e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003742:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003744:	f7fd fd60 	bl	8001208 <HAL_GetTick>
 8003748:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800374a:	e009      	b.n	8003760 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800374c:	f7fd fd5c 	bl	8001208 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d902      	bls.n	8003760 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	73fb      	strb	r3, [r7, #15]
          break;
 800375e:	e005      	b.n	800376c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003760:	4b0a      	ldr	r3, [pc, #40]	@ (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0ef      	beq.n	800374c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003772:	4b06      	ldr	r3, [pc, #24]	@ (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003774:	691a      	ldr	r2, [r3, #16]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	4904      	ldr	r1, [pc, #16]	@ (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 800377c:	4313      	orrs	r3, r2
 800377e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003780:	7bfb      	ldrb	r3, [r7, #15]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40021000 	.word	0x40021000

08003790 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800379e:	4b6a      	ldr	r3, [pc, #424]	@ (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d018      	beq.n	80037dc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037aa:	4b67      	ldr	r3, [pc, #412]	@ (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f003 0203 	and.w	r2, r3, #3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d10d      	bne.n	80037d6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
       ||
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d009      	beq.n	80037d6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80037c2:	4b61      	ldr	r3, [pc, #388]	@ (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	091b      	lsrs	r3, r3, #4
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
       ||
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d047      	beq.n	8003866 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	73fb      	strb	r3, [r7, #15]
 80037da:	e044      	b.n	8003866 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b03      	cmp	r3, #3
 80037e2:	d018      	beq.n	8003816 <RCCEx_PLLSAI2_Config+0x86>
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d825      	bhi.n	8003834 <RCCEx_PLLSAI2_Config+0xa4>
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d002      	beq.n	80037f2 <RCCEx_PLLSAI2_Config+0x62>
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d009      	beq.n	8003804 <RCCEx_PLLSAI2_Config+0x74>
 80037f0:	e020      	b.n	8003834 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037f2:	4b55      	ldr	r3, [pc, #340]	@ (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d11d      	bne.n	800383a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003802:	e01a      	b.n	800383a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003804:	4b50      	ldr	r3, [pc, #320]	@ (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800380c:	2b00      	cmp	r3, #0
 800380e:	d116      	bne.n	800383e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003814:	e013      	b.n	800383e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003816:	4b4c      	ldr	r3, [pc, #304]	@ (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10f      	bne.n	8003842 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003822:	4b49      	ldr	r3, [pc, #292]	@ (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d109      	bne.n	8003842 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003832:	e006      	b.n	8003842 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	73fb      	strb	r3, [r7, #15]
      break;
 8003838:	e004      	b.n	8003844 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800383a:	bf00      	nop
 800383c:	e002      	b.n	8003844 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800383e:	bf00      	nop
 8003840:	e000      	b.n	8003844 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003842:	bf00      	nop
    }

    if(status == HAL_OK)
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10d      	bne.n	8003866 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800384a:	4b3f      	ldr	r3, [pc, #252]	@ (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6819      	ldr	r1, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	3b01      	subs	r3, #1
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	430b      	orrs	r3, r1
 8003860:	4939      	ldr	r1, [pc, #228]	@ (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003862:	4313      	orrs	r3, r2
 8003864:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d167      	bne.n	800393c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800386c:	4b36      	ldr	r3, [pc, #216]	@ (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a35      	ldr	r2, [pc, #212]	@ (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003872:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003876:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003878:	f7fd fcc6 	bl	8001208 <HAL_GetTick>
 800387c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800387e:	e009      	b.n	8003894 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003880:	f7fd fcc2 	bl	8001208 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d902      	bls.n	8003894 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	73fb      	strb	r3, [r7, #15]
        break;
 8003892:	e005      	b.n	80038a0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003894:	4b2c      	ldr	r3, [pc, #176]	@ (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1ef      	bne.n	8003880 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d14a      	bne.n	800393c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d111      	bne.n	80038d0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038ac:	4b26      	ldr	r3, [pc, #152]	@ (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80038b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6892      	ldr	r2, [r2, #8]
 80038bc:	0211      	lsls	r1, r2, #8
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	68d2      	ldr	r2, [r2, #12]
 80038c2:	0912      	lsrs	r2, r2, #4
 80038c4:	0452      	lsls	r2, r2, #17
 80038c6:	430a      	orrs	r2, r1
 80038c8:	491f      	ldr	r1, [pc, #124]	@ (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	614b      	str	r3, [r1, #20]
 80038ce:	e011      	b.n	80038f4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80038d8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6892      	ldr	r2, [r2, #8]
 80038e0:	0211      	lsls	r1, r2, #8
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6912      	ldr	r2, [r2, #16]
 80038e6:	0852      	lsrs	r2, r2, #1
 80038e8:	3a01      	subs	r2, #1
 80038ea:	0652      	lsls	r2, r2, #25
 80038ec:	430a      	orrs	r2, r1
 80038ee:	4916      	ldr	r1, [pc, #88]	@ (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038f4:	4b14      	ldr	r3, [pc, #80]	@ (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a13      	ldr	r2, [pc, #76]	@ (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003900:	f7fd fc82 	bl	8001208 <HAL_GetTick>
 8003904:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003906:	e009      	b.n	800391c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003908:	f7fd fc7e 	bl	8001208 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d902      	bls.n	800391c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	73fb      	strb	r3, [r7, #15]
          break;
 800391a:	e005      	b.n	8003928 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800391c:	4b0a      	ldr	r3, [pc, #40]	@ (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0ef      	beq.n	8003908 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800392e:	4b06      	ldr	r3, [pc, #24]	@ (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003930:	695a      	ldr	r2, [r3, #20]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	4904      	ldr	r1, [pc, #16]	@ (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003938:	4313      	orrs	r3, r2
 800393a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800393c:	7bfb      	ldrb	r3, [r7, #15]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000

0800394c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e040      	b.n	80039e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003962:	2b00      	cmp	r3, #0
 8003964:	d106      	bne.n	8003974 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7fd fa58 	bl	8000e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2224      	movs	r2, #36	@ 0x24
 8003978:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0201 	bic.w	r2, r2, #1
 8003988:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398e:	2b00      	cmp	r3, #0
 8003990:	d002      	beq.n	8003998 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 fedc 	bl	8004750 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 fc21 	bl	80041e0 <UART_SetConfig>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e01b      	b.n	80039e0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689a      	ldr	r2, [r3, #8]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0201 	orr.w	r2, r2, #1
 80039d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 ff5b 	bl	8004894 <UART_CheckIdleState>
 80039de:	4603      	mov	r3, r0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08a      	sub	sp, #40	@ 0x28
 80039ec:	af02      	add	r7, sp, #8
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	4613      	mov	r3, r2
 80039f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	d177      	bne.n	8003af0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <HAL_UART_Transmit+0x24>
 8003a06:	88fb      	ldrh	r3, [r7, #6]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e070      	b.n	8003af2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2221      	movs	r2, #33	@ 0x21
 8003a1c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a1e:	f7fd fbf3 	bl	8001208 <HAL_GetTick>
 8003a22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	88fa      	ldrh	r2, [r7, #6]
 8003a28:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	88fa      	ldrh	r2, [r7, #6]
 8003a30:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a3c:	d108      	bne.n	8003a50 <HAL_UART_Transmit+0x68>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d104      	bne.n	8003a50 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003a46:	2300      	movs	r3, #0
 8003a48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	61bb      	str	r3, [r7, #24]
 8003a4e:	e003      	b.n	8003a58 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a54:	2300      	movs	r3, #0
 8003a56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a58:	e02f      	b.n	8003aba <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2200      	movs	r2, #0
 8003a62:	2180      	movs	r1, #128	@ 0x80
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 ffbd 	bl	80049e4 <UART_WaitOnFlagUntilTimeout>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d004      	beq.n	8003a7a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2220      	movs	r2, #32
 8003a74:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e03b      	b.n	8003af2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10b      	bne.n	8003a98 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	881a      	ldrh	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a8c:	b292      	uxth	r2, r2
 8003a8e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	3302      	adds	r3, #2
 8003a94:	61bb      	str	r3, [r7, #24]
 8003a96:	e007      	b.n	8003aa8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	781a      	ldrb	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1c9      	bne.n	8003a5a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2200      	movs	r2, #0
 8003ace:	2140      	movs	r1, #64	@ 0x40
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 ff87 	bl	80049e4 <UART_WaitOnFlagUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d004      	beq.n	8003ae6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e005      	b.n	8003af2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	e000      	b.n	8003af2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003af0:	2302      	movs	r3, #2
  }
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3720      	adds	r7, #32
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
	...

08003afc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08a      	sub	sp, #40	@ 0x28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	4613      	mov	r3, r2
 8003b08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	d137      	bne.n	8003b84 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_UART_Receive_IT+0x24>
 8003b1a:	88fb      	ldrh	r3, [r7, #6]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e030      	b.n	8003b86 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a18      	ldr	r2, [pc, #96]	@ (8003b90 <HAL_UART_Receive_IT+0x94>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d01f      	beq.n	8003b74 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d018      	beq.n	8003b74 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	e853 3f00 	ldrex	r3, [r3]
 8003b4e:	613b      	str	r3, [r7, #16]
   return(result);
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b56:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b60:	623b      	str	r3, [r7, #32]
 8003b62:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b64:	69f9      	ldr	r1, [r7, #28]
 8003b66:	6a3a      	ldr	r2, [r7, #32]
 8003b68:	e841 2300 	strex	r3, r2, [r1]
 8003b6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1e6      	bne.n	8003b42 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003b74:	88fb      	ldrh	r3, [r7, #6]
 8003b76:	461a      	mov	r2, r3
 8003b78:	68b9      	ldr	r1, [r7, #8]
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 ffa0 	bl	8004ac0 <UART_Start_Receive_IT>
 8003b80:	4603      	mov	r3, r0
 8003b82:	e000      	b.n	8003b86 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b84:	2302      	movs	r3, #2
  }
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3728      	adds	r7, #40	@ 0x28
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40008000 	.word	0x40008000

08003b94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b0ba      	sub	sp, #232	@ 0xe8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003bba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003bbe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003bc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d115      	bne.n	8003bfc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00f      	beq.n	8003bfc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003be0:	f003 0320 	and.w	r3, r3, #32
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d009      	beq.n	8003bfc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 82ca 	beq.w	8004186 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	4798      	blx	r3
      }
      return;
 8003bfa:	e2c4      	b.n	8004186 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003bfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 8117 	beq.w	8003e34 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003c16:	4b85      	ldr	r3, [pc, #532]	@ (8003e2c <HAL_UART_IRQHandler+0x298>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 810a 	beq.w	8003e34 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d011      	beq.n	8003c50 <HAL_UART_IRQHandler+0xbc>
 8003c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00b      	beq.n	8003c50 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c46:	f043 0201 	orr.w	r2, r3, #1
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d011      	beq.n	8003c80 <HAL_UART_IRQHandler+0xec>
 8003c5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00b      	beq.n	8003c80 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c76:	f043 0204 	orr.w	r2, r3, #4
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d011      	beq.n	8003cb0 <HAL_UART_IRQHandler+0x11c>
 8003c8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00b      	beq.n	8003cb0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2204      	movs	r2, #4
 8003c9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ca6:	f043 0202 	orr.w	r2, r3, #2
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d017      	beq.n	8003cec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d105      	bne.n	8003cd4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003cc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ccc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00b      	beq.n	8003cec <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2208      	movs	r2, #8
 8003cda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ce2:	f043 0208 	orr.w	r2, r3, #8
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d012      	beq.n	8003d1e <HAL_UART_IRQHandler+0x18a>
 8003cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cfc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00c      	beq.n	8003d1e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d14:	f043 0220 	orr.w	r2, r3, #32
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 8230 	beq.w	800418a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00d      	beq.n	8003d52 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d007      	beq.n	8003d52 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d58:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d66:	2b40      	cmp	r3, #64	@ 0x40
 8003d68:	d005      	beq.n	8003d76 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d6e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d04f      	beq.n	8003e16 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 ff68 	bl	8004c4c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d86:	2b40      	cmp	r3, #64	@ 0x40
 8003d88:	d141      	bne.n	8003e0e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3308      	adds	r3, #8
 8003d90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d98:	e853 3f00 	ldrex	r3, [r3]
 8003d9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003da0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003da4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003da8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3308      	adds	r3, #8
 8003db2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003db6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003dba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003dc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003dc6:	e841 2300 	strex	r3, r2, [r1]
 8003dca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003dce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1d9      	bne.n	8003d8a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d013      	beq.n	8003e06 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003de2:	4a13      	ldr	r2, [pc, #76]	@ (8003e30 <HAL_UART_IRQHandler+0x29c>)
 8003de4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fd fb8b 	bl	8001506 <HAL_DMA_Abort_IT>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d017      	beq.n	8003e26 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003e00:	4610      	mov	r0, r2
 8003e02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e04:	e00f      	b.n	8003e26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f9d4 	bl	80041b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e0c:	e00b      	b.n	8003e26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f9d0 	bl	80041b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e14:	e007      	b.n	8003e26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f9cc 	bl	80041b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003e24:	e1b1      	b.n	800418a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e26:	bf00      	nop
    return;
 8003e28:	e1af      	b.n	800418a <HAL_UART_IRQHandler+0x5f6>
 8003e2a:	bf00      	nop
 8003e2c:	04000120 	.word	0x04000120
 8003e30:	08004d15 	.word	0x08004d15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	f040 816a 	bne.w	8004112 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e42:	f003 0310 	and.w	r3, r3, #16
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 8163 	beq.w	8004112 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e50:	f003 0310 	and.w	r3, r3, #16
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 815c 	beq.w	8004112 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2210      	movs	r2, #16
 8003e60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e6c:	2b40      	cmp	r3, #64	@ 0x40
 8003e6e:	f040 80d4 	bne.w	800401a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e7e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 80ad 	beq.w	8003fe2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003e8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e92:	429a      	cmp	r2, r3
 8003e94:	f080 80a5 	bcs.w	8003fe2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e9e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0320 	and.w	r3, r3, #32
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f040 8086 	bne.w	8003fc0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ec0:	e853 3f00 	ldrex	r3, [r3]
 8003ec4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ec8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ecc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ed0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003ede:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003ee2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003eea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003eee:	e841 2300 	strex	r3, r2, [r1]
 8003ef2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1da      	bne.n	8003eb4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	3308      	adds	r3, #8
 8003f04:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f08:	e853 3f00 	ldrex	r3, [r3]
 8003f0c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003f0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f10:	f023 0301 	bic.w	r3, r3, #1
 8003f14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3308      	adds	r3, #8
 8003f1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f22:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003f26:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f28:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f2e:	e841 2300 	strex	r3, r2, [r1]
 8003f32:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1e1      	bne.n	8003efe <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	3308      	adds	r3, #8
 8003f40:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f44:	e853 3f00 	ldrex	r3, [r3]
 8003f48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	3308      	adds	r3, #8
 8003f5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f62:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f66:	e841 2300 	strex	r3, r2, [r1]
 8003f6a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1e3      	bne.n	8003f3a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f88:	e853 3f00 	ldrex	r3, [r3]
 8003f8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f90:	f023 0310 	bic.w	r3, r3, #16
 8003f94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fa2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003fa4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fa8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003faa:	e841 2300 	strex	r3, r2, [r1]
 8003fae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003fb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1e4      	bne.n	8003f80 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fd fa65 	bl	800148a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	4619      	mov	r1, r3
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f8f4 	bl	80041c8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003fe0:	e0d5      	b.n	800418e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003fe8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003fec:	429a      	cmp	r2, r3
 8003fee:	f040 80ce 	bne.w	800418e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0320 	and.w	r3, r3, #32
 8003ffe:	2b20      	cmp	r3, #32
 8004000:	f040 80c5 	bne.w	800418e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004010:	4619      	mov	r1, r3
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f8d8 	bl	80041c8 <HAL_UARTEx_RxEventCallback>
      return;
 8004018:	e0b9      	b.n	800418e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004026:	b29b      	uxth	r3, r3
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004034:	b29b      	uxth	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 80ab 	beq.w	8004192 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800403c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 80a6 	beq.w	8004192 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800404e:	e853 3f00 	ldrex	r3, [r3]
 8004052:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004056:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800405a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004068:	647b      	str	r3, [r7, #68]	@ 0x44
 800406a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800406e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004070:	e841 2300 	strex	r3, r2, [r1]
 8004074:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1e4      	bne.n	8004046 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3308      	adds	r3, #8
 8004082:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004086:	e853 3f00 	ldrex	r3, [r3]
 800408a:	623b      	str	r3, [r7, #32]
   return(result);
 800408c:	6a3b      	ldr	r3, [r7, #32]
 800408e:	f023 0301 	bic.w	r3, r3, #1
 8004092:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3308      	adds	r3, #8
 800409c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80040a0:	633a      	str	r2, [r7, #48]	@ 0x30
 80040a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040a8:	e841 2300 	strex	r3, r2, [r1]
 80040ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1e3      	bne.n	800407c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	e853 3f00 	ldrex	r3, [r3]
 80040d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f023 0310 	bic.w	r3, r3, #16
 80040dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	461a      	mov	r2, r3
 80040e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80040ea:	61fb      	str	r3, [r7, #28]
 80040ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ee:	69b9      	ldr	r1, [r7, #24]
 80040f0:	69fa      	ldr	r2, [r7, #28]
 80040f2:	e841 2300 	strex	r3, r2, [r1]
 80040f6:	617b      	str	r3, [r7, #20]
   return(result);
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1e4      	bne.n	80040c8 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2202      	movs	r2, #2
 8004102:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004104:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004108:	4619      	mov	r1, r3
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f85c 	bl	80041c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004110:	e03f      	b.n	8004192 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004116:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00e      	beq.n	800413c <HAL_UART_IRQHandler+0x5a8>
 800411e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004122:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d008      	beq.n	800413c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004132:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 ffe9 	bl	800510c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800413a:	e02d      	b.n	8004198 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800413c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00e      	beq.n	8004166 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800414c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004150:	2b00      	cmp	r3, #0
 8004152:	d008      	beq.n	8004166 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004158:	2b00      	cmp	r3, #0
 800415a:	d01c      	beq.n	8004196 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	4798      	blx	r3
    }
    return;
 8004164:	e017      	b.n	8004196 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800416a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800416e:	2b00      	cmp	r3, #0
 8004170:	d012      	beq.n	8004198 <HAL_UART_IRQHandler+0x604>
 8004172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00c      	beq.n	8004198 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fdde 	bl	8004d40 <UART_EndTransmit_IT>
    return;
 8004184:	e008      	b.n	8004198 <HAL_UART_IRQHandler+0x604>
      return;
 8004186:	bf00      	nop
 8004188:	e006      	b.n	8004198 <HAL_UART_IRQHandler+0x604>
    return;
 800418a:	bf00      	nop
 800418c:	e004      	b.n	8004198 <HAL_UART_IRQHandler+0x604>
      return;
 800418e:	bf00      	nop
 8004190:	e002      	b.n	8004198 <HAL_UART_IRQHandler+0x604>
      return;
 8004192:	bf00      	nop
 8004194:	e000      	b.n	8004198 <HAL_UART_IRQHandler+0x604>
    return;
 8004196:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004198:	37e8      	adds	r7, #232	@ 0xe8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop

080041a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	460b      	mov	r3, r1
 80041d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041e4:	b08a      	sub	sp, #40	@ 0x28
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041ea:	2300      	movs	r3, #0
 80041ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	431a      	orrs	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	431a      	orrs	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	4313      	orrs	r3, r2
 8004206:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	4ba4      	ldr	r3, [pc, #656]	@ (80044a0 <UART_SetConfig+0x2c0>)
 8004210:	4013      	ands	r3, r2
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	6812      	ldr	r2, [r2, #0]
 8004216:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004218:	430b      	orrs	r3, r1
 800421a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a99      	ldr	r2, [pc, #612]	@ (80044a4 <UART_SetConfig+0x2c4>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d004      	beq.n	800424c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004248:	4313      	orrs	r3, r2
 800424a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800425c:	430a      	orrs	r2, r1
 800425e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a90      	ldr	r2, [pc, #576]	@ (80044a8 <UART_SetConfig+0x2c8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d126      	bne.n	80042b8 <UART_SetConfig+0xd8>
 800426a:	4b90      	ldr	r3, [pc, #576]	@ (80044ac <UART_SetConfig+0x2cc>)
 800426c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004270:	f003 0303 	and.w	r3, r3, #3
 8004274:	2b03      	cmp	r3, #3
 8004276:	d81b      	bhi.n	80042b0 <UART_SetConfig+0xd0>
 8004278:	a201      	add	r2, pc, #4	@ (adr r2, 8004280 <UART_SetConfig+0xa0>)
 800427a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427e:	bf00      	nop
 8004280:	08004291 	.word	0x08004291
 8004284:	080042a1 	.word	0x080042a1
 8004288:	08004299 	.word	0x08004299
 800428c:	080042a9 	.word	0x080042a9
 8004290:	2301      	movs	r3, #1
 8004292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004296:	e116      	b.n	80044c6 <UART_SetConfig+0x2e6>
 8004298:	2302      	movs	r3, #2
 800429a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800429e:	e112      	b.n	80044c6 <UART_SetConfig+0x2e6>
 80042a0:	2304      	movs	r3, #4
 80042a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042a6:	e10e      	b.n	80044c6 <UART_SetConfig+0x2e6>
 80042a8:	2308      	movs	r3, #8
 80042aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ae:	e10a      	b.n	80044c6 <UART_SetConfig+0x2e6>
 80042b0:	2310      	movs	r3, #16
 80042b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042b6:	e106      	b.n	80044c6 <UART_SetConfig+0x2e6>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a7c      	ldr	r2, [pc, #496]	@ (80044b0 <UART_SetConfig+0x2d0>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d138      	bne.n	8004334 <UART_SetConfig+0x154>
 80042c2:	4b7a      	ldr	r3, [pc, #488]	@ (80044ac <UART_SetConfig+0x2cc>)
 80042c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042c8:	f003 030c 	and.w	r3, r3, #12
 80042cc:	2b0c      	cmp	r3, #12
 80042ce:	d82d      	bhi.n	800432c <UART_SetConfig+0x14c>
 80042d0:	a201      	add	r2, pc, #4	@ (adr r2, 80042d8 <UART_SetConfig+0xf8>)
 80042d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d6:	bf00      	nop
 80042d8:	0800430d 	.word	0x0800430d
 80042dc:	0800432d 	.word	0x0800432d
 80042e0:	0800432d 	.word	0x0800432d
 80042e4:	0800432d 	.word	0x0800432d
 80042e8:	0800431d 	.word	0x0800431d
 80042ec:	0800432d 	.word	0x0800432d
 80042f0:	0800432d 	.word	0x0800432d
 80042f4:	0800432d 	.word	0x0800432d
 80042f8:	08004315 	.word	0x08004315
 80042fc:	0800432d 	.word	0x0800432d
 8004300:	0800432d 	.word	0x0800432d
 8004304:	0800432d 	.word	0x0800432d
 8004308:	08004325 	.word	0x08004325
 800430c:	2300      	movs	r3, #0
 800430e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004312:	e0d8      	b.n	80044c6 <UART_SetConfig+0x2e6>
 8004314:	2302      	movs	r3, #2
 8004316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800431a:	e0d4      	b.n	80044c6 <UART_SetConfig+0x2e6>
 800431c:	2304      	movs	r3, #4
 800431e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004322:	e0d0      	b.n	80044c6 <UART_SetConfig+0x2e6>
 8004324:	2308      	movs	r3, #8
 8004326:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800432a:	e0cc      	b.n	80044c6 <UART_SetConfig+0x2e6>
 800432c:	2310      	movs	r3, #16
 800432e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004332:	e0c8      	b.n	80044c6 <UART_SetConfig+0x2e6>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a5e      	ldr	r2, [pc, #376]	@ (80044b4 <UART_SetConfig+0x2d4>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d125      	bne.n	800438a <UART_SetConfig+0x1aa>
 800433e:	4b5b      	ldr	r3, [pc, #364]	@ (80044ac <UART_SetConfig+0x2cc>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004344:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004348:	2b30      	cmp	r3, #48	@ 0x30
 800434a:	d016      	beq.n	800437a <UART_SetConfig+0x19a>
 800434c:	2b30      	cmp	r3, #48	@ 0x30
 800434e:	d818      	bhi.n	8004382 <UART_SetConfig+0x1a2>
 8004350:	2b20      	cmp	r3, #32
 8004352:	d00a      	beq.n	800436a <UART_SetConfig+0x18a>
 8004354:	2b20      	cmp	r3, #32
 8004356:	d814      	bhi.n	8004382 <UART_SetConfig+0x1a2>
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <UART_SetConfig+0x182>
 800435c:	2b10      	cmp	r3, #16
 800435e:	d008      	beq.n	8004372 <UART_SetConfig+0x192>
 8004360:	e00f      	b.n	8004382 <UART_SetConfig+0x1a2>
 8004362:	2300      	movs	r3, #0
 8004364:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004368:	e0ad      	b.n	80044c6 <UART_SetConfig+0x2e6>
 800436a:	2302      	movs	r3, #2
 800436c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004370:	e0a9      	b.n	80044c6 <UART_SetConfig+0x2e6>
 8004372:	2304      	movs	r3, #4
 8004374:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004378:	e0a5      	b.n	80044c6 <UART_SetConfig+0x2e6>
 800437a:	2308      	movs	r3, #8
 800437c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004380:	e0a1      	b.n	80044c6 <UART_SetConfig+0x2e6>
 8004382:	2310      	movs	r3, #16
 8004384:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004388:	e09d      	b.n	80044c6 <UART_SetConfig+0x2e6>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a4a      	ldr	r2, [pc, #296]	@ (80044b8 <UART_SetConfig+0x2d8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d125      	bne.n	80043e0 <UART_SetConfig+0x200>
 8004394:	4b45      	ldr	r3, [pc, #276]	@ (80044ac <UART_SetConfig+0x2cc>)
 8004396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800439a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800439e:	2bc0      	cmp	r3, #192	@ 0xc0
 80043a0:	d016      	beq.n	80043d0 <UART_SetConfig+0x1f0>
 80043a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80043a4:	d818      	bhi.n	80043d8 <UART_SetConfig+0x1f8>
 80043a6:	2b80      	cmp	r3, #128	@ 0x80
 80043a8:	d00a      	beq.n	80043c0 <UART_SetConfig+0x1e0>
 80043aa:	2b80      	cmp	r3, #128	@ 0x80
 80043ac:	d814      	bhi.n	80043d8 <UART_SetConfig+0x1f8>
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <UART_SetConfig+0x1d8>
 80043b2:	2b40      	cmp	r3, #64	@ 0x40
 80043b4:	d008      	beq.n	80043c8 <UART_SetConfig+0x1e8>
 80043b6:	e00f      	b.n	80043d8 <UART_SetConfig+0x1f8>
 80043b8:	2300      	movs	r3, #0
 80043ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043be:	e082      	b.n	80044c6 <UART_SetConfig+0x2e6>
 80043c0:	2302      	movs	r3, #2
 80043c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043c6:	e07e      	b.n	80044c6 <UART_SetConfig+0x2e6>
 80043c8:	2304      	movs	r3, #4
 80043ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ce:	e07a      	b.n	80044c6 <UART_SetConfig+0x2e6>
 80043d0:	2308      	movs	r3, #8
 80043d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043d6:	e076      	b.n	80044c6 <UART_SetConfig+0x2e6>
 80043d8:	2310      	movs	r3, #16
 80043da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043de:	e072      	b.n	80044c6 <UART_SetConfig+0x2e6>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a35      	ldr	r2, [pc, #212]	@ (80044bc <UART_SetConfig+0x2dc>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d12a      	bne.n	8004440 <UART_SetConfig+0x260>
 80043ea:	4b30      	ldr	r3, [pc, #192]	@ (80044ac <UART_SetConfig+0x2cc>)
 80043ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043f8:	d01a      	beq.n	8004430 <UART_SetConfig+0x250>
 80043fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043fe:	d81b      	bhi.n	8004438 <UART_SetConfig+0x258>
 8004400:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004404:	d00c      	beq.n	8004420 <UART_SetConfig+0x240>
 8004406:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800440a:	d815      	bhi.n	8004438 <UART_SetConfig+0x258>
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <UART_SetConfig+0x238>
 8004410:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004414:	d008      	beq.n	8004428 <UART_SetConfig+0x248>
 8004416:	e00f      	b.n	8004438 <UART_SetConfig+0x258>
 8004418:	2300      	movs	r3, #0
 800441a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800441e:	e052      	b.n	80044c6 <UART_SetConfig+0x2e6>
 8004420:	2302      	movs	r3, #2
 8004422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004426:	e04e      	b.n	80044c6 <UART_SetConfig+0x2e6>
 8004428:	2304      	movs	r3, #4
 800442a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800442e:	e04a      	b.n	80044c6 <UART_SetConfig+0x2e6>
 8004430:	2308      	movs	r3, #8
 8004432:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004436:	e046      	b.n	80044c6 <UART_SetConfig+0x2e6>
 8004438:	2310      	movs	r3, #16
 800443a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800443e:	e042      	b.n	80044c6 <UART_SetConfig+0x2e6>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a17      	ldr	r2, [pc, #92]	@ (80044a4 <UART_SetConfig+0x2c4>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d13a      	bne.n	80044c0 <UART_SetConfig+0x2e0>
 800444a:	4b18      	ldr	r3, [pc, #96]	@ (80044ac <UART_SetConfig+0x2cc>)
 800444c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004450:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004454:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004458:	d01a      	beq.n	8004490 <UART_SetConfig+0x2b0>
 800445a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800445e:	d81b      	bhi.n	8004498 <UART_SetConfig+0x2b8>
 8004460:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004464:	d00c      	beq.n	8004480 <UART_SetConfig+0x2a0>
 8004466:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800446a:	d815      	bhi.n	8004498 <UART_SetConfig+0x2b8>
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <UART_SetConfig+0x298>
 8004470:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004474:	d008      	beq.n	8004488 <UART_SetConfig+0x2a8>
 8004476:	e00f      	b.n	8004498 <UART_SetConfig+0x2b8>
 8004478:	2300      	movs	r3, #0
 800447a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800447e:	e022      	b.n	80044c6 <UART_SetConfig+0x2e6>
 8004480:	2302      	movs	r3, #2
 8004482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004486:	e01e      	b.n	80044c6 <UART_SetConfig+0x2e6>
 8004488:	2304      	movs	r3, #4
 800448a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800448e:	e01a      	b.n	80044c6 <UART_SetConfig+0x2e6>
 8004490:	2308      	movs	r3, #8
 8004492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004496:	e016      	b.n	80044c6 <UART_SetConfig+0x2e6>
 8004498:	2310      	movs	r3, #16
 800449a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800449e:	e012      	b.n	80044c6 <UART_SetConfig+0x2e6>
 80044a0:	efff69f3 	.word	0xefff69f3
 80044a4:	40008000 	.word	0x40008000
 80044a8:	40013800 	.word	0x40013800
 80044ac:	40021000 	.word	0x40021000
 80044b0:	40004400 	.word	0x40004400
 80044b4:	40004800 	.word	0x40004800
 80044b8:	40004c00 	.word	0x40004c00
 80044bc:	40005000 	.word	0x40005000
 80044c0:	2310      	movs	r3, #16
 80044c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a9f      	ldr	r2, [pc, #636]	@ (8004748 <UART_SetConfig+0x568>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d17a      	bne.n	80045c6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d824      	bhi.n	8004522 <UART_SetConfig+0x342>
 80044d8:	a201      	add	r2, pc, #4	@ (adr r2, 80044e0 <UART_SetConfig+0x300>)
 80044da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044de:	bf00      	nop
 80044e0:	08004505 	.word	0x08004505
 80044e4:	08004523 	.word	0x08004523
 80044e8:	0800450d 	.word	0x0800450d
 80044ec:	08004523 	.word	0x08004523
 80044f0:	08004513 	.word	0x08004513
 80044f4:	08004523 	.word	0x08004523
 80044f8:	08004523 	.word	0x08004523
 80044fc:	08004523 	.word	0x08004523
 8004500:	0800451b 	.word	0x0800451b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004504:	f7fe fcda 	bl	8002ebc <HAL_RCC_GetPCLK1Freq>
 8004508:	61f8      	str	r0, [r7, #28]
        break;
 800450a:	e010      	b.n	800452e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800450c:	4b8f      	ldr	r3, [pc, #572]	@ (800474c <UART_SetConfig+0x56c>)
 800450e:	61fb      	str	r3, [r7, #28]
        break;
 8004510:	e00d      	b.n	800452e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004512:	f7fe fc3b 	bl	8002d8c <HAL_RCC_GetSysClockFreq>
 8004516:	61f8      	str	r0, [r7, #28]
        break;
 8004518:	e009      	b.n	800452e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800451a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800451e:	61fb      	str	r3, [r7, #28]
        break;
 8004520:	e005      	b.n	800452e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800452c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 80fb 	beq.w	800472c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	4613      	mov	r3, r2
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	4413      	add	r3, r2
 8004540:	69fa      	ldr	r2, [r7, #28]
 8004542:	429a      	cmp	r2, r3
 8004544:	d305      	bcc.n	8004552 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800454c:	69fa      	ldr	r2, [r7, #28]
 800454e:	429a      	cmp	r2, r3
 8004550:	d903      	bls.n	800455a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004558:	e0e8      	b.n	800472c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	2200      	movs	r2, #0
 800455e:	461c      	mov	r4, r3
 8004560:	4615      	mov	r5, r2
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	f04f 0300 	mov.w	r3, #0
 800456a:	022b      	lsls	r3, r5, #8
 800456c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004570:	0222      	lsls	r2, r4, #8
 8004572:	68f9      	ldr	r1, [r7, #12]
 8004574:	6849      	ldr	r1, [r1, #4]
 8004576:	0849      	lsrs	r1, r1, #1
 8004578:	2000      	movs	r0, #0
 800457a:	4688      	mov	r8, r1
 800457c:	4681      	mov	r9, r0
 800457e:	eb12 0a08 	adds.w	sl, r2, r8
 8004582:	eb43 0b09 	adc.w	fp, r3, r9
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	603b      	str	r3, [r7, #0]
 800458e:	607a      	str	r2, [r7, #4]
 8004590:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004594:	4650      	mov	r0, sl
 8004596:	4659      	mov	r1, fp
 8004598:	f7fb fe16 	bl	80001c8 <__aeabi_uldivmod>
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	4613      	mov	r3, r2
 80045a2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045aa:	d308      	bcc.n	80045be <UART_SetConfig+0x3de>
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045b2:	d204      	bcs.n	80045be <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	60da      	str	r2, [r3, #12]
 80045bc:	e0b6      	b.n	800472c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80045c4:	e0b2      	b.n	800472c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045ce:	d15e      	bne.n	800468e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80045d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	d828      	bhi.n	800462a <UART_SetConfig+0x44a>
 80045d8:	a201      	add	r2, pc, #4	@ (adr r2, 80045e0 <UART_SetConfig+0x400>)
 80045da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045de:	bf00      	nop
 80045e0:	08004605 	.word	0x08004605
 80045e4:	0800460d 	.word	0x0800460d
 80045e8:	08004615 	.word	0x08004615
 80045ec:	0800462b 	.word	0x0800462b
 80045f0:	0800461b 	.word	0x0800461b
 80045f4:	0800462b 	.word	0x0800462b
 80045f8:	0800462b 	.word	0x0800462b
 80045fc:	0800462b 	.word	0x0800462b
 8004600:	08004623 	.word	0x08004623
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004604:	f7fe fc5a 	bl	8002ebc <HAL_RCC_GetPCLK1Freq>
 8004608:	61f8      	str	r0, [r7, #28]
        break;
 800460a:	e014      	b.n	8004636 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800460c:	f7fe fc6c 	bl	8002ee8 <HAL_RCC_GetPCLK2Freq>
 8004610:	61f8      	str	r0, [r7, #28]
        break;
 8004612:	e010      	b.n	8004636 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004614:	4b4d      	ldr	r3, [pc, #308]	@ (800474c <UART_SetConfig+0x56c>)
 8004616:	61fb      	str	r3, [r7, #28]
        break;
 8004618:	e00d      	b.n	8004636 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800461a:	f7fe fbb7 	bl	8002d8c <HAL_RCC_GetSysClockFreq>
 800461e:	61f8      	str	r0, [r7, #28]
        break;
 8004620:	e009      	b.n	8004636 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004622:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004626:	61fb      	str	r3, [r7, #28]
        break;
 8004628:	e005      	b.n	8004636 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800462a:	2300      	movs	r3, #0
 800462c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004634:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d077      	beq.n	800472c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	005a      	lsls	r2, r3, #1
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	085b      	lsrs	r3, r3, #1
 8004646:	441a      	add	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004650:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	2b0f      	cmp	r3, #15
 8004656:	d916      	bls.n	8004686 <UART_SetConfig+0x4a6>
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800465e:	d212      	bcs.n	8004686 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	b29b      	uxth	r3, r3
 8004664:	f023 030f 	bic.w	r3, r3, #15
 8004668:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	085b      	lsrs	r3, r3, #1
 800466e:	b29b      	uxth	r3, r3
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	b29a      	uxth	r2, r3
 8004676:	8afb      	ldrh	r3, [r7, #22]
 8004678:	4313      	orrs	r3, r2
 800467a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	8afa      	ldrh	r2, [r7, #22]
 8004682:	60da      	str	r2, [r3, #12]
 8004684:	e052      	b.n	800472c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800468c:	e04e      	b.n	800472c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800468e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004692:	2b08      	cmp	r3, #8
 8004694:	d827      	bhi.n	80046e6 <UART_SetConfig+0x506>
 8004696:	a201      	add	r2, pc, #4	@ (adr r2, 800469c <UART_SetConfig+0x4bc>)
 8004698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469c:	080046c1 	.word	0x080046c1
 80046a0:	080046c9 	.word	0x080046c9
 80046a4:	080046d1 	.word	0x080046d1
 80046a8:	080046e7 	.word	0x080046e7
 80046ac:	080046d7 	.word	0x080046d7
 80046b0:	080046e7 	.word	0x080046e7
 80046b4:	080046e7 	.word	0x080046e7
 80046b8:	080046e7 	.word	0x080046e7
 80046bc:	080046df 	.word	0x080046df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046c0:	f7fe fbfc 	bl	8002ebc <HAL_RCC_GetPCLK1Freq>
 80046c4:	61f8      	str	r0, [r7, #28]
        break;
 80046c6:	e014      	b.n	80046f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046c8:	f7fe fc0e 	bl	8002ee8 <HAL_RCC_GetPCLK2Freq>
 80046cc:	61f8      	str	r0, [r7, #28]
        break;
 80046ce:	e010      	b.n	80046f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046d0:	4b1e      	ldr	r3, [pc, #120]	@ (800474c <UART_SetConfig+0x56c>)
 80046d2:	61fb      	str	r3, [r7, #28]
        break;
 80046d4:	e00d      	b.n	80046f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046d6:	f7fe fb59 	bl	8002d8c <HAL_RCC_GetSysClockFreq>
 80046da:	61f8      	str	r0, [r7, #28]
        break;
 80046dc:	e009      	b.n	80046f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046e2:	61fb      	str	r3, [r7, #28]
        break;
 80046e4:	e005      	b.n	80046f2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80046f0:	bf00      	nop
    }

    if (pclk != 0U)
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d019      	beq.n	800472c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	085a      	lsrs	r2, r3, #1
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	441a      	add	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	fbb2 f3f3 	udiv	r3, r2, r3
 800470a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	2b0f      	cmp	r3, #15
 8004710:	d909      	bls.n	8004726 <UART_SetConfig+0x546>
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004718:	d205      	bcs.n	8004726 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	b29a      	uxth	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	60da      	str	r2, [r3, #12]
 8004724:	e002      	b.n	800472c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004738:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800473c:	4618      	mov	r0, r3
 800473e:	3728      	adds	r7, #40	@ 0x28
 8004740:	46bd      	mov	sp, r7
 8004742:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004746:	bf00      	nop
 8004748:	40008000 	.word	0x40008000
 800474c:	00f42400 	.word	0x00f42400

08004750 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475c:	f003 0308 	and.w	r3, r3, #8
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00a      	beq.n	800477a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00a      	beq.n	80047be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c2:	f003 0304 	and.w	r3, r3, #4
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00a      	beq.n	80047e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e4:	f003 0310 	and.w	r3, r3, #16
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00a      	beq.n	8004802 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004806:	f003 0320 	and.w	r3, r3, #32
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00a      	beq.n	8004824 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800482c:	2b00      	cmp	r3, #0
 800482e:	d01a      	beq.n	8004866 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800484e:	d10a      	bne.n	8004866 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	605a      	str	r2, [r3, #4]
  }
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b098      	sub	sp, #96	@ 0x60
 8004898:	af02      	add	r7, sp, #8
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048a4:	f7fc fcb0 	bl	8001208 <HAL_GetTick>
 80048a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0308 	and.w	r3, r3, #8
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d12e      	bne.n	8004916 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048c0:	2200      	movs	r2, #0
 80048c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f88c 	bl	80049e4 <UART_WaitOnFlagUntilTimeout>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d021      	beq.n	8004916 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048da:	e853 3f00 	ldrex	r3, [r3]
 80048de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	461a      	mov	r2, r3
 80048ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80048f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048f8:	e841 2300 	strex	r3, r2, [r1]
 80048fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1e6      	bne.n	80048d2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e062      	b.n	80049dc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b04      	cmp	r3, #4
 8004922:	d149      	bne.n	80049b8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004924:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800492c:	2200      	movs	r2, #0
 800492e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f856 	bl	80049e4 <UART_WaitOnFlagUntilTimeout>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d03c      	beq.n	80049b8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004946:	e853 3f00 	ldrex	r3, [r3]
 800494a:	623b      	str	r3, [r7, #32]
   return(result);
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004952:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	461a      	mov	r2, r3
 800495a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800495c:	633b      	str	r3, [r7, #48]	@ 0x30
 800495e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004960:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004962:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004964:	e841 2300 	strex	r3, r2, [r1]
 8004968:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800496a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1e6      	bne.n	800493e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	3308      	adds	r3, #8
 8004976:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	e853 3f00 	ldrex	r3, [r3]
 800497e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 0301 	bic.w	r3, r3, #1
 8004986:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3308      	adds	r3, #8
 800498e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004990:	61fa      	str	r2, [r7, #28]
 8004992:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004994:	69b9      	ldr	r1, [r7, #24]
 8004996:	69fa      	ldr	r2, [r7, #28]
 8004998:	e841 2300 	strex	r3, r2, [r1]
 800499c:	617b      	str	r3, [r7, #20]
   return(result);
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1e5      	bne.n	8004970 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e011      	b.n	80049dc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2220      	movs	r2, #32
 80049bc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2220      	movs	r2, #32
 80049c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3758      	adds	r7, #88	@ 0x58
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	603b      	str	r3, [r7, #0]
 80049f0:	4613      	mov	r3, r2
 80049f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049f4:	e04f      	b.n	8004a96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fc:	d04b      	beq.n	8004a96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049fe:	f7fc fc03 	bl	8001208 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d302      	bcc.n	8004a14 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e04e      	b.n	8004ab6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0304 	and.w	r3, r3, #4
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d037      	beq.n	8004a96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2b80      	cmp	r3, #128	@ 0x80
 8004a2a:	d034      	beq.n	8004a96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b40      	cmp	r3, #64	@ 0x40
 8004a30:	d031      	beq.n	8004a96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	69db      	ldr	r3, [r3, #28]
 8004a38:	f003 0308 	and.w	r3, r3, #8
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d110      	bne.n	8004a62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2208      	movs	r2, #8
 8004a46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 f8ff 	bl	8004c4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2208      	movs	r2, #8
 8004a52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e029      	b.n	8004ab6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a70:	d111      	bne.n	8004a96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 f8e5 	bl	8004c4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e00f      	b.n	8004ab6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	69da      	ldr	r2, [r3, #28]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	bf0c      	ite	eq
 8004aa6:	2301      	moveq	r3, #1
 8004aa8:	2300      	movne	r3, #0
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	461a      	mov	r2, r3
 8004aae:	79fb      	ldrb	r3, [r7, #7]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d0a0      	beq.n	80049f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
	...

08004ac0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b097      	sub	sp, #92	@ 0x5c
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	4613      	mov	r3, r2
 8004acc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	88fa      	ldrh	r2, [r7, #6]
 8004ad8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	88fa      	ldrh	r2, [r7, #6]
 8004ae0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004af2:	d10e      	bne.n	8004b12 <UART_Start_Receive_IT+0x52>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d105      	bne.n	8004b08 <UART_Start_Receive_IT+0x48>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004b02:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004b06:	e02d      	b.n	8004b64 <UART_Start_Receive_IT+0xa4>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	22ff      	movs	r2, #255	@ 0xff
 8004b0c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004b10:	e028      	b.n	8004b64 <UART_Start_Receive_IT+0xa4>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10d      	bne.n	8004b36 <UART_Start_Receive_IT+0x76>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d104      	bne.n	8004b2c <UART_Start_Receive_IT+0x6c>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	22ff      	movs	r2, #255	@ 0xff
 8004b26:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004b2a:	e01b      	b.n	8004b64 <UART_Start_Receive_IT+0xa4>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	227f      	movs	r2, #127	@ 0x7f
 8004b30:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004b34:	e016      	b.n	8004b64 <UART_Start_Receive_IT+0xa4>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b3e:	d10d      	bne.n	8004b5c <UART_Start_Receive_IT+0x9c>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d104      	bne.n	8004b52 <UART_Start_Receive_IT+0x92>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	227f      	movs	r2, #127	@ 0x7f
 8004b4c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004b50:	e008      	b.n	8004b64 <UART_Start_Receive_IT+0xa4>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	223f      	movs	r2, #63	@ 0x3f
 8004b56:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004b5a:	e003      	b.n	8004b64 <UART_Start_Receive_IT+0xa4>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2222      	movs	r2, #34	@ 0x22
 8004b70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3308      	adds	r3, #8
 8004b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b7e:	e853 3f00 	ldrex	r3, [r3]
 8004b82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b86:	f043 0301 	orr.w	r3, r3, #1
 8004b8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	3308      	adds	r3, #8
 8004b92:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004b94:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004b96:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b98:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004b9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b9c:	e841 2300 	strex	r3, r2, [r1]
 8004ba0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004ba2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1e5      	bne.n	8004b74 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bb0:	d107      	bne.n	8004bc2 <UART_Start_Receive_IT+0x102>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d103      	bne.n	8004bc2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	4a21      	ldr	r2, [pc, #132]	@ (8004c44 <UART_Start_Receive_IT+0x184>)
 8004bbe:	669a      	str	r2, [r3, #104]	@ 0x68
 8004bc0:	e002      	b.n	8004bc8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	4a20      	ldr	r2, [pc, #128]	@ (8004c48 <UART_Start_Receive_IT+0x188>)
 8004bc6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d019      	beq.n	8004c04 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd8:	e853 3f00 	ldrex	r3, [r3]
 8004bdc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004be4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	461a      	mov	r2, r3
 8004bec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bee:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bf0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004bf4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004bf6:	e841 2300 	strex	r3, r2, [r1]
 8004bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1e6      	bne.n	8004bd0 <UART_Start_Receive_IT+0x110>
 8004c02:	e018      	b.n	8004c36 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	e853 3f00 	ldrex	r3, [r3]
 8004c10:	613b      	str	r3, [r7, #16]
   return(result);
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f043 0320 	orr.w	r3, r3, #32
 8004c18:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c22:	623b      	str	r3, [r7, #32]
 8004c24:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c26:	69f9      	ldr	r1, [r7, #28]
 8004c28:	6a3a      	ldr	r2, [r7, #32]
 8004c2a:	e841 2300 	strex	r3, r2, [r1]
 8004c2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1e6      	bne.n	8004c04 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	375c      	adds	r7, #92	@ 0x5c
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	08004f51 	.word	0x08004f51
 8004c48:	08004d95 	.word	0x08004d95

08004c4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b095      	sub	sp, #84	@ 0x54
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c5c:	e853 3f00 	ldrex	r3, [r3]
 8004c60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c72:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c74:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c7a:	e841 2300 	strex	r3, r2, [r1]
 8004c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1e6      	bne.n	8004c54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	3308      	adds	r3, #8
 8004c8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8e:	6a3b      	ldr	r3, [r7, #32]
 8004c90:	e853 3f00 	ldrex	r3, [r3]
 8004c94:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	f023 0301 	bic.w	r3, r3, #1
 8004c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	3308      	adds	r3, #8
 8004ca4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ca6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004caa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cae:	e841 2300 	strex	r3, r2, [r1]
 8004cb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1e5      	bne.n	8004c86 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d118      	bne.n	8004cf4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	e853 3f00 	ldrex	r3, [r3]
 8004cce:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	f023 0310 	bic.w	r3, r3, #16
 8004cd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	461a      	mov	r2, r3
 8004cde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ce0:	61bb      	str	r3, [r7, #24]
 8004ce2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce4:	6979      	ldr	r1, [r7, #20]
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	e841 2300 	strex	r3, r2, [r1]
 8004cec:	613b      	str	r3, [r7, #16]
   return(result);
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1e6      	bne.n	8004cc2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d08:	bf00      	nop
 8004d0a:	3754      	adds	r7, #84	@ 0x54
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f7ff fa3e 	bl	80041b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d38:	bf00      	nop
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b088      	sub	sp, #32
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	e853 3f00 	ldrex	r3, [r3]
 8004d54:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d5c:	61fb      	str	r3, [r7, #28]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	461a      	mov	r2, r3
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	61bb      	str	r3, [r7, #24]
 8004d68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6a:	6979      	ldr	r1, [r7, #20]
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	e841 2300 	strex	r3, r2, [r1]
 8004d72:	613b      	str	r3, [r7, #16]
   return(result);
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1e6      	bne.n	8004d48 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7ff fa0a 	bl	80041a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d8c:	bf00      	nop
 8004d8e:	3720      	adds	r7, #32
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b09c      	sub	sp, #112	@ 0x70
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004da2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dac:	2b22      	cmp	r3, #34	@ 0x22
 8004dae:	f040 80be 	bne.w	8004f2e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004db8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004dbc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004dc0:	b2d9      	uxtb	r1, r3
 8004dc2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dcc:	400a      	ands	r2, r1
 8004dce:	b2d2      	uxtb	r2, r2
 8004dd0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	3b01      	subs	r3, #1
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f040 80a3 	bne.w	8004f42 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e04:	e853 3f00 	ldrex	r3, [r3]
 8004e08:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e1c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e22:	e841 2300 	strex	r3, r2, [r1]
 8004e26:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1e6      	bne.n	8004dfc <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3308      	adds	r3, #8
 8004e34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e38:	e853 3f00 	ldrex	r3, [r3]
 8004e3c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e40:	f023 0301 	bic.w	r3, r3, #1
 8004e44:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3308      	adds	r3, #8
 8004e4c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004e4e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e50:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e56:	e841 2300 	strex	r3, r2, [r1]
 8004e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1e5      	bne.n	8004e2e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a34      	ldr	r2, [pc, #208]	@ (8004f4c <UART_RxISR_8BIT+0x1b8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d01f      	beq.n	8004ec0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d018      	beq.n	8004ec0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e96:	e853 3f00 	ldrex	r3, [r3]
 8004e9a:	623b      	str	r3, [r7, #32]
   return(result);
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ea2:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004eac:	633b      	str	r3, [r7, #48]	@ 0x30
 8004eae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004eb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eb4:	e841 2300 	strex	r3, r2, [r1]
 8004eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e6      	bne.n	8004e8e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d12e      	bne.n	8004f26 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	e853 3f00 	ldrex	r3, [r3]
 8004eda:	60fb      	str	r3, [r7, #12]
   return(result);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0310 	bic.w	r3, r3, #16
 8004ee2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	461a      	mov	r2, r3
 8004eea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004eec:	61fb      	str	r3, [r7, #28]
 8004eee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef0:	69b9      	ldr	r1, [r7, #24]
 8004ef2:	69fa      	ldr	r2, [r7, #28]
 8004ef4:	e841 2300 	strex	r3, r2, [r1]
 8004ef8:	617b      	str	r3, [r7, #20]
   return(result);
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1e6      	bne.n	8004ece <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	f003 0310 	and.w	r3, r3, #16
 8004f0a:	2b10      	cmp	r3, #16
 8004f0c:	d103      	bne.n	8004f16 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2210      	movs	r2, #16
 8004f14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7ff f952 	bl	80041c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f24:	e00d      	b.n	8004f42 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7fb fbd4 	bl	80006d4 <HAL_UART_RxCpltCallback>
}
 8004f2c:	e009      	b.n	8004f42 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	8b1b      	ldrh	r3, [r3, #24]
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0208 	orr.w	r2, r2, #8
 8004f3e:	b292      	uxth	r2, r2
 8004f40:	831a      	strh	r2, [r3, #24]
}
 8004f42:	bf00      	nop
 8004f44:	3770      	adds	r7, #112	@ 0x70
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	40008000 	.word	0x40008000

08004f50 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b09c      	sub	sp, #112	@ 0x70
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004f5e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f68:	2b22      	cmp	r3, #34	@ 0x22
 8004f6a:	f040 80be 	bne.w	80050ea <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004f74:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f7c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004f7e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004f82:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004f86:	4013      	ands	r3, r2
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f8c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f92:	1c9a      	adds	r2, r3, #2
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f040 80a3 	bne.w	80050fe <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fc0:	e853 3f00 	ldrex	r3, [r3]
 8004fc4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004fc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fcc:	667b      	str	r3, [r7, #100]	@ 0x64
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fd6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fd8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fda:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004fdc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004fde:	e841 2300 	strex	r3, r2, [r1]
 8004fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004fe4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1e6      	bne.n	8004fb8 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	3308      	adds	r3, #8
 8004ff0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ff4:	e853 3f00 	ldrex	r3, [r3]
 8004ff8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffc:	f023 0301 	bic.w	r3, r3, #1
 8005000:	663b      	str	r3, [r7, #96]	@ 0x60
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	3308      	adds	r3, #8
 8005008:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800500a:	643a      	str	r2, [r7, #64]	@ 0x40
 800500c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005010:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005012:	e841 2300 	strex	r3, r2, [r1]
 8005016:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1e5      	bne.n	8004fea <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2220      	movs	r2, #32
 8005022:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a34      	ldr	r2, [pc, #208]	@ (8005108 <UART_RxISR_16BIT+0x1b8>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d01f      	beq.n	800507c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d018      	beq.n	800507c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	e853 3f00 	ldrex	r3, [r3]
 8005056:	61fb      	str	r3, [r7, #28]
   return(result);
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800505e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	461a      	mov	r2, r3
 8005066:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005068:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800506a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800506e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005070:	e841 2300 	strex	r3, r2, [r1]
 8005074:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1e6      	bne.n	800504a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005080:	2b01      	cmp	r3, #1
 8005082:	d12e      	bne.n	80050e2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	e853 3f00 	ldrex	r3, [r3]
 8005096:	60bb      	str	r3, [r7, #8]
   return(result);
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f023 0310 	bic.w	r3, r3, #16
 800509e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	461a      	mov	r2, r3
 80050a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050a8:	61bb      	str	r3, [r7, #24]
 80050aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ac:	6979      	ldr	r1, [r7, #20]
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	e841 2300 	strex	r3, r2, [r1]
 80050b4:	613b      	str	r3, [r7, #16]
   return(result);
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1e6      	bne.n	800508a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	f003 0310 	and.w	r3, r3, #16
 80050c6:	2b10      	cmp	r3, #16
 80050c8:	d103      	bne.n	80050d2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2210      	movs	r2, #16
 80050d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80050d8:	4619      	mov	r1, r3
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7ff f874 	bl	80041c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80050e0:	e00d      	b.n	80050fe <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7fb faf6 	bl	80006d4 <HAL_UART_RxCpltCallback>
}
 80050e8:	e009      	b.n	80050fe <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	8b1b      	ldrh	r3, [r3, #24]
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0208 	orr.w	r2, r2, #8
 80050fa:	b292      	uxth	r2, r2
 80050fc:	831a      	strh	r2, [r3, #24]
}
 80050fe:	bf00      	nop
 8005100:	3770      	adds	r7, #112	@ 0x70
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	40008000 	.word	0x40008000

0800510c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8005124:	bf00      	nop
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
	...

08005130 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af04      	add	r7, sp, #16
 8005136:	4603      	mov	r3, r0
 8005138:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800513a:	f04f 33ff 	mov.w	r3, #4294967295
 800513e:	9302      	str	r3, [sp, #8]
 8005140:	2301      	movs	r3, #1
 8005142:	9301      	str	r3, [sp, #4]
 8005144:	1dfb      	adds	r3, r7, #7
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	2301      	movs	r3, #1
 800514a:	2200      	movs	r2, #0
 800514c:	2178      	movs	r1, #120	@ 0x78
 800514e:	4803      	ldr	r0, [pc, #12]	@ (800515c <ssd1306_WriteCommand+0x2c>)
 8005150:	f7fc fcc2 	bl	8001ad8 <HAL_I2C_Mem_Write>
}
 8005154:	bf00      	nop
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	200000bc 	.word	0x200000bc

08005160 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af04      	add	r7, sp, #16
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	b29b      	uxth	r3, r3
 800516e:	f04f 32ff 	mov.w	r2, #4294967295
 8005172:	9202      	str	r2, [sp, #8]
 8005174:	9301      	str	r3, [sp, #4]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	2301      	movs	r3, #1
 800517c:	2240      	movs	r2, #64	@ 0x40
 800517e:	2178      	movs	r1, #120	@ 0x78
 8005180:	4803      	ldr	r0, [pc, #12]	@ (8005190 <ssd1306_WriteData+0x30>)
 8005182:	f7fc fca9 	bl	8001ad8 <HAL_I2C_Mem_Write>
}
 8005186:	bf00      	nop
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	200000bc 	.word	0x200000bc

08005194 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8005198:	f7ff ffc2 	bl	8005120 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800519c:	2064      	movs	r0, #100	@ 0x64
 800519e:	f7fc f83f 	bl	8001220 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80051a2:	2000      	movs	r0, #0
 80051a4:	f000 f9d6 	bl	8005554 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80051a8:	2020      	movs	r0, #32
 80051aa:	f7ff ffc1 	bl	8005130 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80051ae:	2000      	movs	r0, #0
 80051b0:	f7ff ffbe 	bl	8005130 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80051b4:	20b0      	movs	r0, #176	@ 0xb0
 80051b6:	f7ff ffbb 	bl	8005130 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80051ba:	20c8      	movs	r0, #200	@ 0xc8
 80051bc:	f7ff ffb8 	bl	8005130 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80051c0:	2000      	movs	r0, #0
 80051c2:	f7ff ffb5 	bl	8005130 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80051c6:	2010      	movs	r0, #16
 80051c8:	f7ff ffb2 	bl	8005130 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80051cc:	2040      	movs	r0, #64	@ 0x40
 80051ce:	f7ff ffaf 	bl	8005130 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80051d2:	20ff      	movs	r0, #255	@ 0xff
 80051d4:	f000 f9aa 	bl	800552c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80051d8:	20a1      	movs	r0, #161	@ 0xa1
 80051da:	f7ff ffa9 	bl	8005130 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80051de:	20a6      	movs	r0, #166	@ 0xa6
 80051e0:	f7ff ffa6 	bl	8005130 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80051e4:	20a8      	movs	r0, #168	@ 0xa8
 80051e6:	f7ff ffa3 	bl	8005130 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80051ea:	203f      	movs	r0, #63	@ 0x3f
 80051ec:	f7ff ffa0 	bl	8005130 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80051f0:	20a4      	movs	r0, #164	@ 0xa4
 80051f2:	f7ff ff9d 	bl	8005130 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80051f6:	20d3      	movs	r0, #211	@ 0xd3
 80051f8:	f7ff ff9a 	bl	8005130 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80051fc:	2000      	movs	r0, #0
 80051fe:	f7ff ff97 	bl	8005130 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8005202:	20d5      	movs	r0, #213	@ 0xd5
 8005204:	f7ff ff94 	bl	8005130 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8005208:	20f0      	movs	r0, #240	@ 0xf0
 800520a:	f7ff ff91 	bl	8005130 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800520e:	20d9      	movs	r0, #217	@ 0xd9
 8005210:	f7ff ff8e 	bl	8005130 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8005214:	2022      	movs	r0, #34	@ 0x22
 8005216:	f7ff ff8b 	bl	8005130 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800521a:	20da      	movs	r0, #218	@ 0xda
 800521c:	f7ff ff88 	bl	8005130 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8005220:	2012      	movs	r0, #18
 8005222:	f7ff ff85 	bl	8005130 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8005226:	20db      	movs	r0, #219	@ 0xdb
 8005228:	f7ff ff82 	bl	8005130 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800522c:	2020      	movs	r0, #32
 800522e:	f7ff ff7f 	bl	8005130 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8005232:	208d      	movs	r0, #141	@ 0x8d
 8005234:	f7ff ff7c 	bl	8005130 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8005238:	2014      	movs	r0, #20
 800523a:	f7ff ff79 	bl	8005130 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800523e:	2001      	movs	r0, #1
 8005240:	f000 f988 	bl	8005554 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8005244:	2000      	movs	r0, #0
 8005246:	f000 f80f 	bl	8005268 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800524a:	f000 f825 	bl	8005298 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800524e:	4b05      	ldr	r3, [pc, #20]	@ (8005264 <ssd1306_Init+0xd0>)
 8005250:	2200      	movs	r2, #0
 8005252:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8005254:	4b03      	ldr	r3, [pc, #12]	@ (8005264 <ssd1306_Init+0xd0>)
 8005256:	2200      	movs	r2, #0
 8005258:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800525a:	4b02      	ldr	r3, [pc, #8]	@ (8005264 <ssd1306_Init+0xd0>)
 800525c:	2201      	movs	r2, #1
 800525e:	711a      	strb	r2, [r3, #4]
}
 8005260:	bf00      	nop
 8005262:	bd80      	pop	{r7, pc}
 8005264:	200005c8 	.word	0x200005c8

08005268 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	4603      	mov	r3, r0
 8005270:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8005272:	79fb      	ldrb	r3, [r7, #7]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <ssd1306_Fill+0x14>
 8005278:	2300      	movs	r3, #0
 800527a:	e000      	b.n	800527e <ssd1306_Fill+0x16>
 800527c:	23ff      	movs	r3, #255	@ 0xff
 800527e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005282:	4619      	mov	r1, r3
 8005284:	4803      	ldr	r0, [pc, #12]	@ (8005294 <ssd1306_Fill+0x2c>)
 8005286:	f000 fb7b 	bl	8005980 <memset>
}
 800528a:	bf00      	nop
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	200001c8 	.word	0x200001c8

08005298 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800529e:	2300      	movs	r3, #0
 80052a0:	71fb      	strb	r3, [r7, #7]
 80052a2:	e016      	b.n	80052d2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80052a4:	79fb      	ldrb	r3, [r7, #7]
 80052a6:	3b50      	subs	r3, #80	@ 0x50
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7ff ff40 	bl	8005130 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80052b0:	2000      	movs	r0, #0
 80052b2:	f7ff ff3d 	bl	8005130 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80052b6:	2010      	movs	r0, #16
 80052b8:	f7ff ff3a 	bl	8005130 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80052bc:	79fb      	ldrb	r3, [r7, #7]
 80052be:	01db      	lsls	r3, r3, #7
 80052c0:	4a08      	ldr	r2, [pc, #32]	@ (80052e4 <ssd1306_UpdateScreen+0x4c>)
 80052c2:	4413      	add	r3, r2
 80052c4:	2180      	movs	r1, #128	@ 0x80
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff ff4a 	bl	8005160 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80052cc:	79fb      	ldrb	r3, [r7, #7]
 80052ce:	3301      	adds	r3, #1
 80052d0:	71fb      	strb	r3, [r7, #7]
 80052d2:	79fb      	ldrb	r3, [r7, #7]
 80052d4:	2b07      	cmp	r3, #7
 80052d6:	d9e5      	bls.n	80052a4 <ssd1306_UpdateScreen+0xc>
    }
}
 80052d8:	bf00      	nop
 80052da:	bf00      	nop
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	200001c8 	.word	0x200001c8

080052e8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	4603      	mov	r3, r0
 80052f0:	71fb      	strb	r3, [r7, #7]
 80052f2:	460b      	mov	r3, r1
 80052f4:	71bb      	strb	r3, [r7, #6]
 80052f6:	4613      	mov	r3, r2
 80052f8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80052fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	db3d      	blt.n	800537e <ssd1306_DrawPixel+0x96>
 8005302:	79bb      	ldrb	r3, [r7, #6]
 8005304:	2b3f      	cmp	r3, #63	@ 0x3f
 8005306:	d83a      	bhi.n	800537e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8005308:	797b      	ldrb	r3, [r7, #5]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d11a      	bne.n	8005344 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800530e:	79fa      	ldrb	r2, [r7, #7]
 8005310:	79bb      	ldrb	r3, [r7, #6]
 8005312:	08db      	lsrs	r3, r3, #3
 8005314:	b2d8      	uxtb	r0, r3
 8005316:	4603      	mov	r3, r0
 8005318:	01db      	lsls	r3, r3, #7
 800531a:	4413      	add	r3, r2
 800531c:	4a1b      	ldr	r2, [pc, #108]	@ (800538c <ssd1306_DrawPixel+0xa4>)
 800531e:	5cd3      	ldrb	r3, [r2, r3]
 8005320:	b25a      	sxtb	r2, r3
 8005322:	79bb      	ldrb	r3, [r7, #6]
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	2101      	movs	r1, #1
 800532a:	fa01 f303 	lsl.w	r3, r1, r3
 800532e:	b25b      	sxtb	r3, r3
 8005330:	4313      	orrs	r3, r2
 8005332:	b259      	sxtb	r1, r3
 8005334:	79fa      	ldrb	r2, [r7, #7]
 8005336:	4603      	mov	r3, r0
 8005338:	01db      	lsls	r3, r3, #7
 800533a:	4413      	add	r3, r2
 800533c:	b2c9      	uxtb	r1, r1
 800533e:	4a13      	ldr	r2, [pc, #76]	@ (800538c <ssd1306_DrawPixel+0xa4>)
 8005340:	54d1      	strb	r1, [r2, r3]
 8005342:	e01d      	b.n	8005380 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005344:	79fa      	ldrb	r2, [r7, #7]
 8005346:	79bb      	ldrb	r3, [r7, #6]
 8005348:	08db      	lsrs	r3, r3, #3
 800534a:	b2d8      	uxtb	r0, r3
 800534c:	4603      	mov	r3, r0
 800534e:	01db      	lsls	r3, r3, #7
 8005350:	4413      	add	r3, r2
 8005352:	4a0e      	ldr	r2, [pc, #56]	@ (800538c <ssd1306_DrawPixel+0xa4>)
 8005354:	5cd3      	ldrb	r3, [r2, r3]
 8005356:	b25a      	sxtb	r2, r3
 8005358:	79bb      	ldrb	r3, [r7, #6]
 800535a:	f003 0307 	and.w	r3, r3, #7
 800535e:	2101      	movs	r1, #1
 8005360:	fa01 f303 	lsl.w	r3, r1, r3
 8005364:	b25b      	sxtb	r3, r3
 8005366:	43db      	mvns	r3, r3
 8005368:	b25b      	sxtb	r3, r3
 800536a:	4013      	ands	r3, r2
 800536c:	b259      	sxtb	r1, r3
 800536e:	79fa      	ldrb	r2, [r7, #7]
 8005370:	4603      	mov	r3, r0
 8005372:	01db      	lsls	r3, r3, #7
 8005374:	4413      	add	r3, r2
 8005376:	b2c9      	uxtb	r1, r1
 8005378:	4a04      	ldr	r2, [pc, #16]	@ (800538c <ssd1306_DrawPixel+0xa4>)
 800537a:	54d1      	strb	r1, [r2, r3]
 800537c:	e000      	b.n	8005380 <ssd1306_DrawPixel+0x98>
        return;
 800537e:	bf00      	nop
    }
}
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	200001c8 	.word	0x200001c8

08005390 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8005390:	b590      	push	{r4, r7, lr}
 8005392:	b089      	sub	sp, #36	@ 0x24
 8005394:	af00      	add	r7, sp, #0
 8005396:	4604      	mov	r4, r0
 8005398:	4638      	mov	r0, r7
 800539a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800539e:	4623      	mov	r3, r4
 80053a0:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80053a2:	7bfb      	ldrb	r3, [r7, #15]
 80053a4:	2b1f      	cmp	r3, #31
 80053a6:	d902      	bls.n	80053ae <ssd1306_WriteChar+0x1e>
 80053a8:	7bfb      	ldrb	r3, [r7, #15]
 80053aa:	2b7e      	cmp	r3, #126	@ 0x7e
 80053ac:	d901      	bls.n	80053b2 <ssd1306_WriteChar+0x22>
        return 0;
 80053ae:	2300      	movs	r3, #0
 80053b0:	e077      	b.n	80054a2 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80053b2:	4b3e      	ldr	r3, [pc, #248]	@ (80054ac <ssd1306_WriteChar+0x11c>)
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	461a      	mov	r2, r3
 80053b8:	783b      	ldrb	r3, [r7, #0]
 80053ba:	4413      	add	r3, r2
 80053bc:	2b80      	cmp	r3, #128	@ 0x80
 80053be:	dc06      	bgt.n	80053ce <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80053c0:	4b3a      	ldr	r3, [pc, #232]	@ (80054ac <ssd1306_WriteChar+0x11c>)
 80053c2:	885b      	ldrh	r3, [r3, #2]
 80053c4:	461a      	mov	r2, r3
 80053c6:	787b      	ldrb	r3, [r7, #1]
 80053c8:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80053ca:	2b40      	cmp	r3, #64	@ 0x40
 80053cc:	dd01      	ble.n	80053d2 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80053ce:	2300      	movs	r3, #0
 80053d0:	e067      	b.n	80054a2 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80053d2:	2300      	movs	r3, #0
 80053d4:	61fb      	str	r3, [r7, #28]
 80053d6:	e04e      	b.n	8005476 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	7bfb      	ldrb	r3, [r7, #15]
 80053dc:	3b20      	subs	r3, #32
 80053de:	7879      	ldrb	r1, [r7, #1]
 80053e0:	fb01 f303 	mul.w	r3, r1, r3
 80053e4:	4619      	mov	r1, r3
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	440b      	add	r3, r1
 80053ea:	005b      	lsls	r3, r3, #1
 80053ec:	4413      	add	r3, r2
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80053f2:	2300      	movs	r3, #0
 80053f4:	61bb      	str	r3, [r7, #24]
 80053f6:	e036      	b.n	8005466 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005400:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d013      	beq.n	8005430 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005408:	4b28      	ldr	r3, [pc, #160]	@ (80054ac <ssd1306_WriteChar+0x11c>)
 800540a:	881b      	ldrh	r3, [r3, #0]
 800540c:	b2da      	uxtb	r2, r3
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	b2db      	uxtb	r3, r3
 8005412:	4413      	add	r3, r2
 8005414:	b2d8      	uxtb	r0, r3
 8005416:	4b25      	ldr	r3, [pc, #148]	@ (80054ac <ssd1306_WriteChar+0x11c>)
 8005418:	885b      	ldrh	r3, [r3, #2]
 800541a:	b2da      	uxtb	r2, r3
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	b2db      	uxtb	r3, r3
 8005420:	4413      	add	r3, r2
 8005422:	b2db      	uxtb	r3, r3
 8005424:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8005428:	4619      	mov	r1, r3
 800542a:	f7ff ff5d 	bl	80052e8 <ssd1306_DrawPixel>
 800542e:	e017      	b.n	8005460 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005430:	4b1e      	ldr	r3, [pc, #120]	@ (80054ac <ssd1306_WriteChar+0x11c>)
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	b2da      	uxtb	r2, r3
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	b2db      	uxtb	r3, r3
 800543a:	4413      	add	r3, r2
 800543c:	b2d8      	uxtb	r0, r3
 800543e:	4b1b      	ldr	r3, [pc, #108]	@ (80054ac <ssd1306_WriteChar+0x11c>)
 8005440:	885b      	ldrh	r3, [r3, #2]
 8005442:	b2da      	uxtb	r2, r3
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	b2db      	uxtb	r3, r3
 8005448:	4413      	add	r3, r2
 800544a:	b2d9      	uxtb	r1, r3
 800544c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005450:	2b00      	cmp	r3, #0
 8005452:	bf0c      	ite	eq
 8005454:	2301      	moveq	r3, #1
 8005456:	2300      	movne	r3, #0
 8005458:	b2db      	uxtb	r3, r3
 800545a:	461a      	mov	r2, r3
 800545c:	f7ff ff44 	bl	80052e8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	3301      	adds	r3, #1
 8005464:	61bb      	str	r3, [r7, #24]
 8005466:	783b      	ldrb	r3, [r7, #0]
 8005468:	461a      	mov	r2, r3
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	4293      	cmp	r3, r2
 800546e:	d3c3      	bcc.n	80053f8 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	3301      	adds	r3, #1
 8005474:	61fb      	str	r3, [r7, #28]
 8005476:	787b      	ldrb	r3, [r7, #1]
 8005478:	461a      	mov	r2, r3
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	4293      	cmp	r3, r2
 800547e:	d3ab      	bcc.n	80053d8 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8005480:	4b0a      	ldr	r3, [pc, #40]	@ (80054ac <ssd1306_WriteChar+0x11c>)
 8005482:	881b      	ldrh	r3, [r3, #0]
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	2a00      	cmp	r2, #0
 8005488:	d005      	beq.n	8005496 <ssd1306_WriteChar+0x106>
 800548a:	68b9      	ldr	r1, [r7, #8]
 800548c:	7bfa      	ldrb	r2, [r7, #15]
 800548e:	3a20      	subs	r2, #32
 8005490:	440a      	add	r2, r1
 8005492:	7812      	ldrb	r2, [r2, #0]
 8005494:	e000      	b.n	8005498 <ssd1306_WriteChar+0x108>
 8005496:	783a      	ldrb	r2, [r7, #0]
 8005498:	4413      	add	r3, r2
 800549a:	b29a      	uxth	r2, r3
 800549c:	4b03      	ldr	r3, [pc, #12]	@ (80054ac <ssd1306_WriteChar+0x11c>)
 800549e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80054a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3724      	adds	r7, #36	@ 0x24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd90      	pop	{r4, r7, pc}
 80054aa:	bf00      	nop
 80054ac:	200005c8 	.word	0x200005c8

080054b0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af02      	add	r7, sp, #8
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	4638      	mov	r0, r7
 80054ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80054be:	e013      	b.n	80054e8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	7818      	ldrb	r0, [r3, #0]
 80054c4:	7e3b      	ldrb	r3, [r7, #24]
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	463b      	mov	r3, r7
 80054ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054cc:	f7ff ff60 	bl	8005390 <ssd1306_WriteChar>
 80054d0:	4603      	mov	r3, r0
 80054d2:	461a      	mov	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d002      	beq.n	80054e2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	e008      	b.n	80054f4 <ssd1306_WriteString+0x44>
        }
        str++;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	3301      	adds	r3, #1
 80054e6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e7      	bne.n	80054c0 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	781b      	ldrb	r3, [r3, #0]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	4603      	mov	r3, r0
 8005504:	460a      	mov	r2, r1
 8005506:	71fb      	strb	r3, [r7, #7]
 8005508:	4613      	mov	r3, r2
 800550a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800550c:	79fb      	ldrb	r3, [r7, #7]
 800550e:	b29a      	uxth	r2, r3
 8005510:	4b05      	ldr	r3, [pc, #20]	@ (8005528 <ssd1306_SetCursor+0x2c>)
 8005512:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8005514:	79bb      	ldrb	r3, [r7, #6]
 8005516:	b29a      	uxth	r2, r3
 8005518:	4b03      	ldr	r3, [pc, #12]	@ (8005528 <ssd1306_SetCursor+0x2c>)
 800551a:	805a      	strh	r2, [r3, #2]
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	200005c8 	.word	0x200005c8

0800552c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	4603      	mov	r3, r0
 8005534:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8005536:	2381      	movs	r3, #129	@ 0x81
 8005538:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800553a:	7bfb      	ldrb	r3, [r7, #15]
 800553c:	4618      	mov	r0, r3
 800553e:	f7ff fdf7 	bl	8005130 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8005542:	79fb      	ldrb	r3, [r7, #7]
 8005544:	4618      	mov	r0, r3
 8005546:	f7ff fdf3 	bl	8005130 <ssd1306_WriteCommand>
}
 800554a:	bf00      	nop
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	4603      	mov	r3, r0
 800555c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800555e:	79fb      	ldrb	r3, [r7, #7]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d005      	beq.n	8005570 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8005564:	23af      	movs	r3, #175	@ 0xaf
 8005566:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8005568:	4b08      	ldr	r3, [pc, #32]	@ (800558c <ssd1306_SetDisplayOn+0x38>)
 800556a:	2201      	movs	r2, #1
 800556c:	715a      	strb	r2, [r3, #5]
 800556e:	e004      	b.n	800557a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8005570:	23ae      	movs	r3, #174	@ 0xae
 8005572:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8005574:	4b05      	ldr	r3, [pc, #20]	@ (800558c <ssd1306_SetDisplayOn+0x38>)
 8005576:	2200      	movs	r2, #0
 8005578:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800557a:	7bfb      	ldrb	r3, [r7, #15]
 800557c:	4618      	mov	r0, r3
 800557e:	f7ff fdd7 	bl	8005130 <ssd1306_WriteCommand>
}
 8005582:	bf00      	nop
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	200005c8 	.word	0x200005c8

08005590 <std>:
 8005590:	2300      	movs	r3, #0
 8005592:	b510      	push	{r4, lr}
 8005594:	4604      	mov	r4, r0
 8005596:	e9c0 3300 	strd	r3, r3, [r0]
 800559a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800559e:	6083      	str	r3, [r0, #8]
 80055a0:	8181      	strh	r1, [r0, #12]
 80055a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80055a4:	81c2      	strh	r2, [r0, #14]
 80055a6:	6183      	str	r3, [r0, #24]
 80055a8:	4619      	mov	r1, r3
 80055aa:	2208      	movs	r2, #8
 80055ac:	305c      	adds	r0, #92	@ 0x5c
 80055ae:	f000 f9e7 	bl	8005980 <memset>
 80055b2:	4b0d      	ldr	r3, [pc, #52]	@ (80055e8 <std+0x58>)
 80055b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80055b6:	4b0d      	ldr	r3, [pc, #52]	@ (80055ec <std+0x5c>)
 80055b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80055ba:	4b0d      	ldr	r3, [pc, #52]	@ (80055f0 <std+0x60>)
 80055bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80055be:	4b0d      	ldr	r3, [pc, #52]	@ (80055f4 <std+0x64>)
 80055c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80055c2:	4b0d      	ldr	r3, [pc, #52]	@ (80055f8 <std+0x68>)
 80055c4:	6224      	str	r4, [r4, #32]
 80055c6:	429c      	cmp	r4, r3
 80055c8:	d006      	beq.n	80055d8 <std+0x48>
 80055ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80055ce:	4294      	cmp	r4, r2
 80055d0:	d002      	beq.n	80055d8 <std+0x48>
 80055d2:	33d0      	adds	r3, #208	@ 0xd0
 80055d4:	429c      	cmp	r4, r3
 80055d6:	d105      	bne.n	80055e4 <std+0x54>
 80055d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80055dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055e0:	f000 ba46 	b.w	8005a70 <__retarget_lock_init_recursive>
 80055e4:	bd10      	pop	{r4, pc}
 80055e6:	bf00      	nop
 80055e8:	080057d1 	.word	0x080057d1
 80055ec:	080057f3 	.word	0x080057f3
 80055f0:	0800582b 	.word	0x0800582b
 80055f4:	0800584f 	.word	0x0800584f
 80055f8:	200005d0 	.word	0x200005d0

080055fc <stdio_exit_handler>:
 80055fc:	4a02      	ldr	r2, [pc, #8]	@ (8005608 <stdio_exit_handler+0xc>)
 80055fe:	4903      	ldr	r1, [pc, #12]	@ (800560c <stdio_exit_handler+0x10>)
 8005600:	4803      	ldr	r0, [pc, #12]	@ (8005610 <stdio_exit_handler+0x14>)
 8005602:	f000 b869 	b.w	80056d8 <_fwalk_sglue>
 8005606:	bf00      	nop
 8005608:	20000040 	.word	0x20000040
 800560c:	08005d71 	.word	0x08005d71
 8005610:	20000050 	.word	0x20000050

08005614 <cleanup_stdio>:
 8005614:	6841      	ldr	r1, [r0, #4]
 8005616:	4b0c      	ldr	r3, [pc, #48]	@ (8005648 <cleanup_stdio+0x34>)
 8005618:	4299      	cmp	r1, r3
 800561a:	b510      	push	{r4, lr}
 800561c:	4604      	mov	r4, r0
 800561e:	d001      	beq.n	8005624 <cleanup_stdio+0x10>
 8005620:	f000 fba6 	bl	8005d70 <_fflush_r>
 8005624:	68a1      	ldr	r1, [r4, #8]
 8005626:	4b09      	ldr	r3, [pc, #36]	@ (800564c <cleanup_stdio+0x38>)
 8005628:	4299      	cmp	r1, r3
 800562a:	d002      	beq.n	8005632 <cleanup_stdio+0x1e>
 800562c:	4620      	mov	r0, r4
 800562e:	f000 fb9f 	bl	8005d70 <_fflush_r>
 8005632:	68e1      	ldr	r1, [r4, #12]
 8005634:	4b06      	ldr	r3, [pc, #24]	@ (8005650 <cleanup_stdio+0x3c>)
 8005636:	4299      	cmp	r1, r3
 8005638:	d004      	beq.n	8005644 <cleanup_stdio+0x30>
 800563a:	4620      	mov	r0, r4
 800563c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005640:	f000 bb96 	b.w	8005d70 <_fflush_r>
 8005644:	bd10      	pop	{r4, pc}
 8005646:	bf00      	nop
 8005648:	200005d0 	.word	0x200005d0
 800564c:	20000638 	.word	0x20000638
 8005650:	200006a0 	.word	0x200006a0

08005654 <global_stdio_init.part.0>:
 8005654:	b510      	push	{r4, lr}
 8005656:	4b0b      	ldr	r3, [pc, #44]	@ (8005684 <global_stdio_init.part.0+0x30>)
 8005658:	4c0b      	ldr	r4, [pc, #44]	@ (8005688 <global_stdio_init.part.0+0x34>)
 800565a:	4a0c      	ldr	r2, [pc, #48]	@ (800568c <global_stdio_init.part.0+0x38>)
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	4620      	mov	r0, r4
 8005660:	2200      	movs	r2, #0
 8005662:	2104      	movs	r1, #4
 8005664:	f7ff ff94 	bl	8005590 <std>
 8005668:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800566c:	2201      	movs	r2, #1
 800566e:	2109      	movs	r1, #9
 8005670:	f7ff ff8e 	bl	8005590 <std>
 8005674:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005678:	2202      	movs	r2, #2
 800567a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800567e:	2112      	movs	r1, #18
 8005680:	f7ff bf86 	b.w	8005590 <std>
 8005684:	20000708 	.word	0x20000708
 8005688:	200005d0 	.word	0x200005d0
 800568c:	080055fd 	.word	0x080055fd

08005690 <__sfp_lock_acquire>:
 8005690:	4801      	ldr	r0, [pc, #4]	@ (8005698 <__sfp_lock_acquire+0x8>)
 8005692:	f000 b9ee 	b.w	8005a72 <__retarget_lock_acquire_recursive>
 8005696:	bf00      	nop
 8005698:	20000711 	.word	0x20000711

0800569c <__sfp_lock_release>:
 800569c:	4801      	ldr	r0, [pc, #4]	@ (80056a4 <__sfp_lock_release+0x8>)
 800569e:	f000 b9e9 	b.w	8005a74 <__retarget_lock_release_recursive>
 80056a2:	bf00      	nop
 80056a4:	20000711 	.word	0x20000711

080056a8 <__sinit>:
 80056a8:	b510      	push	{r4, lr}
 80056aa:	4604      	mov	r4, r0
 80056ac:	f7ff fff0 	bl	8005690 <__sfp_lock_acquire>
 80056b0:	6a23      	ldr	r3, [r4, #32]
 80056b2:	b11b      	cbz	r3, 80056bc <__sinit+0x14>
 80056b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056b8:	f7ff bff0 	b.w	800569c <__sfp_lock_release>
 80056bc:	4b04      	ldr	r3, [pc, #16]	@ (80056d0 <__sinit+0x28>)
 80056be:	6223      	str	r3, [r4, #32]
 80056c0:	4b04      	ldr	r3, [pc, #16]	@ (80056d4 <__sinit+0x2c>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1f5      	bne.n	80056b4 <__sinit+0xc>
 80056c8:	f7ff ffc4 	bl	8005654 <global_stdio_init.part.0>
 80056cc:	e7f2      	b.n	80056b4 <__sinit+0xc>
 80056ce:	bf00      	nop
 80056d0:	08005615 	.word	0x08005615
 80056d4:	20000708 	.word	0x20000708

080056d8 <_fwalk_sglue>:
 80056d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056dc:	4607      	mov	r7, r0
 80056de:	4688      	mov	r8, r1
 80056e0:	4614      	mov	r4, r2
 80056e2:	2600      	movs	r6, #0
 80056e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056e8:	f1b9 0901 	subs.w	r9, r9, #1
 80056ec:	d505      	bpl.n	80056fa <_fwalk_sglue+0x22>
 80056ee:	6824      	ldr	r4, [r4, #0]
 80056f0:	2c00      	cmp	r4, #0
 80056f2:	d1f7      	bne.n	80056e4 <_fwalk_sglue+0xc>
 80056f4:	4630      	mov	r0, r6
 80056f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056fa:	89ab      	ldrh	r3, [r5, #12]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d907      	bls.n	8005710 <_fwalk_sglue+0x38>
 8005700:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005704:	3301      	adds	r3, #1
 8005706:	d003      	beq.n	8005710 <_fwalk_sglue+0x38>
 8005708:	4629      	mov	r1, r5
 800570a:	4638      	mov	r0, r7
 800570c:	47c0      	blx	r8
 800570e:	4306      	orrs	r6, r0
 8005710:	3568      	adds	r5, #104	@ 0x68
 8005712:	e7e9      	b.n	80056e8 <_fwalk_sglue+0x10>

08005714 <_puts_r>:
 8005714:	6a03      	ldr	r3, [r0, #32]
 8005716:	b570      	push	{r4, r5, r6, lr}
 8005718:	6884      	ldr	r4, [r0, #8]
 800571a:	4605      	mov	r5, r0
 800571c:	460e      	mov	r6, r1
 800571e:	b90b      	cbnz	r3, 8005724 <_puts_r+0x10>
 8005720:	f7ff ffc2 	bl	80056a8 <__sinit>
 8005724:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005726:	07db      	lsls	r3, r3, #31
 8005728:	d405      	bmi.n	8005736 <_puts_r+0x22>
 800572a:	89a3      	ldrh	r3, [r4, #12]
 800572c:	0598      	lsls	r0, r3, #22
 800572e:	d402      	bmi.n	8005736 <_puts_r+0x22>
 8005730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005732:	f000 f99e 	bl	8005a72 <__retarget_lock_acquire_recursive>
 8005736:	89a3      	ldrh	r3, [r4, #12]
 8005738:	0719      	lsls	r1, r3, #28
 800573a:	d502      	bpl.n	8005742 <_puts_r+0x2e>
 800573c:	6923      	ldr	r3, [r4, #16]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d135      	bne.n	80057ae <_puts_r+0x9a>
 8005742:	4621      	mov	r1, r4
 8005744:	4628      	mov	r0, r5
 8005746:	f000 f8c5 	bl	80058d4 <__swsetup_r>
 800574a:	b380      	cbz	r0, 80057ae <_puts_r+0x9a>
 800574c:	f04f 35ff 	mov.w	r5, #4294967295
 8005750:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005752:	07da      	lsls	r2, r3, #31
 8005754:	d405      	bmi.n	8005762 <_puts_r+0x4e>
 8005756:	89a3      	ldrh	r3, [r4, #12]
 8005758:	059b      	lsls	r3, r3, #22
 800575a:	d402      	bmi.n	8005762 <_puts_r+0x4e>
 800575c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800575e:	f000 f989 	bl	8005a74 <__retarget_lock_release_recursive>
 8005762:	4628      	mov	r0, r5
 8005764:	bd70      	pop	{r4, r5, r6, pc}
 8005766:	2b00      	cmp	r3, #0
 8005768:	da04      	bge.n	8005774 <_puts_r+0x60>
 800576a:	69a2      	ldr	r2, [r4, #24]
 800576c:	429a      	cmp	r2, r3
 800576e:	dc17      	bgt.n	80057a0 <_puts_r+0x8c>
 8005770:	290a      	cmp	r1, #10
 8005772:	d015      	beq.n	80057a0 <_puts_r+0x8c>
 8005774:	6823      	ldr	r3, [r4, #0]
 8005776:	1c5a      	adds	r2, r3, #1
 8005778:	6022      	str	r2, [r4, #0]
 800577a:	7019      	strb	r1, [r3, #0]
 800577c:	68a3      	ldr	r3, [r4, #8]
 800577e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005782:	3b01      	subs	r3, #1
 8005784:	60a3      	str	r3, [r4, #8]
 8005786:	2900      	cmp	r1, #0
 8005788:	d1ed      	bne.n	8005766 <_puts_r+0x52>
 800578a:	2b00      	cmp	r3, #0
 800578c:	da11      	bge.n	80057b2 <_puts_r+0x9e>
 800578e:	4622      	mov	r2, r4
 8005790:	210a      	movs	r1, #10
 8005792:	4628      	mov	r0, r5
 8005794:	f000 f85f 	bl	8005856 <__swbuf_r>
 8005798:	3001      	adds	r0, #1
 800579a:	d0d7      	beq.n	800574c <_puts_r+0x38>
 800579c:	250a      	movs	r5, #10
 800579e:	e7d7      	b.n	8005750 <_puts_r+0x3c>
 80057a0:	4622      	mov	r2, r4
 80057a2:	4628      	mov	r0, r5
 80057a4:	f000 f857 	bl	8005856 <__swbuf_r>
 80057a8:	3001      	adds	r0, #1
 80057aa:	d1e7      	bne.n	800577c <_puts_r+0x68>
 80057ac:	e7ce      	b.n	800574c <_puts_r+0x38>
 80057ae:	3e01      	subs	r6, #1
 80057b0:	e7e4      	b.n	800577c <_puts_r+0x68>
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	1c5a      	adds	r2, r3, #1
 80057b6:	6022      	str	r2, [r4, #0]
 80057b8:	220a      	movs	r2, #10
 80057ba:	701a      	strb	r2, [r3, #0]
 80057bc:	e7ee      	b.n	800579c <_puts_r+0x88>
	...

080057c0 <puts>:
 80057c0:	4b02      	ldr	r3, [pc, #8]	@ (80057cc <puts+0xc>)
 80057c2:	4601      	mov	r1, r0
 80057c4:	6818      	ldr	r0, [r3, #0]
 80057c6:	f7ff bfa5 	b.w	8005714 <_puts_r>
 80057ca:	bf00      	nop
 80057cc:	2000004c 	.word	0x2000004c

080057d0 <__sread>:
 80057d0:	b510      	push	{r4, lr}
 80057d2:	460c      	mov	r4, r1
 80057d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057d8:	f000 f8fc 	bl	80059d4 <_read_r>
 80057dc:	2800      	cmp	r0, #0
 80057de:	bfab      	itete	ge
 80057e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80057e2:	89a3      	ldrhlt	r3, [r4, #12]
 80057e4:	181b      	addge	r3, r3, r0
 80057e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80057ea:	bfac      	ite	ge
 80057ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80057ee:	81a3      	strhlt	r3, [r4, #12]
 80057f0:	bd10      	pop	{r4, pc}

080057f2 <__swrite>:
 80057f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057f6:	461f      	mov	r7, r3
 80057f8:	898b      	ldrh	r3, [r1, #12]
 80057fa:	05db      	lsls	r3, r3, #23
 80057fc:	4605      	mov	r5, r0
 80057fe:	460c      	mov	r4, r1
 8005800:	4616      	mov	r6, r2
 8005802:	d505      	bpl.n	8005810 <__swrite+0x1e>
 8005804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005808:	2302      	movs	r3, #2
 800580a:	2200      	movs	r2, #0
 800580c:	f000 f8d0 	bl	80059b0 <_lseek_r>
 8005810:	89a3      	ldrh	r3, [r4, #12]
 8005812:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005816:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800581a:	81a3      	strh	r3, [r4, #12]
 800581c:	4632      	mov	r2, r6
 800581e:	463b      	mov	r3, r7
 8005820:	4628      	mov	r0, r5
 8005822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005826:	f000 b8e7 	b.w	80059f8 <_write_r>

0800582a <__sseek>:
 800582a:	b510      	push	{r4, lr}
 800582c:	460c      	mov	r4, r1
 800582e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005832:	f000 f8bd 	bl	80059b0 <_lseek_r>
 8005836:	1c43      	adds	r3, r0, #1
 8005838:	89a3      	ldrh	r3, [r4, #12]
 800583a:	bf15      	itete	ne
 800583c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800583e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005842:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005846:	81a3      	strheq	r3, [r4, #12]
 8005848:	bf18      	it	ne
 800584a:	81a3      	strhne	r3, [r4, #12]
 800584c:	bd10      	pop	{r4, pc}

0800584e <__sclose>:
 800584e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005852:	f000 b89d 	b.w	8005990 <_close_r>

08005856 <__swbuf_r>:
 8005856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005858:	460e      	mov	r6, r1
 800585a:	4614      	mov	r4, r2
 800585c:	4605      	mov	r5, r0
 800585e:	b118      	cbz	r0, 8005868 <__swbuf_r+0x12>
 8005860:	6a03      	ldr	r3, [r0, #32]
 8005862:	b90b      	cbnz	r3, 8005868 <__swbuf_r+0x12>
 8005864:	f7ff ff20 	bl	80056a8 <__sinit>
 8005868:	69a3      	ldr	r3, [r4, #24]
 800586a:	60a3      	str	r3, [r4, #8]
 800586c:	89a3      	ldrh	r3, [r4, #12]
 800586e:	071a      	lsls	r2, r3, #28
 8005870:	d501      	bpl.n	8005876 <__swbuf_r+0x20>
 8005872:	6923      	ldr	r3, [r4, #16]
 8005874:	b943      	cbnz	r3, 8005888 <__swbuf_r+0x32>
 8005876:	4621      	mov	r1, r4
 8005878:	4628      	mov	r0, r5
 800587a:	f000 f82b 	bl	80058d4 <__swsetup_r>
 800587e:	b118      	cbz	r0, 8005888 <__swbuf_r+0x32>
 8005880:	f04f 37ff 	mov.w	r7, #4294967295
 8005884:	4638      	mov	r0, r7
 8005886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005888:	6823      	ldr	r3, [r4, #0]
 800588a:	6922      	ldr	r2, [r4, #16]
 800588c:	1a98      	subs	r0, r3, r2
 800588e:	6963      	ldr	r3, [r4, #20]
 8005890:	b2f6      	uxtb	r6, r6
 8005892:	4283      	cmp	r3, r0
 8005894:	4637      	mov	r7, r6
 8005896:	dc05      	bgt.n	80058a4 <__swbuf_r+0x4e>
 8005898:	4621      	mov	r1, r4
 800589a:	4628      	mov	r0, r5
 800589c:	f000 fa68 	bl	8005d70 <_fflush_r>
 80058a0:	2800      	cmp	r0, #0
 80058a2:	d1ed      	bne.n	8005880 <__swbuf_r+0x2a>
 80058a4:	68a3      	ldr	r3, [r4, #8]
 80058a6:	3b01      	subs	r3, #1
 80058a8:	60a3      	str	r3, [r4, #8]
 80058aa:	6823      	ldr	r3, [r4, #0]
 80058ac:	1c5a      	adds	r2, r3, #1
 80058ae:	6022      	str	r2, [r4, #0]
 80058b0:	701e      	strb	r6, [r3, #0]
 80058b2:	6962      	ldr	r2, [r4, #20]
 80058b4:	1c43      	adds	r3, r0, #1
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d004      	beq.n	80058c4 <__swbuf_r+0x6e>
 80058ba:	89a3      	ldrh	r3, [r4, #12]
 80058bc:	07db      	lsls	r3, r3, #31
 80058be:	d5e1      	bpl.n	8005884 <__swbuf_r+0x2e>
 80058c0:	2e0a      	cmp	r6, #10
 80058c2:	d1df      	bne.n	8005884 <__swbuf_r+0x2e>
 80058c4:	4621      	mov	r1, r4
 80058c6:	4628      	mov	r0, r5
 80058c8:	f000 fa52 	bl	8005d70 <_fflush_r>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	d0d9      	beq.n	8005884 <__swbuf_r+0x2e>
 80058d0:	e7d6      	b.n	8005880 <__swbuf_r+0x2a>
	...

080058d4 <__swsetup_r>:
 80058d4:	b538      	push	{r3, r4, r5, lr}
 80058d6:	4b29      	ldr	r3, [pc, #164]	@ (800597c <__swsetup_r+0xa8>)
 80058d8:	4605      	mov	r5, r0
 80058da:	6818      	ldr	r0, [r3, #0]
 80058dc:	460c      	mov	r4, r1
 80058de:	b118      	cbz	r0, 80058e8 <__swsetup_r+0x14>
 80058e0:	6a03      	ldr	r3, [r0, #32]
 80058e2:	b90b      	cbnz	r3, 80058e8 <__swsetup_r+0x14>
 80058e4:	f7ff fee0 	bl	80056a8 <__sinit>
 80058e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058ec:	0719      	lsls	r1, r3, #28
 80058ee:	d422      	bmi.n	8005936 <__swsetup_r+0x62>
 80058f0:	06da      	lsls	r2, r3, #27
 80058f2:	d407      	bmi.n	8005904 <__swsetup_r+0x30>
 80058f4:	2209      	movs	r2, #9
 80058f6:	602a      	str	r2, [r5, #0]
 80058f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058fc:	81a3      	strh	r3, [r4, #12]
 80058fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005902:	e033      	b.n	800596c <__swsetup_r+0x98>
 8005904:	0758      	lsls	r0, r3, #29
 8005906:	d512      	bpl.n	800592e <__swsetup_r+0x5a>
 8005908:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800590a:	b141      	cbz	r1, 800591e <__swsetup_r+0x4a>
 800590c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005910:	4299      	cmp	r1, r3
 8005912:	d002      	beq.n	800591a <__swsetup_r+0x46>
 8005914:	4628      	mov	r0, r5
 8005916:	f000 f8af 	bl	8005a78 <_free_r>
 800591a:	2300      	movs	r3, #0
 800591c:	6363      	str	r3, [r4, #52]	@ 0x34
 800591e:	89a3      	ldrh	r3, [r4, #12]
 8005920:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005924:	81a3      	strh	r3, [r4, #12]
 8005926:	2300      	movs	r3, #0
 8005928:	6063      	str	r3, [r4, #4]
 800592a:	6923      	ldr	r3, [r4, #16]
 800592c:	6023      	str	r3, [r4, #0]
 800592e:	89a3      	ldrh	r3, [r4, #12]
 8005930:	f043 0308 	orr.w	r3, r3, #8
 8005934:	81a3      	strh	r3, [r4, #12]
 8005936:	6923      	ldr	r3, [r4, #16]
 8005938:	b94b      	cbnz	r3, 800594e <__swsetup_r+0x7a>
 800593a:	89a3      	ldrh	r3, [r4, #12]
 800593c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005940:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005944:	d003      	beq.n	800594e <__swsetup_r+0x7a>
 8005946:	4621      	mov	r1, r4
 8005948:	4628      	mov	r0, r5
 800594a:	f000 fa5f 	bl	8005e0c <__smakebuf_r>
 800594e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005952:	f013 0201 	ands.w	r2, r3, #1
 8005956:	d00a      	beq.n	800596e <__swsetup_r+0x9a>
 8005958:	2200      	movs	r2, #0
 800595a:	60a2      	str	r2, [r4, #8]
 800595c:	6962      	ldr	r2, [r4, #20]
 800595e:	4252      	negs	r2, r2
 8005960:	61a2      	str	r2, [r4, #24]
 8005962:	6922      	ldr	r2, [r4, #16]
 8005964:	b942      	cbnz	r2, 8005978 <__swsetup_r+0xa4>
 8005966:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800596a:	d1c5      	bne.n	80058f8 <__swsetup_r+0x24>
 800596c:	bd38      	pop	{r3, r4, r5, pc}
 800596e:	0799      	lsls	r1, r3, #30
 8005970:	bf58      	it	pl
 8005972:	6962      	ldrpl	r2, [r4, #20]
 8005974:	60a2      	str	r2, [r4, #8]
 8005976:	e7f4      	b.n	8005962 <__swsetup_r+0x8e>
 8005978:	2000      	movs	r0, #0
 800597a:	e7f7      	b.n	800596c <__swsetup_r+0x98>
 800597c:	2000004c 	.word	0x2000004c

08005980 <memset>:
 8005980:	4402      	add	r2, r0
 8005982:	4603      	mov	r3, r0
 8005984:	4293      	cmp	r3, r2
 8005986:	d100      	bne.n	800598a <memset+0xa>
 8005988:	4770      	bx	lr
 800598a:	f803 1b01 	strb.w	r1, [r3], #1
 800598e:	e7f9      	b.n	8005984 <memset+0x4>

08005990 <_close_r>:
 8005990:	b538      	push	{r3, r4, r5, lr}
 8005992:	4d06      	ldr	r5, [pc, #24]	@ (80059ac <_close_r+0x1c>)
 8005994:	2300      	movs	r3, #0
 8005996:	4604      	mov	r4, r0
 8005998:	4608      	mov	r0, r1
 800599a:	602b      	str	r3, [r5, #0]
 800599c:	f7fb fb1d 	bl	8000fda <_close>
 80059a0:	1c43      	adds	r3, r0, #1
 80059a2:	d102      	bne.n	80059aa <_close_r+0x1a>
 80059a4:	682b      	ldr	r3, [r5, #0]
 80059a6:	b103      	cbz	r3, 80059aa <_close_r+0x1a>
 80059a8:	6023      	str	r3, [r4, #0]
 80059aa:	bd38      	pop	{r3, r4, r5, pc}
 80059ac:	2000070c 	.word	0x2000070c

080059b0 <_lseek_r>:
 80059b0:	b538      	push	{r3, r4, r5, lr}
 80059b2:	4d07      	ldr	r5, [pc, #28]	@ (80059d0 <_lseek_r+0x20>)
 80059b4:	4604      	mov	r4, r0
 80059b6:	4608      	mov	r0, r1
 80059b8:	4611      	mov	r1, r2
 80059ba:	2200      	movs	r2, #0
 80059bc:	602a      	str	r2, [r5, #0]
 80059be:	461a      	mov	r2, r3
 80059c0:	f7fb fb32 	bl	8001028 <_lseek>
 80059c4:	1c43      	adds	r3, r0, #1
 80059c6:	d102      	bne.n	80059ce <_lseek_r+0x1e>
 80059c8:	682b      	ldr	r3, [r5, #0]
 80059ca:	b103      	cbz	r3, 80059ce <_lseek_r+0x1e>
 80059cc:	6023      	str	r3, [r4, #0]
 80059ce:	bd38      	pop	{r3, r4, r5, pc}
 80059d0:	2000070c 	.word	0x2000070c

080059d4 <_read_r>:
 80059d4:	b538      	push	{r3, r4, r5, lr}
 80059d6:	4d07      	ldr	r5, [pc, #28]	@ (80059f4 <_read_r+0x20>)
 80059d8:	4604      	mov	r4, r0
 80059da:	4608      	mov	r0, r1
 80059dc:	4611      	mov	r1, r2
 80059de:	2200      	movs	r2, #0
 80059e0:	602a      	str	r2, [r5, #0]
 80059e2:	461a      	mov	r2, r3
 80059e4:	f7fb fadc 	bl	8000fa0 <_read>
 80059e8:	1c43      	adds	r3, r0, #1
 80059ea:	d102      	bne.n	80059f2 <_read_r+0x1e>
 80059ec:	682b      	ldr	r3, [r5, #0]
 80059ee:	b103      	cbz	r3, 80059f2 <_read_r+0x1e>
 80059f0:	6023      	str	r3, [r4, #0]
 80059f2:	bd38      	pop	{r3, r4, r5, pc}
 80059f4:	2000070c 	.word	0x2000070c

080059f8 <_write_r>:
 80059f8:	b538      	push	{r3, r4, r5, lr}
 80059fa:	4d07      	ldr	r5, [pc, #28]	@ (8005a18 <_write_r+0x20>)
 80059fc:	4604      	mov	r4, r0
 80059fe:	4608      	mov	r0, r1
 8005a00:	4611      	mov	r1, r2
 8005a02:	2200      	movs	r2, #0
 8005a04:	602a      	str	r2, [r5, #0]
 8005a06:	461a      	mov	r2, r3
 8005a08:	f7fa fe50 	bl	80006ac <_write>
 8005a0c:	1c43      	adds	r3, r0, #1
 8005a0e:	d102      	bne.n	8005a16 <_write_r+0x1e>
 8005a10:	682b      	ldr	r3, [r5, #0]
 8005a12:	b103      	cbz	r3, 8005a16 <_write_r+0x1e>
 8005a14:	6023      	str	r3, [r4, #0]
 8005a16:	bd38      	pop	{r3, r4, r5, pc}
 8005a18:	2000070c 	.word	0x2000070c

08005a1c <__errno>:
 8005a1c:	4b01      	ldr	r3, [pc, #4]	@ (8005a24 <__errno+0x8>)
 8005a1e:	6818      	ldr	r0, [r3, #0]
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	2000004c 	.word	0x2000004c

08005a28 <__libc_init_array>:
 8005a28:	b570      	push	{r4, r5, r6, lr}
 8005a2a:	4d0d      	ldr	r5, [pc, #52]	@ (8005a60 <__libc_init_array+0x38>)
 8005a2c:	4c0d      	ldr	r4, [pc, #52]	@ (8005a64 <__libc_init_array+0x3c>)
 8005a2e:	1b64      	subs	r4, r4, r5
 8005a30:	10a4      	asrs	r4, r4, #2
 8005a32:	2600      	movs	r6, #0
 8005a34:	42a6      	cmp	r6, r4
 8005a36:	d109      	bne.n	8005a4c <__libc_init_array+0x24>
 8005a38:	4d0b      	ldr	r5, [pc, #44]	@ (8005a68 <__libc_init_array+0x40>)
 8005a3a:	4c0c      	ldr	r4, [pc, #48]	@ (8005a6c <__libc_init_array+0x44>)
 8005a3c:	f000 fa54 	bl	8005ee8 <_init>
 8005a40:	1b64      	subs	r4, r4, r5
 8005a42:	10a4      	asrs	r4, r4, #2
 8005a44:	2600      	movs	r6, #0
 8005a46:	42a6      	cmp	r6, r4
 8005a48:	d105      	bne.n	8005a56 <__libc_init_array+0x2e>
 8005a4a:	bd70      	pop	{r4, r5, r6, pc}
 8005a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a50:	4798      	blx	r3
 8005a52:	3601      	adds	r6, #1
 8005a54:	e7ee      	b.n	8005a34 <__libc_init_array+0xc>
 8005a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a5a:	4798      	blx	r3
 8005a5c:	3601      	adds	r6, #1
 8005a5e:	e7f2      	b.n	8005a46 <__libc_init_array+0x1e>
 8005a60:	08007330 	.word	0x08007330
 8005a64:	08007330 	.word	0x08007330
 8005a68:	08007330 	.word	0x08007330
 8005a6c:	08007334 	.word	0x08007334

08005a70 <__retarget_lock_init_recursive>:
 8005a70:	4770      	bx	lr

08005a72 <__retarget_lock_acquire_recursive>:
 8005a72:	4770      	bx	lr

08005a74 <__retarget_lock_release_recursive>:
 8005a74:	4770      	bx	lr
	...

08005a78 <_free_r>:
 8005a78:	b538      	push	{r3, r4, r5, lr}
 8005a7a:	4605      	mov	r5, r0
 8005a7c:	2900      	cmp	r1, #0
 8005a7e:	d041      	beq.n	8005b04 <_free_r+0x8c>
 8005a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a84:	1f0c      	subs	r4, r1, #4
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	bfb8      	it	lt
 8005a8a:	18e4      	addlt	r4, r4, r3
 8005a8c:	f000 f8e0 	bl	8005c50 <__malloc_lock>
 8005a90:	4a1d      	ldr	r2, [pc, #116]	@ (8005b08 <_free_r+0x90>)
 8005a92:	6813      	ldr	r3, [r2, #0]
 8005a94:	b933      	cbnz	r3, 8005aa4 <_free_r+0x2c>
 8005a96:	6063      	str	r3, [r4, #4]
 8005a98:	6014      	str	r4, [r2, #0]
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005aa0:	f000 b8dc 	b.w	8005c5c <__malloc_unlock>
 8005aa4:	42a3      	cmp	r3, r4
 8005aa6:	d908      	bls.n	8005aba <_free_r+0x42>
 8005aa8:	6820      	ldr	r0, [r4, #0]
 8005aaa:	1821      	adds	r1, r4, r0
 8005aac:	428b      	cmp	r3, r1
 8005aae:	bf01      	itttt	eq
 8005ab0:	6819      	ldreq	r1, [r3, #0]
 8005ab2:	685b      	ldreq	r3, [r3, #4]
 8005ab4:	1809      	addeq	r1, r1, r0
 8005ab6:	6021      	streq	r1, [r4, #0]
 8005ab8:	e7ed      	b.n	8005a96 <_free_r+0x1e>
 8005aba:	461a      	mov	r2, r3
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	b10b      	cbz	r3, 8005ac4 <_free_r+0x4c>
 8005ac0:	42a3      	cmp	r3, r4
 8005ac2:	d9fa      	bls.n	8005aba <_free_r+0x42>
 8005ac4:	6811      	ldr	r1, [r2, #0]
 8005ac6:	1850      	adds	r0, r2, r1
 8005ac8:	42a0      	cmp	r0, r4
 8005aca:	d10b      	bne.n	8005ae4 <_free_r+0x6c>
 8005acc:	6820      	ldr	r0, [r4, #0]
 8005ace:	4401      	add	r1, r0
 8005ad0:	1850      	adds	r0, r2, r1
 8005ad2:	4283      	cmp	r3, r0
 8005ad4:	6011      	str	r1, [r2, #0]
 8005ad6:	d1e0      	bne.n	8005a9a <_free_r+0x22>
 8005ad8:	6818      	ldr	r0, [r3, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	6053      	str	r3, [r2, #4]
 8005ade:	4408      	add	r0, r1
 8005ae0:	6010      	str	r0, [r2, #0]
 8005ae2:	e7da      	b.n	8005a9a <_free_r+0x22>
 8005ae4:	d902      	bls.n	8005aec <_free_r+0x74>
 8005ae6:	230c      	movs	r3, #12
 8005ae8:	602b      	str	r3, [r5, #0]
 8005aea:	e7d6      	b.n	8005a9a <_free_r+0x22>
 8005aec:	6820      	ldr	r0, [r4, #0]
 8005aee:	1821      	adds	r1, r4, r0
 8005af0:	428b      	cmp	r3, r1
 8005af2:	bf04      	itt	eq
 8005af4:	6819      	ldreq	r1, [r3, #0]
 8005af6:	685b      	ldreq	r3, [r3, #4]
 8005af8:	6063      	str	r3, [r4, #4]
 8005afa:	bf04      	itt	eq
 8005afc:	1809      	addeq	r1, r1, r0
 8005afe:	6021      	streq	r1, [r4, #0]
 8005b00:	6054      	str	r4, [r2, #4]
 8005b02:	e7ca      	b.n	8005a9a <_free_r+0x22>
 8005b04:	bd38      	pop	{r3, r4, r5, pc}
 8005b06:	bf00      	nop
 8005b08:	20000718 	.word	0x20000718

08005b0c <sbrk_aligned>:
 8005b0c:	b570      	push	{r4, r5, r6, lr}
 8005b0e:	4e0f      	ldr	r6, [pc, #60]	@ (8005b4c <sbrk_aligned+0x40>)
 8005b10:	460c      	mov	r4, r1
 8005b12:	6831      	ldr	r1, [r6, #0]
 8005b14:	4605      	mov	r5, r0
 8005b16:	b911      	cbnz	r1, 8005b1e <sbrk_aligned+0x12>
 8005b18:	f000 f9d6 	bl	8005ec8 <_sbrk_r>
 8005b1c:	6030      	str	r0, [r6, #0]
 8005b1e:	4621      	mov	r1, r4
 8005b20:	4628      	mov	r0, r5
 8005b22:	f000 f9d1 	bl	8005ec8 <_sbrk_r>
 8005b26:	1c43      	adds	r3, r0, #1
 8005b28:	d103      	bne.n	8005b32 <sbrk_aligned+0x26>
 8005b2a:	f04f 34ff 	mov.w	r4, #4294967295
 8005b2e:	4620      	mov	r0, r4
 8005b30:	bd70      	pop	{r4, r5, r6, pc}
 8005b32:	1cc4      	adds	r4, r0, #3
 8005b34:	f024 0403 	bic.w	r4, r4, #3
 8005b38:	42a0      	cmp	r0, r4
 8005b3a:	d0f8      	beq.n	8005b2e <sbrk_aligned+0x22>
 8005b3c:	1a21      	subs	r1, r4, r0
 8005b3e:	4628      	mov	r0, r5
 8005b40:	f000 f9c2 	bl	8005ec8 <_sbrk_r>
 8005b44:	3001      	adds	r0, #1
 8005b46:	d1f2      	bne.n	8005b2e <sbrk_aligned+0x22>
 8005b48:	e7ef      	b.n	8005b2a <sbrk_aligned+0x1e>
 8005b4a:	bf00      	nop
 8005b4c:	20000714 	.word	0x20000714

08005b50 <_malloc_r>:
 8005b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b54:	1ccd      	adds	r5, r1, #3
 8005b56:	f025 0503 	bic.w	r5, r5, #3
 8005b5a:	3508      	adds	r5, #8
 8005b5c:	2d0c      	cmp	r5, #12
 8005b5e:	bf38      	it	cc
 8005b60:	250c      	movcc	r5, #12
 8005b62:	2d00      	cmp	r5, #0
 8005b64:	4606      	mov	r6, r0
 8005b66:	db01      	blt.n	8005b6c <_malloc_r+0x1c>
 8005b68:	42a9      	cmp	r1, r5
 8005b6a:	d904      	bls.n	8005b76 <_malloc_r+0x26>
 8005b6c:	230c      	movs	r3, #12
 8005b6e:	6033      	str	r3, [r6, #0]
 8005b70:	2000      	movs	r0, #0
 8005b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c4c <_malloc_r+0xfc>
 8005b7a:	f000 f869 	bl	8005c50 <__malloc_lock>
 8005b7e:	f8d8 3000 	ldr.w	r3, [r8]
 8005b82:	461c      	mov	r4, r3
 8005b84:	bb44      	cbnz	r4, 8005bd8 <_malloc_r+0x88>
 8005b86:	4629      	mov	r1, r5
 8005b88:	4630      	mov	r0, r6
 8005b8a:	f7ff ffbf 	bl	8005b0c <sbrk_aligned>
 8005b8e:	1c43      	adds	r3, r0, #1
 8005b90:	4604      	mov	r4, r0
 8005b92:	d158      	bne.n	8005c46 <_malloc_r+0xf6>
 8005b94:	f8d8 4000 	ldr.w	r4, [r8]
 8005b98:	4627      	mov	r7, r4
 8005b9a:	2f00      	cmp	r7, #0
 8005b9c:	d143      	bne.n	8005c26 <_malloc_r+0xd6>
 8005b9e:	2c00      	cmp	r4, #0
 8005ba0:	d04b      	beq.n	8005c3a <_malloc_r+0xea>
 8005ba2:	6823      	ldr	r3, [r4, #0]
 8005ba4:	4639      	mov	r1, r7
 8005ba6:	4630      	mov	r0, r6
 8005ba8:	eb04 0903 	add.w	r9, r4, r3
 8005bac:	f000 f98c 	bl	8005ec8 <_sbrk_r>
 8005bb0:	4581      	cmp	r9, r0
 8005bb2:	d142      	bne.n	8005c3a <_malloc_r+0xea>
 8005bb4:	6821      	ldr	r1, [r4, #0]
 8005bb6:	1a6d      	subs	r5, r5, r1
 8005bb8:	4629      	mov	r1, r5
 8005bba:	4630      	mov	r0, r6
 8005bbc:	f7ff ffa6 	bl	8005b0c <sbrk_aligned>
 8005bc0:	3001      	adds	r0, #1
 8005bc2:	d03a      	beq.n	8005c3a <_malloc_r+0xea>
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	442b      	add	r3, r5
 8005bc8:	6023      	str	r3, [r4, #0]
 8005bca:	f8d8 3000 	ldr.w	r3, [r8]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	bb62      	cbnz	r2, 8005c2c <_malloc_r+0xdc>
 8005bd2:	f8c8 7000 	str.w	r7, [r8]
 8005bd6:	e00f      	b.n	8005bf8 <_malloc_r+0xa8>
 8005bd8:	6822      	ldr	r2, [r4, #0]
 8005bda:	1b52      	subs	r2, r2, r5
 8005bdc:	d420      	bmi.n	8005c20 <_malloc_r+0xd0>
 8005bde:	2a0b      	cmp	r2, #11
 8005be0:	d917      	bls.n	8005c12 <_malloc_r+0xc2>
 8005be2:	1961      	adds	r1, r4, r5
 8005be4:	42a3      	cmp	r3, r4
 8005be6:	6025      	str	r5, [r4, #0]
 8005be8:	bf18      	it	ne
 8005bea:	6059      	strne	r1, [r3, #4]
 8005bec:	6863      	ldr	r3, [r4, #4]
 8005bee:	bf08      	it	eq
 8005bf0:	f8c8 1000 	streq.w	r1, [r8]
 8005bf4:	5162      	str	r2, [r4, r5]
 8005bf6:	604b      	str	r3, [r1, #4]
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	f000 f82f 	bl	8005c5c <__malloc_unlock>
 8005bfe:	f104 000b 	add.w	r0, r4, #11
 8005c02:	1d23      	adds	r3, r4, #4
 8005c04:	f020 0007 	bic.w	r0, r0, #7
 8005c08:	1ac2      	subs	r2, r0, r3
 8005c0a:	bf1c      	itt	ne
 8005c0c:	1a1b      	subne	r3, r3, r0
 8005c0e:	50a3      	strne	r3, [r4, r2]
 8005c10:	e7af      	b.n	8005b72 <_malloc_r+0x22>
 8005c12:	6862      	ldr	r2, [r4, #4]
 8005c14:	42a3      	cmp	r3, r4
 8005c16:	bf0c      	ite	eq
 8005c18:	f8c8 2000 	streq.w	r2, [r8]
 8005c1c:	605a      	strne	r2, [r3, #4]
 8005c1e:	e7eb      	b.n	8005bf8 <_malloc_r+0xa8>
 8005c20:	4623      	mov	r3, r4
 8005c22:	6864      	ldr	r4, [r4, #4]
 8005c24:	e7ae      	b.n	8005b84 <_malloc_r+0x34>
 8005c26:	463c      	mov	r4, r7
 8005c28:	687f      	ldr	r7, [r7, #4]
 8005c2a:	e7b6      	b.n	8005b9a <_malloc_r+0x4a>
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	42a3      	cmp	r3, r4
 8005c32:	d1fb      	bne.n	8005c2c <_malloc_r+0xdc>
 8005c34:	2300      	movs	r3, #0
 8005c36:	6053      	str	r3, [r2, #4]
 8005c38:	e7de      	b.n	8005bf8 <_malloc_r+0xa8>
 8005c3a:	230c      	movs	r3, #12
 8005c3c:	6033      	str	r3, [r6, #0]
 8005c3e:	4630      	mov	r0, r6
 8005c40:	f000 f80c 	bl	8005c5c <__malloc_unlock>
 8005c44:	e794      	b.n	8005b70 <_malloc_r+0x20>
 8005c46:	6005      	str	r5, [r0, #0]
 8005c48:	e7d6      	b.n	8005bf8 <_malloc_r+0xa8>
 8005c4a:	bf00      	nop
 8005c4c:	20000718 	.word	0x20000718

08005c50 <__malloc_lock>:
 8005c50:	4801      	ldr	r0, [pc, #4]	@ (8005c58 <__malloc_lock+0x8>)
 8005c52:	f7ff bf0e 	b.w	8005a72 <__retarget_lock_acquire_recursive>
 8005c56:	bf00      	nop
 8005c58:	20000710 	.word	0x20000710

08005c5c <__malloc_unlock>:
 8005c5c:	4801      	ldr	r0, [pc, #4]	@ (8005c64 <__malloc_unlock+0x8>)
 8005c5e:	f7ff bf09 	b.w	8005a74 <__retarget_lock_release_recursive>
 8005c62:	bf00      	nop
 8005c64:	20000710 	.word	0x20000710

08005c68 <__sflush_r>:
 8005c68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c70:	0716      	lsls	r6, r2, #28
 8005c72:	4605      	mov	r5, r0
 8005c74:	460c      	mov	r4, r1
 8005c76:	d454      	bmi.n	8005d22 <__sflush_r+0xba>
 8005c78:	684b      	ldr	r3, [r1, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	dc02      	bgt.n	8005c84 <__sflush_r+0x1c>
 8005c7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	dd48      	ble.n	8005d16 <__sflush_r+0xae>
 8005c84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c86:	2e00      	cmp	r6, #0
 8005c88:	d045      	beq.n	8005d16 <__sflush_r+0xae>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005c90:	682f      	ldr	r7, [r5, #0]
 8005c92:	6a21      	ldr	r1, [r4, #32]
 8005c94:	602b      	str	r3, [r5, #0]
 8005c96:	d030      	beq.n	8005cfa <__sflush_r+0x92>
 8005c98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005c9a:	89a3      	ldrh	r3, [r4, #12]
 8005c9c:	0759      	lsls	r1, r3, #29
 8005c9e:	d505      	bpl.n	8005cac <__sflush_r+0x44>
 8005ca0:	6863      	ldr	r3, [r4, #4]
 8005ca2:	1ad2      	subs	r2, r2, r3
 8005ca4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005ca6:	b10b      	cbz	r3, 8005cac <__sflush_r+0x44>
 8005ca8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005caa:	1ad2      	subs	r2, r2, r3
 8005cac:	2300      	movs	r3, #0
 8005cae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005cb0:	6a21      	ldr	r1, [r4, #32]
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	47b0      	blx	r6
 8005cb6:	1c43      	adds	r3, r0, #1
 8005cb8:	89a3      	ldrh	r3, [r4, #12]
 8005cba:	d106      	bne.n	8005cca <__sflush_r+0x62>
 8005cbc:	6829      	ldr	r1, [r5, #0]
 8005cbe:	291d      	cmp	r1, #29
 8005cc0:	d82b      	bhi.n	8005d1a <__sflush_r+0xb2>
 8005cc2:	4a2a      	ldr	r2, [pc, #168]	@ (8005d6c <__sflush_r+0x104>)
 8005cc4:	410a      	asrs	r2, r1
 8005cc6:	07d6      	lsls	r6, r2, #31
 8005cc8:	d427      	bmi.n	8005d1a <__sflush_r+0xb2>
 8005cca:	2200      	movs	r2, #0
 8005ccc:	6062      	str	r2, [r4, #4]
 8005cce:	04d9      	lsls	r1, r3, #19
 8005cd0:	6922      	ldr	r2, [r4, #16]
 8005cd2:	6022      	str	r2, [r4, #0]
 8005cd4:	d504      	bpl.n	8005ce0 <__sflush_r+0x78>
 8005cd6:	1c42      	adds	r2, r0, #1
 8005cd8:	d101      	bne.n	8005cde <__sflush_r+0x76>
 8005cda:	682b      	ldr	r3, [r5, #0]
 8005cdc:	b903      	cbnz	r3, 8005ce0 <__sflush_r+0x78>
 8005cde:	6560      	str	r0, [r4, #84]	@ 0x54
 8005ce0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ce2:	602f      	str	r7, [r5, #0]
 8005ce4:	b1b9      	cbz	r1, 8005d16 <__sflush_r+0xae>
 8005ce6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005cea:	4299      	cmp	r1, r3
 8005cec:	d002      	beq.n	8005cf4 <__sflush_r+0x8c>
 8005cee:	4628      	mov	r0, r5
 8005cf0:	f7ff fec2 	bl	8005a78 <_free_r>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	6363      	str	r3, [r4, #52]	@ 0x34
 8005cf8:	e00d      	b.n	8005d16 <__sflush_r+0xae>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	47b0      	blx	r6
 8005d00:	4602      	mov	r2, r0
 8005d02:	1c50      	adds	r0, r2, #1
 8005d04:	d1c9      	bne.n	8005c9a <__sflush_r+0x32>
 8005d06:	682b      	ldr	r3, [r5, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0c6      	beq.n	8005c9a <__sflush_r+0x32>
 8005d0c:	2b1d      	cmp	r3, #29
 8005d0e:	d001      	beq.n	8005d14 <__sflush_r+0xac>
 8005d10:	2b16      	cmp	r3, #22
 8005d12:	d11e      	bne.n	8005d52 <__sflush_r+0xea>
 8005d14:	602f      	str	r7, [r5, #0]
 8005d16:	2000      	movs	r0, #0
 8005d18:	e022      	b.n	8005d60 <__sflush_r+0xf8>
 8005d1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d1e:	b21b      	sxth	r3, r3
 8005d20:	e01b      	b.n	8005d5a <__sflush_r+0xf2>
 8005d22:	690f      	ldr	r7, [r1, #16]
 8005d24:	2f00      	cmp	r7, #0
 8005d26:	d0f6      	beq.n	8005d16 <__sflush_r+0xae>
 8005d28:	0793      	lsls	r3, r2, #30
 8005d2a:	680e      	ldr	r6, [r1, #0]
 8005d2c:	bf08      	it	eq
 8005d2e:	694b      	ldreq	r3, [r1, #20]
 8005d30:	600f      	str	r7, [r1, #0]
 8005d32:	bf18      	it	ne
 8005d34:	2300      	movne	r3, #0
 8005d36:	eba6 0807 	sub.w	r8, r6, r7
 8005d3a:	608b      	str	r3, [r1, #8]
 8005d3c:	f1b8 0f00 	cmp.w	r8, #0
 8005d40:	dde9      	ble.n	8005d16 <__sflush_r+0xae>
 8005d42:	6a21      	ldr	r1, [r4, #32]
 8005d44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005d46:	4643      	mov	r3, r8
 8005d48:	463a      	mov	r2, r7
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	47b0      	blx	r6
 8005d4e:	2800      	cmp	r0, #0
 8005d50:	dc08      	bgt.n	8005d64 <__sflush_r+0xfc>
 8005d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d5a:	81a3      	strh	r3, [r4, #12]
 8005d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d64:	4407      	add	r7, r0
 8005d66:	eba8 0800 	sub.w	r8, r8, r0
 8005d6a:	e7e7      	b.n	8005d3c <__sflush_r+0xd4>
 8005d6c:	dfbffffe 	.word	0xdfbffffe

08005d70 <_fflush_r>:
 8005d70:	b538      	push	{r3, r4, r5, lr}
 8005d72:	690b      	ldr	r3, [r1, #16]
 8005d74:	4605      	mov	r5, r0
 8005d76:	460c      	mov	r4, r1
 8005d78:	b913      	cbnz	r3, 8005d80 <_fflush_r+0x10>
 8005d7a:	2500      	movs	r5, #0
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	bd38      	pop	{r3, r4, r5, pc}
 8005d80:	b118      	cbz	r0, 8005d8a <_fflush_r+0x1a>
 8005d82:	6a03      	ldr	r3, [r0, #32]
 8005d84:	b90b      	cbnz	r3, 8005d8a <_fflush_r+0x1a>
 8005d86:	f7ff fc8f 	bl	80056a8 <__sinit>
 8005d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d0f3      	beq.n	8005d7a <_fflush_r+0xa>
 8005d92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005d94:	07d0      	lsls	r0, r2, #31
 8005d96:	d404      	bmi.n	8005da2 <_fflush_r+0x32>
 8005d98:	0599      	lsls	r1, r3, #22
 8005d9a:	d402      	bmi.n	8005da2 <_fflush_r+0x32>
 8005d9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d9e:	f7ff fe68 	bl	8005a72 <__retarget_lock_acquire_recursive>
 8005da2:	4628      	mov	r0, r5
 8005da4:	4621      	mov	r1, r4
 8005da6:	f7ff ff5f 	bl	8005c68 <__sflush_r>
 8005daa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005dac:	07da      	lsls	r2, r3, #31
 8005dae:	4605      	mov	r5, r0
 8005db0:	d4e4      	bmi.n	8005d7c <_fflush_r+0xc>
 8005db2:	89a3      	ldrh	r3, [r4, #12]
 8005db4:	059b      	lsls	r3, r3, #22
 8005db6:	d4e1      	bmi.n	8005d7c <_fflush_r+0xc>
 8005db8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dba:	f7ff fe5b 	bl	8005a74 <__retarget_lock_release_recursive>
 8005dbe:	e7dd      	b.n	8005d7c <_fflush_r+0xc>

08005dc0 <__swhatbuf_r>:
 8005dc0:	b570      	push	{r4, r5, r6, lr}
 8005dc2:	460c      	mov	r4, r1
 8005dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dc8:	2900      	cmp	r1, #0
 8005dca:	b096      	sub	sp, #88	@ 0x58
 8005dcc:	4615      	mov	r5, r2
 8005dce:	461e      	mov	r6, r3
 8005dd0:	da0d      	bge.n	8005dee <__swhatbuf_r+0x2e>
 8005dd2:	89a3      	ldrh	r3, [r4, #12]
 8005dd4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005dd8:	f04f 0100 	mov.w	r1, #0
 8005ddc:	bf14      	ite	ne
 8005dde:	2340      	movne	r3, #64	@ 0x40
 8005de0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005de4:	2000      	movs	r0, #0
 8005de6:	6031      	str	r1, [r6, #0]
 8005de8:	602b      	str	r3, [r5, #0]
 8005dea:	b016      	add	sp, #88	@ 0x58
 8005dec:	bd70      	pop	{r4, r5, r6, pc}
 8005dee:	466a      	mov	r2, sp
 8005df0:	f000 f848 	bl	8005e84 <_fstat_r>
 8005df4:	2800      	cmp	r0, #0
 8005df6:	dbec      	blt.n	8005dd2 <__swhatbuf_r+0x12>
 8005df8:	9901      	ldr	r1, [sp, #4]
 8005dfa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005dfe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005e02:	4259      	negs	r1, r3
 8005e04:	4159      	adcs	r1, r3
 8005e06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e0a:	e7eb      	b.n	8005de4 <__swhatbuf_r+0x24>

08005e0c <__smakebuf_r>:
 8005e0c:	898b      	ldrh	r3, [r1, #12]
 8005e0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e10:	079d      	lsls	r5, r3, #30
 8005e12:	4606      	mov	r6, r0
 8005e14:	460c      	mov	r4, r1
 8005e16:	d507      	bpl.n	8005e28 <__smakebuf_r+0x1c>
 8005e18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005e1c:	6023      	str	r3, [r4, #0]
 8005e1e:	6123      	str	r3, [r4, #16]
 8005e20:	2301      	movs	r3, #1
 8005e22:	6163      	str	r3, [r4, #20]
 8005e24:	b003      	add	sp, #12
 8005e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e28:	ab01      	add	r3, sp, #4
 8005e2a:	466a      	mov	r2, sp
 8005e2c:	f7ff ffc8 	bl	8005dc0 <__swhatbuf_r>
 8005e30:	9f00      	ldr	r7, [sp, #0]
 8005e32:	4605      	mov	r5, r0
 8005e34:	4639      	mov	r1, r7
 8005e36:	4630      	mov	r0, r6
 8005e38:	f7ff fe8a 	bl	8005b50 <_malloc_r>
 8005e3c:	b948      	cbnz	r0, 8005e52 <__smakebuf_r+0x46>
 8005e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e42:	059a      	lsls	r2, r3, #22
 8005e44:	d4ee      	bmi.n	8005e24 <__smakebuf_r+0x18>
 8005e46:	f023 0303 	bic.w	r3, r3, #3
 8005e4a:	f043 0302 	orr.w	r3, r3, #2
 8005e4e:	81a3      	strh	r3, [r4, #12]
 8005e50:	e7e2      	b.n	8005e18 <__smakebuf_r+0xc>
 8005e52:	89a3      	ldrh	r3, [r4, #12]
 8005e54:	6020      	str	r0, [r4, #0]
 8005e56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e5a:	81a3      	strh	r3, [r4, #12]
 8005e5c:	9b01      	ldr	r3, [sp, #4]
 8005e5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005e62:	b15b      	cbz	r3, 8005e7c <__smakebuf_r+0x70>
 8005e64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e68:	4630      	mov	r0, r6
 8005e6a:	f000 f81d 	bl	8005ea8 <_isatty_r>
 8005e6e:	b128      	cbz	r0, 8005e7c <__smakebuf_r+0x70>
 8005e70:	89a3      	ldrh	r3, [r4, #12]
 8005e72:	f023 0303 	bic.w	r3, r3, #3
 8005e76:	f043 0301 	orr.w	r3, r3, #1
 8005e7a:	81a3      	strh	r3, [r4, #12]
 8005e7c:	89a3      	ldrh	r3, [r4, #12]
 8005e7e:	431d      	orrs	r5, r3
 8005e80:	81a5      	strh	r5, [r4, #12]
 8005e82:	e7cf      	b.n	8005e24 <__smakebuf_r+0x18>

08005e84 <_fstat_r>:
 8005e84:	b538      	push	{r3, r4, r5, lr}
 8005e86:	4d07      	ldr	r5, [pc, #28]	@ (8005ea4 <_fstat_r+0x20>)
 8005e88:	2300      	movs	r3, #0
 8005e8a:	4604      	mov	r4, r0
 8005e8c:	4608      	mov	r0, r1
 8005e8e:	4611      	mov	r1, r2
 8005e90:	602b      	str	r3, [r5, #0]
 8005e92:	f7fb f8ae 	bl	8000ff2 <_fstat>
 8005e96:	1c43      	adds	r3, r0, #1
 8005e98:	d102      	bne.n	8005ea0 <_fstat_r+0x1c>
 8005e9a:	682b      	ldr	r3, [r5, #0]
 8005e9c:	b103      	cbz	r3, 8005ea0 <_fstat_r+0x1c>
 8005e9e:	6023      	str	r3, [r4, #0]
 8005ea0:	bd38      	pop	{r3, r4, r5, pc}
 8005ea2:	bf00      	nop
 8005ea4:	2000070c 	.word	0x2000070c

08005ea8 <_isatty_r>:
 8005ea8:	b538      	push	{r3, r4, r5, lr}
 8005eaa:	4d06      	ldr	r5, [pc, #24]	@ (8005ec4 <_isatty_r+0x1c>)
 8005eac:	2300      	movs	r3, #0
 8005eae:	4604      	mov	r4, r0
 8005eb0:	4608      	mov	r0, r1
 8005eb2:	602b      	str	r3, [r5, #0]
 8005eb4:	f7fb f8ad 	bl	8001012 <_isatty>
 8005eb8:	1c43      	adds	r3, r0, #1
 8005eba:	d102      	bne.n	8005ec2 <_isatty_r+0x1a>
 8005ebc:	682b      	ldr	r3, [r5, #0]
 8005ebe:	b103      	cbz	r3, 8005ec2 <_isatty_r+0x1a>
 8005ec0:	6023      	str	r3, [r4, #0]
 8005ec2:	bd38      	pop	{r3, r4, r5, pc}
 8005ec4:	2000070c 	.word	0x2000070c

08005ec8 <_sbrk_r>:
 8005ec8:	b538      	push	{r3, r4, r5, lr}
 8005eca:	4d06      	ldr	r5, [pc, #24]	@ (8005ee4 <_sbrk_r+0x1c>)
 8005ecc:	2300      	movs	r3, #0
 8005ece:	4604      	mov	r4, r0
 8005ed0:	4608      	mov	r0, r1
 8005ed2:	602b      	str	r3, [r5, #0]
 8005ed4:	f7fb f8b6 	bl	8001044 <_sbrk>
 8005ed8:	1c43      	adds	r3, r0, #1
 8005eda:	d102      	bne.n	8005ee2 <_sbrk_r+0x1a>
 8005edc:	682b      	ldr	r3, [r5, #0]
 8005ede:	b103      	cbz	r3, 8005ee2 <_sbrk_r+0x1a>
 8005ee0:	6023      	str	r3, [r4, #0]
 8005ee2:	bd38      	pop	{r3, r4, r5, pc}
 8005ee4:	2000070c 	.word	0x2000070c

08005ee8 <_init>:
 8005ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eea:	bf00      	nop
 8005eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eee:	bc08      	pop	{r3}
 8005ef0:	469e      	mov	lr, r3
 8005ef2:	4770      	bx	lr

08005ef4 <_fini>:
 8005ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ef6:	bf00      	nop
 8005ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005efa:	bc08      	pop	{r3}
 8005efc:	469e      	mov	lr, r3
 8005efe:	4770      	bx	lr
