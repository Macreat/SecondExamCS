
SecondExamSource.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a68  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001544  08006bf8  08006bf8  00007bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800813c  0800813c  0000a0a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800813c  0800813c  0000913c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008144  08008144  0000a0a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008144  08008144  00009144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008148  08008148  00009148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  0800814c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000684  200000a0  080081ec  0000a0a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000724  080081ec  0000a724  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a29  00000000  00000000  0000a0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b2b  00000000  00000000  0001baf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  0001e628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ba1  00000000  00000000  0001f558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d51  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001413f  00000000  00000000  00047e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000edb30  00000000  00000000  0005bf89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00149ab9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004704  00000000  00000000  00149afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0014e200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006be0 	.word	0x08006be0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	08006be0 	.word	0x08006be0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <keypad_debounce>:

#include "main.h"


static uint8_t keypad_debounce(uint16_t GPIO_Pin)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	80fb      	strh	r3, [r7, #6]
	 */
	//just managemente for DEBOUNCE delay
	static uint16_t last_pressed = 0xFFFF;
	static uint32_t last_tick = 0;

	if (last_pressed == GPIO_Pin) {
 800056a:	4b0e      	ldr	r3, [pc, #56]	@ (80005a4 <keypad_debounce+0x44>)
 800056c:	881b      	ldrh	r3, [r3, #0]
 800056e:	88fa      	ldrh	r2, [r7, #6]
 8000570:	429a      	cmp	r2, r3
 8000572:	d109      	bne.n	8000588 <keypad_debounce+0x28>
		if (HAL_GetTick() < (last_tick + 200)) {
 8000574:	f001 f80c 	bl	8001590 <HAL_GetTick>
 8000578:	4602      	mov	r2, r0
 800057a:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <keypad_debounce+0x48>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	33c8      	adds	r3, #200	@ 0xc8
 8000580:	429a      	cmp	r2, r3
 8000582:	d201      	bcs.n	8000588 <keypad_debounce+0x28>
			return 0;
 8000584:	2300      	movs	r3, #0
 8000586:	e008      	b.n	800059a <keypad_debounce+0x3a>
		}
	}
	last_pressed = GPIO_Pin;
 8000588:	4a06      	ldr	r2, [pc, #24]	@ (80005a4 <keypad_debounce+0x44>)
 800058a:	88fb      	ldrh	r3, [r7, #6]
 800058c:	8013      	strh	r3, [r2, #0]
	last_tick = HAL_GetTick();
 800058e:	f000 ffff 	bl	8001590 <HAL_GetTick>
 8000592:	4603      	mov	r3, r0
 8000594:	4a04      	ldr	r2, [pc, #16]	@ (80005a8 <keypad_debounce+0x48>)
 8000596:	6013      	str	r3, [r2, #0]

	return 1;
 8000598:	2301      	movs	r3, #1
}
 800059a:	4618      	mov	r0, r3
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000010 	.word	0x20000010
 80005a8:	200000bc 	.word	0x200000bc

080005ac <keypad_scan_row>:
If a key press is detected, the function returns the row number where the key was pressed.
 *
 *
 */
uint8_t keypad_scan_row(GPIO_TypeDef *COLx_GPIO_Port, uint16_t COLx_Pin)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	807b      	strh	r3, [r7, #2]
	uint8_t row_pressed = 0xFF;
 80005b8:	23ff      	movs	r3, #255	@ 0xff
 80005ba:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2180      	movs	r1, #128	@ 0x80
 80005c0:	4830      	ldr	r0, [pc, #192]	@ (8000684 <keypad_scan_row+0xd8>)
 80005c2:	f001 fb67 	bl	8001c94 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLx_GPIO_Port, COLx_Pin) == 0) {
 80005c6:	887b      	ldrh	r3, [r7, #2]
 80005c8:	4619      	mov	r1, r3
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f001 fb4a 	bl	8001c64 <HAL_GPIO_ReadPin>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d102      	bne.n	80005dc <keypad_scan_row+0x30>
		row_pressed =  1;
 80005d6:	2301      	movs	r3, #1
 80005d8:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 80005da:	e035      	b.n	8000648 <keypad_scan_row+0x9c>
	}
	HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, GPIO_PIN_RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e6:	f001 fb55 	bl	8001c94 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLx_GPIO_Port, COLx_Pin) == 0) {
 80005ea:	887b      	ldrh	r3, [r7, #2]
 80005ec:	4619      	mov	r1, r3
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f001 fb38 	bl	8001c64 <HAL_GPIO_ReadPin>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d102      	bne.n	8000600 <keypad_scan_row+0x54>
		row_pressed =  2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 80005fe:	e023      	b.n	8000648 <keypad_scan_row+0x9c>
	}
	HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000606:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800060a:	f001 fb43 	bl	8001c94 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLx_GPIO_Port, COLx_Pin) == 0) {
 800060e:	887b      	ldrh	r3, [r7, #2]
 8000610:	4619      	mov	r1, r3
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f001 fb26 	bl	8001c64 <HAL_GPIO_ReadPin>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d102      	bne.n	8000624 <keypad_scan_row+0x78>
		row_pressed =  3;
 800061e:	2303      	movs	r3, #3
 8000620:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 8000622:	e011      	b.n	8000648 <keypad_scan_row+0x9c>
	}
	HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800062a:	4817      	ldr	r0, [pc, #92]	@ (8000688 <keypad_scan_row+0xdc>)
 800062c:	f001 fb32 	bl	8001c94 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLx_GPIO_Port, COLx_Pin) == 0) {
 8000630:	887b      	ldrh	r3, [r7, #2]
 8000632:	4619      	mov	r1, r3
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f001 fb15 	bl	8001c64 <HAL_GPIO_ReadPin>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d102      	bne.n	8000646 <keypad_scan_row+0x9a>
		row_pressed =  4;
 8000640:	2304      	movs	r3, #4
 8000642:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 8000644:	e000      	b.n	8000648 <keypad_scan_row+0x9c>
	}
row_scan_end:
 8000646:	bf00      	nop
	HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, GPIO_PIN_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	2180      	movs	r1, #128	@ 0x80
 800064c:	480d      	ldr	r0, [pc, #52]	@ (8000684 <keypad_scan_row+0xd8>)
 800064e:	f001 fb21 	bl	8001c94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, GPIO_PIN_SET);
 8000652:	2201      	movs	r2, #1
 8000654:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000658:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800065c:	f001 fb1a 	bl	8001c94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000666:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800066a:	f001 fb13 	bl	8001c94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000674:	4804      	ldr	r0, [pc, #16]	@ (8000688 <keypad_scan_row+0xdc>)
 8000676:	f001 fb0d 	bl	8001c94 <HAL_GPIO_WritePin>
	return row_pressed; // not detected
 800067a:	7bfb      	ldrb	r3, [r7, #15]
}
 800067c:	4618      	mov	r0, r3
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	48000800 	.word	0x48000800
 8000688:	48000400 	.word	0x48000400

0800068c <keypad_scan>:
 *
 *
 *
 */
uint8_t keypad_scan(uint16_t GPIO_Pin)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	80fb      	strh	r3, [r7, #6]
	uint8_t key_pressed = 0xFF;
 8000696:	23ff      	movs	r3, #255	@ 0xff
 8000698:	73fb      	strb	r3, [r7, #15]

	if (keypad_debounce(GPIO_Pin) == 0) { // to ensure the press is valid,
 800069a:	88fb      	ldrh	r3, [r7, #6]
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff ff5f 	bl	8000560 <keypad_debounce>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d101      	bne.n	80006ac <keypad_scan+0x20>
		return key_pressed;
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	e04b      	b.n	8000744 <keypad_scan+0xb8>
	}
	uint8_t row = 0xFF;
 80006ac:	23ff      	movs	r3, #255	@ 0xff
 80006ae:	73bb      	strb	r3, [r7, #14]
	switch (GPIO_Pin) {
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006b6:	d033      	beq.n	8000720 <keypad_scan+0x94>
 80006b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006bc:	dc40      	bgt.n	8000740 <keypad_scan+0xb4>
 80006be:	2b20      	cmp	r3, #32
 80006c0:	d012      	beq.n	80006e8 <keypad_scan+0x5c>
 80006c2:	2b20      	cmp	r3, #32
 80006c4:	dc3c      	bgt.n	8000740 <keypad_scan+0xb4>
 80006c6:	2b08      	cmp	r3, #8
 80006c8:	d01c      	beq.n	8000704 <keypad_scan+0x78>
 80006ca:	2b10      	cmp	r3, #16
 80006cc:	d138      	bne.n	8000740 <keypad_scan+0xb4>
	case COL_1_Pin:
		row = keypad_scan_row(COL_1_GPIO_Port, COL_1_Pin);
 80006ce:	2110      	movs	r1, #16
 80006d0:	481e      	ldr	r0, [pc, #120]	@ (800074c <keypad_scan+0xc0>)
 80006d2:	f7ff ff6b 	bl	80005ac <keypad_scan_row>
 80006d6:	4603      	mov	r3, r0
 80006d8:	73bb      	strb	r3, [r7, #14]
		key_pressed = keypad_chars[row - 1][1 - 1];
 80006da:	7bbb      	ldrb	r3, [r7, #14]
 80006dc:	3b01      	subs	r3, #1
 80006de:	4a1c      	ldr	r2, [pc, #112]	@ (8000750 <keypad_scan+0xc4>)
 80006e0:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80006e4:	73fb      	strb	r3, [r7, #15]
		break;
 80006e6:	e02c      	b.n	8000742 <keypad_scan+0xb6>

	case COL_2_Pin:
		row = keypad_scan_row(COL_2_GPIO_Port, COL_2_Pin);
 80006e8:	2120      	movs	r1, #32
 80006ea:	4818      	ldr	r0, [pc, #96]	@ (800074c <keypad_scan+0xc0>)
 80006ec:	f7ff ff5e 	bl	80005ac <keypad_scan_row>
 80006f0:	4603      	mov	r3, r0
 80006f2:	73bb      	strb	r3, [r7, #14]
		key_pressed = keypad_chars[row - 1][2 - 1];
 80006f4:	7bbb      	ldrb	r3, [r7, #14]
 80006f6:	3b01      	subs	r3, #1
 80006f8:	4a15      	ldr	r2, [pc, #84]	@ (8000750 <keypad_scan+0xc4>)
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	4413      	add	r3, r2
 80006fe:	785b      	ldrb	r3, [r3, #1]
 8000700:	73fb      	strb	r3, [r7, #15]
		break;
 8000702:	e01e      	b.n	8000742 <keypad_scan+0xb6>

	case COL_3_Pin:
			row = keypad_scan_row(COL_3_GPIO_Port, COL_3_Pin);
 8000704:	2108      	movs	r1, #8
 8000706:	4811      	ldr	r0, [pc, #68]	@ (800074c <keypad_scan+0xc0>)
 8000708:	f7ff ff50 	bl	80005ac <keypad_scan_row>
 800070c:	4603      	mov	r3, r0
 800070e:	73bb      	strb	r3, [r7, #14]
			key_pressed = keypad_chars[row - 1][3 - 1];
 8000710:	7bbb      	ldrb	r3, [r7, #14]
 8000712:	3b01      	subs	r3, #1
 8000714:	4a0e      	ldr	r2, [pc, #56]	@ (8000750 <keypad_scan+0xc4>)
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	4413      	add	r3, r2
 800071a:	789b      	ldrb	r3, [r3, #2]
 800071c:	73fb      	strb	r3, [r7, #15]
			break;
 800071e:	e010      	b.n	8000742 <keypad_scan+0xb6>

	case COL_4_Pin:
			row = keypad_scan_row(COL_4_GPIO_Port, COL_4_Pin);
 8000720:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000724:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000728:	f7ff ff40 	bl	80005ac <keypad_scan_row>
 800072c:	4603      	mov	r3, r0
 800072e:	73bb      	strb	r3, [r7, #14]
			key_pressed = keypad_chars[row - 1][4 - 1];
 8000730:	7bbb      	ldrb	r3, [r7, #14]
 8000732:	3b01      	subs	r3, #1
 8000734:	4a06      	ldr	r2, [pc, #24]	@ (8000750 <keypad_scan+0xc4>)
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	4413      	add	r3, r2
 800073a:	78db      	ldrb	r3, [r3, #3]
 800073c:	73fb      	strb	r3, [r7, #15]
			break;
 800073e:	e000      	b.n	8000742 <keypad_scan+0xb6>
	default:
		break;
 8000740:	bf00      	nop
	}
	return key_pressed;
 8000742:	7bfb      	ldrb	r3, [r7, #15]
}
 8000744:	4618      	mov	r0, r3
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	48000400 	.word	0x48000400
 8000750:	20000000 	.word	0x20000000

08000754 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// weak function to transmit via UART
int _write(int file, char *ptr, int len)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	b29a      	uxth	r2, r3
 8000764:	230a      	movs	r3, #10
 8000766:	68b9      	ldr	r1, [r7, #8]
 8000768:	4803      	ldr	r0, [pc, #12]	@ (8000778 <_write+0x24>)
 800076a:	f003 fb01 	bl	8003d70 <HAL_UART_Transmit>
  return len;
 800076e:	687b      	ldr	r3, [r7, #4]
}
 8000770:	4618      	mov	r0, r3
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000114 	.word	0x20000114

0800077c <HAL_UART_RxCpltCallback>:

// implementing reception callback for USART entrys
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* Data received in USART2 */
  if (huart->Instance == USART2)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a1e      	ldr	r2, [pc, #120]	@ (8000804 <HAL_UART_RxCpltCallback+0x88>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d136      	bne.n	80007fc <HAL_UART_RxCpltCallback+0x80>
  {
    // selecting of arithmetic operation (2COND REQUIREMENT)
    if (usart2_data == '+' || usart2_data == '-' || usart2_data == '*' || usart2_data == '/')
 800078e:	4b1e      	ldr	r3, [pc, #120]	@ (8000808 <HAL_UART_RxCpltCallback+0x8c>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b2b      	cmp	r3, #43	@ 0x2b
 8000794:	d00b      	beq.n	80007ae <HAL_UART_RxCpltCallback+0x32>
 8000796:	4b1c      	ldr	r3, [pc, #112]	@ (8000808 <HAL_UART_RxCpltCallback+0x8c>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b2d      	cmp	r3, #45	@ 0x2d
 800079c:	d007      	beq.n	80007ae <HAL_UART_RxCpltCallback+0x32>
 800079e:	4b1a      	ldr	r3, [pc, #104]	@ (8000808 <HAL_UART_RxCpltCallback+0x8c>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80007a4:	d003      	beq.n	80007ae <HAL_UART_RxCpltCallback+0x32>
 80007a6:	4b18      	ldr	r3, [pc, #96]	@ (8000808 <HAL_UART_RxCpltCallback+0x8c>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b2f      	cmp	r3, #47	@ 0x2f
 80007ac:	d11a      	bne.n	80007e4 <HAL_UART_RxCpltCallback+0x68>
    {
      ring_buffer_write(&usart2_rb, usart2_data);
 80007ae:	4b16      	ldr	r3, [pc, #88]	@ (8000808 <HAL_UART_RxCpltCallback+0x8c>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	4619      	mov	r1, r3
 80007b4:	4815      	ldr	r0, [pc, #84]	@ (800080c <HAL_UART_RxCpltCallback+0x90>)
 80007b6:	f000 fc06 	bl	8000fc6 <ring_buffer_write>
      if (ring_buffer_is_full(&usart2_rb) != 0)
 80007ba:	4814      	ldr	r0, [pc, #80]	@ (800080c <HAL_UART_RxCpltCallback+0x90>)
 80007bc:	f000 fbdf 	bl	8000f7e <ring_buffer_is_full>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d006      	beq.n	80007d4 <HAL_UART_RxCpltCallback+0x58>
      {
        // Transmit "receiving data" message via USART2
        HAL_UART_Transmit(&huart2, (uint8_t *)"Operator received. Press '=' to calculate.\r\n", 46, HAL_MAX_DELAY);
 80007c6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ca:	222e      	movs	r2, #46	@ 0x2e
 80007cc:	4910      	ldr	r1, [pc, #64]	@ (8000810 <HAL_UART_RxCpltCallback+0x94>)
 80007ce:	4811      	ldr	r0, [pc, #68]	@ (8000814 <HAL_UART_RxCpltCallback+0x98>)
 80007d0:	f003 face 	bl	8003d70 <HAL_UART_Transmit>
      }
      HAL_UART_Transmit(&huart2, (uint8_t *)" data received from UART \r\n", 25, HAL_MAX_DELAY);
 80007d4:	f04f 33ff 	mov.w	r3, #4294967295
 80007d8:	2219      	movs	r2, #25
 80007da:	490f      	ldr	r1, [pc, #60]	@ (8000818 <HAL_UART_RxCpltCallback+0x9c>)
 80007dc:	480d      	ldr	r0, [pc, #52]	@ (8000814 <HAL_UART_RxCpltCallback+0x98>)
 80007de:	f003 fac7 	bl	8003d70 <HAL_UART_Transmit>
 80007e2:	e006      	b.n	80007f2 <HAL_UART_RxCpltCallback+0x76>
    }
    else if (usart2_data == '=') // validate when user press ==
 80007e4:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <HAL_UART_RxCpltCallback+0x8c>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b3d      	cmp	r3, #61	@ 0x3d
 80007ea:	d102      	bne.n	80007f2 <HAL_UART_RxCpltCallback+0x76>
    {
      operation_flag = 1;
 80007ec:	4b0b      	ldr	r3, [pc, #44]	@ (800081c <HAL_UART_RxCpltCallback+0xa0>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart2, &usart2_data, 1);
 80007f2:	2201      	movs	r2, #1
 80007f4:	4904      	ldr	r1, [pc, #16]	@ (8000808 <HAL_UART_RxCpltCallback+0x8c>)
 80007f6:	4807      	ldr	r0, [pc, #28]	@ (8000814 <HAL_UART_RxCpltCallback+0x98>)
 80007f8:	f003 fb44 	bl	8003e84 <HAL_UART_Receive_IT>
  }
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40004400 	.word	0x40004400
 8000808:	20000014 	.word	0x20000014
 800080c:	200001b8 	.word	0x200001b8
 8000810:	08006bf8 	.word	0x08006bf8
 8000814:	20000114 	.word	0x20000114
 8000818:	08006c28 	.word	0x08006c28
 800081c:	200001c0 	.word	0x200001c0

08000820 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	80fb      	strh	r3, [r7, #6]

  uint8_t key_pressed = keypad_scan(GPIO_Pin);
 800082a:	88fb      	ldrh	r3, [r7, #6]
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ff2d 	bl	800068c <keypad_scan>
 8000832:	4603      	mov	r3, r0
 8000834:	73fb      	strb	r3, [r7, #15]
  if (key_pressed != 0xFF)
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	2bff      	cmp	r3, #255	@ 0xff
 800083a:	d039      	beq.n	80008b0 <HAL_GPIO_EXTI_Callback+0x90>
  {
    if (key_pressed == '#')
 800083c:	7bfb      	ldrb	r3, [r7, #15]
 800083e:	2b23      	cmp	r3, #35	@ 0x23
 8000840:	d10f      	bne.n	8000862 <HAL_GPIO_EXTI_Callback+0x42>
    {
      ring_buffer_reset(&keypad_rb);
 8000842:	481d      	ldr	r0, [pc, #116]	@ (80008b8 <HAL_GPIO_EXTI_Callback+0x98>)
 8000844:	f000 fb88 	bl	8000f58 <ring_buffer_reset>
      ring_buffer_reset(&keypad1_rb);
 8000848:	481c      	ldr	r0, [pc, #112]	@ (80008bc <HAL_GPIO_EXTI_Callback+0x9c>)
 800084a:	f000 fb85 	bl	8000f58 <ring_buffer_reset>
      ring_buffer_reset(&usart2_rb);
 800084e:	481c      	ldr	r0, [pc, #112]	@ (80008c0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000850:	f000 fb82 	bl	8000f58 <ring_buffer_reset>
      printf("buffers reseted \r\n");
 8000854:	481b      	ldr	r0, [pc, #108]	@ (80008c4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000856:	f005 f989 	bl	8005b6c <puts>
      ssd1306_Fill(Black);
 800085a:	2000      	movs	r0, #0
 800085c:	f004 fec8 	bl	80055f0 <ssd1306_Fill>
      {
        printf("both buffers full, do some operation or press '=' if youre already did it\r\n"); // if ring buffer is full, continue with the second buffer
      }
    }
  }
}
 8000860:	e026      	b.n	80008b0 <HAL_GPIO_EXTI_Callback+0x90>
    else if (key_pressed >= '0' && key_pressed <= '9' ) // validation of numbers on HEXA keyboard
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	2b2f      	cmp	r3, #47	@ 0x2f
 8000866:	d923      	bls.n	80008b0 <HAL_GPIO_EXTI_Callback+0x90>
 8000868:	7bfb      	ldrb	r3, [r7, #15]
 800086a:	2b39      	cmp	r3, #57	@ 0x39
 800086c:	d820      	bhi.n	80008b0 <HAL_GPIO_EXTI_Callback+0x90>
      if (ring_buffer_is_full(&keypad_rb) == 0)
 800086e:	4812      	ldr	r0, [pc, #72]	@ (80008b8 <HAL_GPIO_EXTI_Callback+0x98>)
 8000870:	f000 fb85 	bl	8000f7e <ring_buffer_is_full>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d108      	bne.n	800088c <HAL_GPIO_EXTI_Callback+0x6c>
        ring_buffer_write(&keypad_rb, key_pressed);
 800087a:	7bfb      	ldrb	r3, [r7, #15]
 800087c:	4619      	mov	r1, r3
 800087e:	480e      	ldr	r0, [pc, #56]	@ (80008b8 <HAL_GPIO_EXTI_Callback+0x98>)
 8000880:	f000 fba1 	bl	8000fc6 <ring_buffer_write>
        keypad_data = key_pressed;
 8000884:	4a10      	ldr	r2, [pc, #64]	@ (80008c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000886:	7bfb      	ldrb	r3, [r7, #15]
 8000888:	7013      	strb	r3, [r2, #0]
}
 800088a:	e011      	b.n	80008b0 <HAL_GPIO_EXTI_Callback+0x90>
      else if (ring_buffer_is_full(&keypad1_rb) == 0)
 800088c:	480b      	ldr	r0, [pc, #44]	@ (80008bc <HAL_GPIO_EXTI_Callback+0x9c>)
 800088e:	f000 fb76 	bl	8000f7e <ring_buffer_is_full>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d108      	bne.n	80008aa <HAL_GPIO_EXTI_Callback+0x8a>
        ring_buffer_write(&keypad1_rb, key_pressed);
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	4619      	mov	r1, r3
 800089c:	4807      	ldr	r0, [pc, #28]	@ (80008bc <HAL_GPIO_EXTI_Callback+0x9c>)
 800089e:	f000 fb92 	bl	8000fc6 <ring_buffer_write>
        keypad_data1 = key_pressed;
 80008a2:	4a0a      	ldr	r2, [pc, #40]	@ (80008cc <HAL_GPIO_EXTI_Callback+0xac>)
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	7013      	strb	r3, [r2, #0]
}
 80008a8:	e002      	b.n	80008b0 <HAL_GPIO_EXTI_Callback+0x90>
        printf("both buffers full, do some operation or press '=' if youre already did it\r\n"); // if ring buffer is full, continue with the second buffer
 80008aa:	4809      	ldr	r0, [pc, #36]	@ (80008d0 <HAL_GPIO_EXTI_Callback+0xb0>)
 80008ac:	f005 f95e 	bl	8005b6c <puts>
}
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200001a0 	.word	0x200001a0
 80008bc:	200001ac 	.word	0x200001ac
 80008c0:	200001b8 	.word	0x200001b8
 80008c4:	08006c44 	.word	0x08006c44
 80008c8:	20000012 	.word	0x20000012
 80008cc:	20000013 	.word	0x20000013
 80008d0:	08006c58 	.word	0x08006c58

080008d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b092      	sub	sp, #72	@ 0x48
 80008d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008da:	f000 fde9 	bl	80014b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008de:	f000 f98b 	bl	8000bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e2:	f000 fa4b 	bl	8000d7c <MX_GPIO_Init>
  MX_I2C1_Init();
 80008e6:	f000 f9d9 	bl	8000c9c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80008ea:	f000 fa17 	bl	8000d1c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80008ee:	f004 fe15 	bl	800551c <ssd1306_Init>
  ssd1306_Fill(Black);
 80008f2:	2000      	movs	r0, #0
 80008f4:	f004 fe7c 	bl	80055f0 <ssd1306_Fill>
  HAL_UART_Transmit(&huart2, HB, sizeof(HB) - 1, 100);
 80008f8:	2364      	movs	r3, #100	@ 0x64
 80008fa:	221f      	movs	r2, #31
 80008fc:	49a7      	ldr	r1, [pc, #668]	@ (8000b9c <main+0x2c8>)
 80008fe:	48a8      	ldr	r0, [pc, #672]	@ (8000ba0 <main+0x2cc>)
 8000900:	f003 fa36 	bl	8003d70 <HAL_UART_Transmit>

  ssd1306_WriteString(" ARITHMETIC software...\r\n", Font_6x8, White);
 8000904:	4ba7      	ldr	r3, [pc, #668]	@ (8000ba4 <main+0x2d0>)
 8000906:	2201      	movs	r2, #1
 8000908:	9200      	str	r2, [sp, #0]
 800090a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800090c:	48a6      	ldr	r0, [pc, #664]	@ (8000ba8 <main+0x2d4>)
 800090e:	f004 ff93 	bl	8005838 <ssd1306_WriteString>

  ssd1306_UpdateScreen();
 8000912:	f004 fe85 	bl	8005620 <ssd1306_UpdateScreen>

  //initializing all respectives periphericals

  ring_buffer_init(&usart2_rb, usart2_buffer, USART2_RB_LEN);
 8000916:	2201      	movs	r2, #1
 8000918:	49a4      	ldr	r1, [pc, #656]	@ (8000bac <main+0x2d8>)
 800091a:	48a5      	ldr	r0, [pc, #660]	@ (8000bb0 <main+0x2dc>)
 800091c:	f000 fb08 	bl	8000f30 <ring_buffer_init>
  ring_buffer_init(&keypad_rb, keypad_buffer, KEYPAD_RB_LEN);
 8000920:	2203      	movs	r2, #3
 8000922:	49a4      	ldr	r1, [pc, #656]	@ (8000bb4 <main+0x2e0>)
 8000924:	48a4      	ldr	r0, [pc, #656]	@ (8000bb8 <main+0x2e4>)
 8000926:	f000 fb03 	bl	8000f30 <ring_buffer_init>
  ring_buffer_init(&keypad1_rb, keypad_buffer1, KEYPAD1_RB_LEN);
 800092a:	2203      	movs	r2, #3
 800092c:	49a3      	ldr	r1, [pc, #652]	@ (8000bbc <main+0x2e8>)
 800092e:	48a4      	ldr	r0, [pc, #656]	@ (8000bc0 <main+0x2ec>)
 8000930:	f000 fafe 	bl	8000f30 <ring_buffer_init>

  HAL_UART_Receive_IT(&huart2, &usart2_data, 1);
 8000934:	2201      	movs	r2, #1
 8000936:	49a3      	ldr	r1, [pc, #652]	@ (8000bc4 <main+0x2f0>)
 8000938:	4899      	ldr	r0, [pc, #612]	@ (8000ba0 <main+0x2cc>)
 800093a:	f003 faa3 	bl	8003e84 <HAL_UART_Receive_IT>
  while (1)
  {

    // adding logic to implement heartbeat
    static uint32_t last_heartbeat_time = 0;
    if (HAL_GetTick() - last_heartbeat_time >= 500) // toggling for 1Hz (500ms on / 500ms off)
 800093e:	f000 fe27 	bl	8001590 <HAL_GetTick>
 8000942:	4602      	mov	r2, r0
 8000944:	4ba0      	ldr	r3, [pc, #640]	@ (8000bc8 <main+0x2f4>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800094e:	d309      	bcc.n	8000964 <main+0x90>
    {
      HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8000950:	2120      	movs	r1, #32
 8000952:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000956:	f001 f9b5 	bl	8001cc4 <HAL_GPIO_TogglePin>
      last_heartbeat_time = HAL_GetTick();
 800095a:	f000 fe19 	bl	8001590 <HAL_GetTick>
 800095e:	4603      	mov	r3, r0
 8000960:	4a99      	ldr	r2, [pc, #612]	@ (8000bc8 <main+0x2f4>)
 8000962:	6013      	str	r3, [r2, #0]
      // HAL_UART_Transmit(&huart2, HB, sizeof(HB) - 1, 100);
    }
    // show entry data on OLED for UART and KEYPAD
    // Mostrar en OLED los datos del teclado
    if (keypad_data != 0xFF)
 8000964:	4b99      	ldr	r3, [pc, #612]	@ (8000bcc <main+0x2f8>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2bff      	cmp	r3, #255	@ 0xff
 800096a:	d017      	beq.n	800099c <main+0xc8>
    {
      ssd1306_SetCursor(20, 20);
 800096c:	2114      	movs	r1, #20
 800096e:	2014      	movs	r0, #20
 8000970:	f004 ff88 	bl	8005884 <ssd1306_SetCursor>
      char buffer[2] = {keypad_data, '\0'};
 8000974:	4b95      	ldr	r3, [pc, #596]	@ (8000bcc <main+0x2f8>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800097c:	2300      	movs	r3, #0
 800097e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
      ssd1306_WriteString(buffer, Font_11x18, White);
 8000982:	4b93      	ldr	r3, [pc, #588]	@ (8000bd0 <main+0x2fc>)
 8000984:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000988:	2201      	movs	r2, #1
 800098a:	9200      	str	r2, [sp, #0]
 800098c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800098e:	f004 ff53 	bl	8005838 <ssd1306_WriteString>
      ssd1306_UpdateScreen();
 8000992:	f004 fe45 	bl	8005620 <ssd1306_UpdateScreen>
      keypad_data = 0xFF;
 8000996:	4b8d      	ldr	r3, [pc, #564]	@ (8000bcc <main+0x2f8>)
 8000998:	22ff      	movs	r2, #255	@ 0xff
 800099a:	701a      	strb	r2, [r3, #0]
    }

    if (keypad_data1 != 0xFF)
 800099c:	4b8d      	ldr	r3, [pc, #564]	@ (8000bd4 <main+0x300>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2bff      	cmp	r3, #255	@ 0xff
 80009a2:	d017      	beq.n	80009d4 <main+0x100>
    {
      ssd1306_SetCursor(40, 20);
 80009a4:	2114      	movs	r1, #20
 80009a6:	2028      	movs	r0, #40	@ 0x28
 80009a8:	f004 ff6c 	bl	8005884 <ssd1306_SetCursor>
      char buffer[2] = {keypad_data1, '\0'};
 80009ac:	4b89      	ldr	r3, [pc, #548]	@ (8000bd4 <main+0x300>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80009b4:	2300      	movs	r3, #0
 80009b6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
      ssd1306_WriteString(buffer, Font_11x18, White);
 80009ba:	4b85      	ldr	r3, [pc, #532]	@ (8000bd0 <main+0x2fc>)
 80009bc:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80009c0:	2201      	movs	r2, #1
 80009c2:	9200      	str	r2, [sp, #0]
 80009c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009c6:	f004 ff37 	bl	8005838 <ssd1306_WriteString>
      ssd1306_UpdateScreen();
 80009ca:	f004 fe29 	bl	8005620 <ssd1306_UpdateScreen>
      keypad_data1 = 0xFF;
 80009ce:	4b81      	ldr	r3, [pc, #516]	@ (8000bd4 <main+0x300>)
 80009d0:	22ff      	movs	r2, #255	@ 0xff
 80009d2:	701a      	strb	r2, [r3, #0]
    }

    // show UART entry on OLED
    if (usart2_data != 0xFF)
 80009d4:	4b7b      	ldr	r3, [pc, #492]	@ (8000bc4 <main+0x2f0>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2bff      	cmp	r3, #255	@ 0xff
 80009da:	d017      	beq.n	8000a0c <main+0x138>
    {
      ssd1306_SetCursor(20, 40);
 80009dc:	2128      	movs	r1, #40	@ 0x28
 80009de:	2014      	movs	r0, #20
 80009e0:	f004 ff50 	bl	8005884 <ssd1306_SetCursor>
      char buffer[2] = {usart2_data, '\0'};
 80009e4:	4b77      	ldr	r3, [pc, #476]	@ (8000bc4 <main+0x2f0>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80009ec:	2300      	movs	r3, #0
 80009ee:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
      ssd1306_WriteString(buffer, Font_11x18, White);
 80009f2:	4b77      	ldr	r3, [pc, #476]	@ (8000bd0 <main+0x2fc>)
 80009f4:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80009f8:	2201      	movs	r2, #1
 80009fa:	9200      	str	r2, [sp, #0]
 80009fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009fe:	f004 ff1b 	bl	8005838 <ssd1306_WriteString>
      ssd1306_UpdateScreen();
 8000a02:	f004 fe0d 	bl	8005620 <ssd1306_UpdateScreen>
      usart2_data = 0xFF;
 8000a06:	4b6f      	ldr	r3, [pc, #444]	@ (8000bc4 <main+0x2f0>)
 8000a08:	22ff      	movs	r2, #255	@ 0xff
 8000a0a:	701a      	strb	r2, [r3, #0]
    }

    // implementing arithmetic logic


    if (operation_flag == 1)
 8000a0c:	4b72      	ldr	r3, [pc, #456]	@ (8000bd8 <main+0x304>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d193      	bne.n	800093e <main+0x6a>
    {

      HAL_UART_Transmit(&huart2, (uint8_t *)"calculating...", 46, HAL_MAX_DELAY);
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1a:	222e      	movs	r2, #46	@ 0x2e
 8000a1c:	496f      	ldr	r1, [pc, #444]	@ (8000bdc <main+0x308>)
 8000a1e:	4860      	ldr	r0, [pc, #384]	@ (8000ba0 <main+0x2cc>)
 8000a20:	f003 f9a6 	bl	8003d70 <HAL_UART_Transmit>
      uint32_t num1 = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
      uint32_t num2 = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      uint8_t digit;

      while (ring_buffer_is_empty(&keypad_rb) == 0)
 8000a2c:	e010      	b.n	8000a50 <main+0x17c>
      {
        ring_buffer_read(&keypad_rb, &digit);
 8000a2e:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 8000a32:	4619      	mov	r1, r3
 8000a34:	4860      	ldr	r0, [pc, #384]	@ (8000bb8 <main+0x2e4>)
 8000a36:	f000 fb04 	bl	8001042 <ring_buffer_read>
        num1 = num1 * 10 + (digit - '0');
 8000a3a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	4413      	add	r3, r2
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	461a      	mov	r2, r3
 8000a46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000a4a:	4413      	add	r3, r2
 8000a4c:	3b30      	subs	r3, #48	@ 0x30
 8000a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      while (ring_buffer_is_empty(&keypad_rb) == 0)
 8000a50:	4859      	ldr	r0, [pc, #356]	@ (8000bb8 <main+0x2e4>)
 8000a52:	f000 faa0 	bl	8000f96 <ring_buffer_is_empty>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d0e8      	beq.n	8000a2e <main+0x15a>
      }


      while (ring_buffer_is_empty(&keypad1_rb) == 0)
 8000a5c:	e010      	b.n	8000a80 <main+0x1ac>
      {
        ring_buffer_read(&keypad1_rb, &digit);
 8000a5e:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 8000a62:	4619      	mov	r1, r3
 8000a64:	4856      	ldr	r0, [pc, #344]	@ (8000bc0 <main+0x2ec>)
 8000a66:	f000 faec 	bl	8001042 <ring_buffer_read>
        num2 = num2 * 10 + (digit - '0');
 8000a6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	4413      	add	r3, r2
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	461a      	mov	r2, r3
 8000a76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000a7a:	4413      	add	r3, r2
 8000a7c:	3b30      	subs	r3, #48	@ 0x30
 8000a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      while (ring_buffer_is_empty(&keypad1_rb) == 0)
 8000a80:	484f      	ldr	r0, [pc, #316]	@ (8000bc0 <main+0x2ec>)
 8000a82:	f000 fa88 	bl	8000f96 <ring_buffer_is_empty>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d0e8      	beq.n	8000a5e <main+0x18a>
      }

      // scanning uart operator
      uint8_t operator= 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
      ring_buffer_read(&usart2_rb, &operator);
 8000a92:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 8000a96:	4619      	mov	r1, r3
 8000a98:	4845      	ldr	r0, [pc, #276]	@ (8000bb0 <main+0x2dc>)
 8000a9a:	f000 fad2 	bl	8001042 <ring_buffer_read>

      // realize respective arithmetic operation
      int32_t result = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	637b      	str	r3, [r7, #52]	@ 0x34
      switch (operator)
 8000aa2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000aa6:	3b2a      	subs	r3, #42	@ 0x2a
 8000aa8:	2b05      	cmp	r3, #5
 8000aaa:	d83c      	bhi.n	8000b26 <main+0x252>
 8000aac:	a201      	add	r2, pc, #4	@ (adr r2, 8000ab4 <main+0x1e0>)
 8000aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab2:	bf00      	nop
 8000ab4:	08000ae1 	.word	0x08000ae1
 8000ab8:	08000acd 	.word	0x08000acd
 8000abc:	08000b27 	.word	0x08000b27
 8000ac0:	08000ad7 	.word	0x08000ad7
 8000ac4:	08000b27 	.word	0x08000b27
 8000ac8:	08000aed 	.word	0x08000aed
      {
      case '+':
        result = num1 + num2;
 8000acc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ad0:	4413      	add	r3, r2
 8000ad2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8000ad4:	e02b      	b.n	8000b2e <main+0x25a>
      case '-':
        result = num1 - num2;
 8000ad6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8000ade:	e026      	b.n	8000b2e <main+0x25a>
      case '*':
        result = num1 * num2;
 8000ae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ae2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000ae4:	fb02 f303 	mul.w	r3, r2, r3
 8000ae8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8000aea:	e020      	b.n	8000b2e <main+0x25a>
      case '/':
        if (num2 != 0) // Validamos división por cero
 8000aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d005      	beq.n	8000afe <main+0x22a>
          result = num1 / num2;
 8000af2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afa:	637b      	str	r3, [r7, #52]	@ 0x34
          ssd1306_SetCursor(20, 30);
          ssd1306_WriteString("Error: Div 0", Font_11x18, White);
          ssd1306_UpdateScreen();
          break;
        }
        break;
 8000afc:	e017      	b.n	8000b2e <main+0x25a>
          printf("Error: division by zero not avaliable.\r\n");
 8000afe:	4838      	ldr	r0, [pc, #224]	@ (8000be0 <main+0x30c>)
 8000b00:	f005 f834 	bl	8005b6c <puts>
          ssd1306_Fill(Black);
 8000b04:	2000      	movs	r0, #0
 8000b06:	f004 fd73 	bl	80055f0 <ssd1306_Fill>
          ssd1306_SetCursor(20, 30);
 8000b0a:	211e      	movs	r1, #30
 8000b0c:	2014      	movs	r0, #20
 8000b0e:	f004 feb9 	bl	8005884 <ssd1306_SetCursor>
          ssd1306_WriteString("Error: Div 0", Font_11x18, White);
 8000b12:	4b2f      	ldr	r3, [pc, #188]	@ (8000bd0 <main+0x2fc>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	9200      	str	r2, [sp, #0]
 8000b18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b1a:	4832      	ldr	r0, [pc, #200]	@ (8000be4 <main+0x310>)
 8000b1c:	f004 fe8c 	bl	8005838 <ssd1306_WriteString>
          ssd1306_UpdateScreen();
 8000b20:	f004 fd7e 	bl	8005620 <ssd1306_UpdateScreen>
          break;
 8000b24:	e003      	b.n	8000b2e <main+0x25a>
      default:
        printf("operator not validate \r\n");
 8000b26:	4830      	ldr	r0, [pc, #192]	@ (8000be8 <main+0x314>)
 8000b28:	f005 f820 	bl	8005b6c <puts>
        break;
 8000b2c:	bf00      	nop
      }
      // validating last functional requirement (CONTROL STATE LED)
      if (result >  0)
 8000b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	dd06      	ble.n	8000b42 <main+0x26e>
            {
              HAL_GPIO_WritePin(GPIOA, LED3_Pin, 1); //  > 0
 8000b34:	2201      	movs	r2, #1
 8000b36:	2140      	movs	r1, #64	@ 0x40
 8000b38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b3c:	f001 f8aa 	bl	8001c94 <HAL_GPIO_WritePin>
 8000b40:	e005      	b.n	8000b4e <main+0x27a>
            }
            else // less or equal
            {
              HAL_GPIO_WritePin(GPIOA, LED3_Pin, 0); // <=0
 8000b42:	2200      	movs	r2, #0
 8000b44:	2140      	movs	r1, #64	@ 0x40
 8000b46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b4a:	f001 f8a3 	bl	8001c94 <HAL_GPIO_WritePin>
            }

      // deploy result on  OLED and UART
      ssd1306_Fill(Black);
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f004 fd4e 	bl	80055f0 <ssd1306_Fill>
      char result_str[32];
      sprintf(result_str, "%ld () %ld = %ld", num1, num2, result);
 8000b54:	1d38      	adds	r0, r7, #4
 8000b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b58:	9300      	str	r3, [sp, #0]
 8000b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000b5e:	4923      	ldr	r1, [pc, #140]	@ (8000bec <main+0x318>)
 8000b60:	f005 f80c 	bl	8005b7c <siprintf>
      ssd1306_SetCursor(20, 30);
 8000b64:	211e      	movs	r1, #30
 8000b66:	2014      	movs	r0, #20
 8000b68:	f004 fe8c 	bl	8005884 <ssd1306_SetCursor>
      ssd1306_WriteString(result_str, Font_6x8, White);
 8000b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba4 <main+0x2d0>)
 8000b6e:	1d38      	adds	r0, r7, #4
 8000b70:	2201      	movs	r2, #1
 8000b72:	9200      	str	r2, [sp, #0]
 8000b74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b76:	f004 fe5f 	bl	8005838 <ssd1306_WriteString>
      ssd1306_UpdateScreen();
 8000b7a:	f004 fd51 	bl	8005620 <ssd1306_UpdateScreen>

      printf("Resultado: %ld\r\n", result); // display via UART
 8000b7e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000b80:	481b      	ldr	r0, [pc, #108]	@ (8000bf0 <main+0x31c>)
 8000b82:	f004 ff8b 	bl	8005a9c <iprintf>
      printf("%ld () %ld = %s\r\n", num1 ,num2, result_str);
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000b8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000b8c:	4819      	ldr	r0, [pc, #100]	@ (8000bf4 <main+0x320>)
 8000b8e:	f004 ff85 	bl	8005a9c <iprintf>

      // reset operatioo flag

      operation_flag = 0;
 8000b92:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <main+0x304>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
  {
 8000b98:	e6d1      	b.n	800093e <main+0x6a>
 8000b9a:	bf00      	nop
 8000b9c:	20000018 	.word	0x20000018
 8000ba0:	20000114 	.word	0x20000114
 8000ba4:	080080f0 	.word	0x080080f0
 8000ba8:	08006ca4 	.word	0x08006ca4
 8000bac:	200001b4 	.word	0x200001b4
 8000bb0:	200001b8 	.word	0x200001b8
 8000bb4:	2000019c 	.word	0x2000019c
 8000bb8:	200001a0 	.word	0x200001a0
 8000bbc:	200001a8 	.word	0x200001a8
 8000bc0:	200001ac 	.word	0x200001ac
 8000bc4:	20000014 	.word	0x20000014
 8000bc8:	200001c4 	.word	0x200001c4
 8000bcc:	20000012 	.word	0x20000012
 8000bd0:	080080fc 	.word	0x080080fc
 8000bd4:	20000013 	.word	0x20000013
 8000bd8:	200001c0 	.word	0x200001c0
 8000bdc:	08006cc0 	.word	0x08006cc0
 8000be0:	08006cd0 	.word	0x08006cd0
 8000be4:	08006cf8 	.word	0x08006cf8
 8000be8:	08006d08 	.word	0x08006d08
 8000bec:	08006d20 	.word	0x08006d20
 8000bf0:	08006d34 	.word	0x08006d34
 8000bf4:	08006d48 	.word	0x08006d48

08000bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b096      	sub	sp, #88	@ 0x58
 8000bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	2244      	movs	r2, #68	@ 0x44
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f005 f8ca 	bl	8005da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c1a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c1e:	f001 fd47 	bl	80026b0 <HAL_PWREx_ControlVoltageScaling>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c28:	f000 f97c 	bl	8000f24 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c34:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c36:	2310      	movs	r3, #16
 8000c38:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c42:	2301      	movs	r3, #1
 8000c44:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c46:	230a      	movs	r3, #10
 8000c48:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c4a:	2307      	movs	r3, #7
 8000c4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c52:	2302      	movs	r3, #2
 8000c54:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 fd7e 	bl	800275c <HAL_RCC_OscConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c66:	f000 f95d 	bl	8000f24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6a:	230f      	movs	r3, #15
 8000c6c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c7e:	463b      	mov	r3, r7
 8000c80:	2104      	movs	r1, #4
 8000c82:	4618      	mov	r0, r3
 8000c84:	f002 f946 	bl	8002f14 <HAL_RCC_ClockConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c8e:	f000 f949 	bl	8000f24 <Error_Handler>
  }
}
 8000c92:	bf00      	nop
 8000c94:	3758      	adds	r7, #88	@ 0x58
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000ca2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d14 <MX_I2C1_Init+0x78>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000ca8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d18 <MX_I2C1_Init+0x7c>)
 8000caa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cac:	4b18      	ldr	r3, [pc, #96]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cb2:	4b17      	ldr	r3, [pc, #92]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb8:	4b15      	ldr	r3, [pc, #84]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cbe:	4b14      	ldr	r3, [pc, #80]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cca:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cd6:	480e      	ldr	r0, [pc, #56]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cd8:	f001 f826 	bl	8001d28 <HAL_I2C_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ce2:	f000 f91f 	bl	8000f24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4809      	ldr	r0, [pc, #36]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cea:	f001 fc3b 	bl	8002564 <HAL_I2CEx_ConfigAnalogFilter>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cf4:	f000 f916 	bl	8000f24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cfc:	f001 fc7d 	bl	80025fa <HAL_I2CEx_ConfigDigitalFilter>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d06:	f000 f90d 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200000c0 	.word	0x200000c0
 8000d14:	40005400 	.word	0x40005400
 8000d18:	10d19ce4 	.word	0x10d19ce4

08000d1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d20:	4b14      	ldr	r3, [pc, #80]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d22:	4a15      	ldr	r2, [pc, #84]	@ (8000d78 <MX_USART2_UART_Init+0x5c>)
 8000d24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d26:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d42:	220c      	movs	r2, #12
 8000d44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d52:	4b08      	ldr	r3, [pc, #32]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d5e:	4805      	ldr	r0, [pc, #20]	@ (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d60:	f002 ffb8 	bl	8003cd4 <HAL_UART_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d6a:	f000 f8db 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000114 	.word	0x20000114
 8000d78:	40004400 	.word	0x40004400

08000d7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	@ 0x28
 8000d80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
 8000d90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d92:	4b61      	ldr	r3, [pc, #388]	@ (8000f18 <MX_GPIO_Init+0x19c>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d96:	4a60      	ldr	r2, [pc, #384]	@ (8000f18 <MX_GPIO_Init+0x19c>)
 8000d98:	f043 0304 	orr.w	r3, r3, #4
 8000d9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d9e:	4b5e      	ldr	r3, [pc, #376]	@ (8000f18 <MX_GPIO_Init+0x19c>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da2:	f003 0304 	and.w	r3, r3, #4
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000daa:	4b5b      	ldr	r3, [pc, #364]	@ (8000f18 <MX_GPIO_Init+0x19c>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dae:	4a5a      	ldr	r2, [pc, #360]	@ (8000f18 <MX_GPIO_Init+0x19c>)
 8000db0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000db4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000db6:	4b58      	ldr	r3, [pc, #352]	@ (8000f18 <MX_GPIO_Init+0x19c>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	4b55      	ldr	r3, [pc, #340]	@ (8000f18 <MX_GPIO_Init+0x19c>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc6:	4a54      	ldr	r2, [pc, #336]	@ (8000f18 <MX_GPIO_Init+0x19c>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dce:	4b52      	ldr	r3, [pc, #328]	@ (8000f18 <MX_GPIO_Init+0x19c>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	4b4f      	ldr	r3, [pc, #316]	@ (8000f18 <MX_GPIO_Init+0x19c>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dde:	4a4e      	ldr	r2, [pc, #312]	@ (8000f18 <MX_GPIO_Init+0x19c>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000de6:	4b4c      	ldr	r3, [pc, #304]	@ (8000f18 <MX_GPIO_Init+0x19c>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2160      	movs	r1, #96	@ 0x60
 8000df6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dfa:	f000 ff4b 	bl	8001c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, GPIO_PIN_SET);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e04:	4845      	ldr	r0, [pc, #276]	@ (8000f1c <MX_GPIO_Init+0x1a0>)
 8000e06:	f000 ff45 	bl	8001c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, GPIO_PIN_SET);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2180      	movs	r1, #128	@ 0x80
 8000e0e:	4844      	ldr	r0, [pc, #272]	@ (8000f20 <MX_GPIO_Init+0x1a4>)
 8000e10:	f000 ff40 	bl	8001c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROW_3_Pin|ROW_2_Pin, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000e1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e1e:	f000 ff39 	bl	8001c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e28:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4619      	mov	r1, r3
 8000e38:	4839      	ldr	r0, [pc, #228]	@ (8000f20 <MX_GPIO_Init+0x1a4>)
 8000e3a:	f000 fd69 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED3_Pin ROW_3_Pin ROW_2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED3_Pin|ROW_3_Pin|ROW_2_Pin;
 8000e3e:	f44f 7358 	mov.w	r3, #864	@ 0x360
 8000e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4619      	mov	r1, r3
 8000e56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e5a:	f000 fd59 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROW_4_Pin */
  GPIO_InitStruct.Pin = ROW_4_Pin;
 8000e5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ROW_4_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4619      	mov	r1, r3
 8000e76:	4829      	ldr	r0, [pc, #164]	@ (8000f1c <MX_GPIO_Init+0x1a0>)
 8000e78:	f000 fd4a 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROW_1_Pin */
  GPIO_InitStruct.Pin = ROW_1_Pin;
 8000e7c:	2380      	movs	r3, #128	@ 0x80
 8000e7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ROW_1_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	4823      	ldr	r0, [pc, #140]	@ (8000f20 <MX_GPIO_Init+0x1a4>)
 8000e94:	f000 fd3c 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pin : COL_4_Pin */
  GPIO_InitStruct.Pin = COL_4_Pin;
 8000e98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e9e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COL_4_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4619      	mov	r1, r3
 8000eae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eb2:	f000 fd2d 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL_3_Pin COL_1_Pin COL_2_Pin */
  GPIO_InitStruct.Pin = COL_3_Pin|COL_1_Pin|COL_2_Pin;
 8000eb6:	2338      	movs	r3, #56	@ 0x38
 8000eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ebe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4814      	ldr	r0, [pc, #80]	@ (8000f1c <MX_GPIO_Init+0x1a0>)
 8000ecc:	f000 fd20 	bl	8001910 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	2009      	movs	r0, #9
 8000ed6:	f000 fc66 	bl	80017a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000eda:	2009      	movs	r0, #9
 8000edc:	f000 fc7f 	bl	80017de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	200a      	movs	r0, #10
 8000ee6:	f000 fc5e 	bl	80017a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000eea:	200a      	movs	r0, #10
 8000eec:	f000 fc77 	bl	80017de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	2017      	movs	r0, #23
 8000ef6:	f000 fc56 	bl	80017a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000efa:	2017      	movs	r0, #23
 8000efc:	f000 fc6f 	bl	80017de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2100      	movs	r1, #0
 8000f04:	2028      	movs	r0, #40	@ 0x28
 8000f06:	f000 fc4e 	bl	80017a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f0a:	2028      	movs	r0, #40	@ 0x28
 8000f0c:	f000 fc67 	bl	80017de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f10:	bf00      	nop
 8000f12:	3728      	adds	r7, #40	@ 0x28
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	48000400 	.word	0x48000400
 8000f20:	48000800 	.word	0x48000800

08000f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f28:	b672      	cpsid	i
}
 8000f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <Error_Handler+0x8>

08000f30 <ring_buffer_init>:

#include "ring_buffer.h"

void ring_buffer_init(ring_buffer_t *rb, uint8_t *mem_add, uint8_t cap)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	71fb      	strb	r3, [r7, #7]
    rb->buffer = mem_add;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	68ba      	ldr	r2, [r7, #8]
 8000f42:	601a      	str	r2, [r3, #0]
    rb->capacity = cap;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	79fa      	ldrb	r2, [r7, #7]
 8000f48:	71da      	strb	r2, [r3, #7]

    ring_buffer_reset(rb);
 8000f4a:	68f8      	ldr	r0, [r7, #12]
 8000f4c:	f000 f804 	bl	8000f58 <ring_buffer_reset>
}
 8000f50:	bf00      	nop
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <ring_buffer_reset>:
 * @brief Esta funcion reinicia los datos disponibles en el buffer
 *
 * @retval size: cantidad de datos disponibles
 */
void ring_buffer_reset(ring_buffer_t *rb)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
    rb->head = 0;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	711a      	strb	r2, [r3, #4]
    rb->tail = 0;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	715a      	strb	r2, [r3, #5]
    rb->is_full = 0;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	719a      	strb	r2, [r3, #6]
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <ring_buffer_is_full>:
 * @brief Esta funcion revisa si el buffer esta lleno
 *
 * @retval is_full: 0 si no esta lleno, 1 si esta lleno
 */
uint8_t ring_buffer_is_full(ring_buffer_t *rb)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
    return rb->is_full;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	799b      	ldrb	r3, [r3, #6]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <ring_buffer_is_empty>:
 * @brief Esta funcion revisa si el buffer esta vacio
 *
 * @retval 0 si esta vacio, 1 si no esta vacio
 */
uint8_t ring_buffer_is_empty(ring_buffer_t *rb)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
    // Returns 1 if the buffer is empty, 0 otherwise.
    // The buffer is empty if the head and tail pointers are equal, and the is_full flag is not set.

    return ((rb->head == rb->tail) && (rb->is_full == 0)) ? 1 : 0;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	791a      	ldrb	r2, [r3, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	795b      	ldrb	r3, [r3, #5]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d105      	bne.n	8000fb6 <ring_buffer_is_empty+0x20>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	799b      	ldrb	r3, [r3, #6]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <ring_buffer_is_empty+0x20>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <ring_buffer_is_empty+0x22>
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	b2db      	uxtb	r3, r3
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <ring_buffer_write>:
 * @param data: el dato que se va a escribir
 *
 * @retval Ninguno
 */
void ring_buffer_write(ring_buffer_t *rb, uint8_t data)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	70fb      	strb	r3, [r7, #3]
    rb->buffer[rb->head] = data;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	7912      	ldrb	r2, [r2, #4]
 8000fda:	4413      	add	r3, r2
 8000fdc:	78fa      	ldrb	r2, [r7, #3]
 8000fde:	701a      	strb	r2, [r3, #0]
    rb->head = rb->head + 1;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	791b      	ldrb	r3, [r3, #4]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	711a      	strb	r2, [r3, #4]

    if (rb->head >= rb->capacity)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	791a      	ldrb	r2, [r3, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	79db      	ldrb	r3, [r3, #7]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d302      	bcc.n	8000ffe <ring_buffer_write+0x38>
    { // si la cabeza llega al final de la memoria
        rb->head = 0;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	711a      	strb	r2, [r3, #4]
    }

    if (rb->is_full != 0)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	799b      	ldrb	r3, [r3, #6]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d005      	beq.n	8001012 <ring_buffer_write+0x4c>
    { // si se pierden datos viejos (continar enviando datos)
        rb->tail = rb->tail + 1;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	795b      	ldrb	r3, [r3, #5]
 800100a:	3301      	adds	r3, #1
 800100c:	b2da      	uxtb	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	715a      	strb	r2, [r3, #5]
    }

    if (rb->tail >= rb->capacity)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	795a      	ldrb	r2, [r3, #5]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	79db      	ldrb	r3, [r3, #7]
 800101a:	429a      	cmp	r2, r3
 800101c:	d302      	bcc.n	8001024 <ring_buffer_write+0x5e>
    {                 // si la cola llega al final de la memoria
        rb->tail = 0; // avoiding unncesary data
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	715a      	strb	r2, [r3, #5]
    }

    if (rb->head == rb->tail)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	791a      	ldrb	r2, [r3, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	795b      	ldrb	r3, [r3, #5]
 800102c:	429a      	cmp	r2, r3
 800102e:	d102      	bne.n	8001036 <ring_buffer_write+0x70>
    { // si la cabeza alcanza la cola
        rb->is_full = 1;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2201      	movs	r2, #1
 8001034:	719a      	strb	r2, [r3, #6]
    }
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <ring_buffer_read>:
 * @param data: la direccion de donde se va a escribir el dato
 *
 * @retval 1: hay datos disponibles, 0: no hay datos
 */
uint8_t ring_buffer_read(ring_buffer_t *rb, uint8_t *data) // 0x20
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	6039      	str	r1, [r7, #0]
    if ((rb->is_full != 0) || (rb->head != rb->tail))
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	799b      	ldrb	r3, [r3, #6]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d105      	bne.n	8001060 <ring_buffer_read+0x1e>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	791a      	ldrb	r2, [r3, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	795b      	ldrb	r3, [r3, #5]
 800105c:	429a      	cmp	r2, r3
 800105e:	d01b      	beq.n	8001098 <ring_buffer_read+0x56>
    {                                 // data available
        *data = rb->buffer[rb->tail]; // add: 0x20, val: buffer
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	7952      	ldrb	r2, [r2, #5]
 8001068:	4413      	add	r3, r2
 800106a:	781a      	ldrb	r2, [r3, #0]
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	701a      	strb	r2, [r3, #0]
        rb->tail = rb->tail + 1;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	795b      	ldrb	r3, [r3, #5]
 8001074:	3301      	adds	r3, #1
 8001076:	b2da      	uxtb	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	715a      	strb	r2, [r3, #5]
        if (rb->tail >= rb->capacity)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	795a      	ldrb	r2, [r3, #5]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	79db      	ldrb	r3, [r3, #7]
 8001084:	429a      	cmp	r2, r3
 8001086:	d302      	bcc.n	800108e <ring_buffer_read+0x4c>
        {
            rb->tail = 0;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	715a      	strb	r2, [r3, #5]
        }
        rb->is_full = 0;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	719a      	strb	r2, [r3, #6]

        return 1; // buffer con datos
 8001094:	2301      	movs	r3, #1
 8001096:	e000      	b.n	800109a <ring_buffer_read+0x58>
    }
    return 0; // buffer vacio
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	4b0f      	ldr	r3, [pc, #60]	@ (80010ec <HAL_MspInit+0x44>)
 80010b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010b2:	4a0e      	ldr	r2, [pc, #56]	@ (80010ec <HAL_MspInit+0x44>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80010ba:	4b0c      	ldr	r3, [pc, #48]	@ (80010ec <HAL_MspInit+0x44>)
 80010bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c6:	4b09      	ldr	r3, [pc, #36]	@ (80010ec <HAL_MspInit+0x44>)
 80010c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ca:	4a08      	ldr	r2, [pc, #32]	@ (80010ec <HAL_MspInit+0x44>)
 80010cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80010d2:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <HAL_MspInit+0x44>)
 80010d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000

080010f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b0ac      	sub	sp, #176	@ 0xb0
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2288      	movs	r2, #136	@ 0x88
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f004 fe45 	bl	8005da0 <memset>
  if(hi2c->Instance==I2C1)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a21      	ldr	r2, [pc, #132]	@ (80011a0 <HAL_I2C_MspInit+0xb0>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d13b      	bne.n	8001198 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001120:	2340      	movs	r3, #64	@ 0x40
 8001122:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001124:	2300      	movs	r3, #0
 8001126:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	4618      	mov	r0, r3
 800112e:	f002 f915 	bl	800335c <HAL_RCCEx_PeriphCLKConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001138:	f7ff fef4 	bl	8000f24 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113c:	4b19      	ldr	r3, [pc, #100]	@ (80011a4 <HAL_I2C_MspInit+0xb4>)
 800113e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001140:	4a18      	ldr	r2, [pc, #96]	@ (80011a4 <HAL_I2C_MspInit+0xb4>)
 8001142:	f043 0302 	orr.w	r3, r3, #2
 8001146:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001148:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <HAL_I2C_MspInit+0xb4>)
 800114a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001154:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001158:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800115c:	2312      	movs	r3, #18
 800115e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800116e:	2304      	movs	r3, #4
 8001170:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001174:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001178:	4619      	mov	r1, r3
 800117a:	480b      	ldr	r0, [pc, #44]	@ (80011a8 <HAL_I2C_MspInit+0xb8>)
 800117c:	f000 fbc8 	bl	8001910 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001180:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <HAL_I2C_MspInit+0xb4>)
 8001182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001184:	4a07      	ldr	r2, [pc, #28]	@ (80011a4 <HAL_I2C_MspInit+0xb4>)
 8001186:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800118a:	6593      	str	r3, [r2, #88]	@ 0x58
 800118c:	4b05      	ldr	r3, [pc, #20]	@ (80011a4 <HAL_I2C_MspInit+0xb4>)
 800118e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001190:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001198:	bf00      	nop
 800119a:	37b0      	adds	r7, #176	@ 0xb0
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40005400 	.word	0x40005400
 80011a4:	40021000 	.word	0x40021000
 80011a8:	48000400 	.word	0x48000400

080011ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b0ac      	sub	sp, #176	@ 0xb0
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2288      	movs	r2, #136	@ 0x88
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f004 fde7 	bl	8005da0 <memset>
  if(huart->Instance==USART2)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a25      	ldr	r2, [pc, #148]	@ (800126c <HAL_UART_MspInit+0xc0>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d143      	bne.n	8001264 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011dc:	2302      	movs	r3, #2
 80011de:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4618      	mov	r0, r3
 80011ea:	f002 f8b7 	bl	800335c <HAL_RCCEx_PeriphCLKConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011f4:	f7ff fe96 	bl	8000f24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001270 <HAL_UART_MspInit+0xc4>)
 80011fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011fc:	4a1c      	ldr	r2, [pc, #112]	@ (8001270 <HAL_UART_MspInit+0xc4>)
 80011fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001202:	6593      	str	r3, [r2, #88]	@ 0x58
 8001204:	4b1a      	ldr	r3, [pc, #104]	@ (8001270 <HAL_UART_MspInit+0xc4>)
 8001206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001210:	4b17      	ldr	r3, [pc, #92]	@ (8001270 <HAL_UART_MspInit+0xc4>)
 8001212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001214:	4a16      	ldr	r2, [pc, #88]	@ (8001270 <HAL_UART_MspInit+0xc4>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800121c:	4b14      	ldr	r3, [pc, #80]	@ (8001270 <HAL_UART_MspInit+0xc4>)
 800121e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001228:	230c      	movs	r3, #12
 800122a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122e:	2302      	movs	r3, #2
 8001230:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123a:	2303      	movs	r3, #3
 800123c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001240:	2307      	movs	r3, #7
 8001242:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001246:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800124a:	4619      	mov	r1, r3
 800124c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001250:	f000 fb5e 	bl	8001910 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	2100      	movs	r1, #0
 8001258:	2026      	movs	r0, #38	@ 0x26
 800125a:	f000 faa4 	bl	80017a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800125e:	2026      	movs	r0, #38	@ 0x26
 8001260:	f000 fabd 	bl	80017de <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001264:	bf00      	nop
 8001266:	37b0      	adds	r7, #176	@ 0xb0
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40004400 	.word	0x40004400
 8001270:	40021000 	.word	0x40021000

08001274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <NMI_Handler+0x4>

0800127c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <HardFault_Handler+0x4>

08001284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <MemManage_Handler+0x4>

0800128c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <BusFault_Handler+0x4>

08001294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <UsageFault_Handler+0x4>

0800129c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ca:	f000 f94d 	bl	8001568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_3_Pin);
 80012d6:	2008      	movs	r0, #8
 80012d8:	f000 fd0e 	bl	8001cf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}

080012e0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_1_Pin);
 80012e4:	2010      	movs	r0, #16
 80012e6:	f000 fd07 	bl	8001cf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}

080012ee <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_2_Pin);
 80012f2:	2020      	movs	r0, #32
 80012f4:	f000 fd00 	bl	8001cf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}

080012fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001300:	4802      	ldr	r0, [pc, #8]	@ (800130c <USART2_IRQHandler+0x10>)
 8001302:	f002 fe0b 	bl	8003f1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000114 	.word	0x20000114

08001310 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_4_Pin);
 8001314:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001318:	f000 fcee 	bl	8001cf8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800131c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001320:	f000 fcea 	bl	8001cf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}

08001328 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	e00a      	b.n	8001350 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800133a:	f3af 8000 	nop.w
 800133e:	4601      	mov	r1, r0
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	60ba      	str	r2, [r7, #8]
 8001346:	b2ca      	uxtb	r2, r1
 8001348:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	3301      	adds	r3, #1
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	429a      	cmp	r2, r3
 8001356:	dbf0      	blt.n	800133a <_read+0x12>
  }

  return len;
 8001358:	687b      	ldr	r3, [r7, #4]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800138a:	605a      	str	r2, [r3, #4]
  return 0;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <_isatty>:

int _isatty(int file)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013a2:	2301      	movs	r3, #1
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d4:	4a14      	ldr	r2, [pc, #80]	@ (8001428 <_sbrk+0x5c>)
 80013d6:	4b15      	ldr	r3, [pc, #84]	@ (800142c <_sbrk+0x60>)
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e0:	4b13      	ldr	r3, [pc, #76]	@ (8001430 <_sbrk+0x64>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d102      	bne.n	80013ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e8:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <_sbrk+0x64>)
 80013ea:	4a12      	ldr	r2, [pc, #72]	@ (8001434 <_sbrk+0x68>)
 80013ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ee:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <_sbrk+0x64>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d207      	bcs.n	800140c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013fc:	f004 fd1e 	bl	8005e3c <__errno>
 8001400:	4603      	mov	r3, r0
 8001402:	220c      	movs	r2, #12
 8001404:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001406:	f04f 33ff 	mov.w	r3, #4294967295
 800140a:	e009      	b.n	8001420 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800140c:	4b08      	ldr	r3, [pc, #32]	@ (8001430 <_sbrk+0x64>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001412:	4b07      	ldr	r3, [pc, #28]	@ (8001430 <_sbrk+0x64>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	4a05      	ldr	r2, [pc, #20]	@ (8001430 <_sbrk+0x64>)
 800141c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800141e:	68fb      	ldr	r3, [r7, #12]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20018000 	.word	0x20018000
 800142c:	00000400 	.word	0x00000400
 8001430:	200001c8 	.word	0x200001c8
 8001434:	20000728 	.word	0x20000728

08001438 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <SystemInit+0x20>)
 800143e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001442:	4a05      	ldr	r2, [pc, #20]	@ (8001458 <SystemInit+0x20>)
 8001444:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001448:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800145c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001494 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001460:	f7ff ffea 	bl	8001438 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001464:	480c      	ldr	r0, [pc, #48]	@ (8001498 <LoopForever+0x6>)
  ldr r1, =_edata
 8001466:	490d      	ldr	r1, [pc, #52]	@ (800149c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001468:	4a0d      	ldr	r2, [pc, #52]	@ (80014a0 <LoopForever+0xe>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800146c:	e002      	b.n	8001474 <LoopCopyDataInit>

0800146e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001472:	3304      	adds	r3, #4

08001474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001478:	d3f9      	bcc.n	800146e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800147a:	4a0a      	ldr	r2, [pc, #40]	@ (80014a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800147c:	4c0a      	ldr	r4, [pc, #40]	@ (80014a8 <LoopForever+0x16>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001480:	e001      	b.n	8001486 <LoopFillZerobss>

08001482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001484:	3204      	adds	r2, #4

08001486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001488:	d3fb      	bcc.n	8001482 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800148a:	f004 fcdd 	bl	8005e48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800148e:	f7ff fa21 	bl	80008d4 <main>

08001492 <LoopForever>:

LoopForever:
    b LoopForever
 8001492:	e7fe      	b.n	8001492 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001494:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800149c:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80014a0:	0800814c 	.word	0x0800814c
  ldr r2, =_sbss
 80014a4:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80014a8:	20000724 	.word	0x20000724

080014ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014ac:	e7fe      	b.n	80014ac <ADC1_2_IRQHandler>
	...

080014b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014ba:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <HAL_Init+0x3c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a0b      	ldr	r2, [pc, #44]	@ (80014ec <HAL_Init+0x3c>)
 80014c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014c4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c6:	2003      	movs	r0, #3
 80014c8:	f000 f962 	bl	8001790 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014cc:	2000      	movs	r0, #0
 80014ce:	f000 f80f 	bl	80014f0 <HAL_InitTick>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d002      	beq.n	80014de <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	71fb      	strb	r3, [r7, #7]
 80014dc:	e001      	b.n	80014e2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014de:	f7ff fde3 	bl	80010a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014e2:	79fb      	ldrb	r3, [r7, #7]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40022000 	.word	0x40022000

080014f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014f8:	2300      	movs	r3, #0
 80014fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014fc:	4b17      	ldr	r3, [pc, #92]	@ (800155c <HAL_InitTick+0x6c>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d023      	beq.n	800154c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001504:	4b16      	ldr	r3, [pc, #88]	@ (8001560 <HAL_InitTick+0x70>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b14      	ldr	r3, [pc, #80]	@ (800155c <HAL_InitTick+0x6c>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4619      	mov	r1, r3
 800150e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001512:	fbb3 f3f1 	udiv	r3, r3, r1
 8001516:	fbb2 f3f3 	udiv	r3, r2, r3
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f96d 	bl	80017fa <HAL_SYSTICK_Config>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10f      	bne.n	8001546 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b0f      	cmp	r3, #15
 800152a:	d809      	bhi.n	8001540 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800152c:	2200      	movs	r2, #0
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	f04f 30ff 	mov.w	r0, #4294967295
 8001534:	f000 f937 	bl	80017a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001538:	4a0a      	ldr	r2, [pc, #40]	@ (8001564 <HAL_InitTick+0x74>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	e007      	b.n	8001550 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	73fb      	strb	r3, [r7, #15]
 8001544:	e004      	b.n	8001550 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	73fb      	strb	r3, [r7, #15]
 800154a:	e001      	b.n	8001550 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001550:	7bfb      	ldrb	r3, [r7, #15]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000040 	.word	0x20000040
 8001560:	20000038 	.word	0x20000038
 8001564:	2000003c 	.word	0x2000003c

08001568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800156c:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <HAL_IncTick+0x20>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	4b06      	ldr	r3, [pc, #24]	@ (800158c <HAL_IncTick+0x24>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4413      	add	r3, r2
 8001578:	4a04      	ldr	r2, [pc, #16]	@ (800158c <HAL_IncTick+0x24>)
 800157a:	6013      	str	r3, [r2, #0]
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000040 	.word	0x20000040
 800158c:	200001cc 	.word	0x200001cc

08001590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return uwTick;
 8001594:	4b03      	ldr	r3, [pc, #12]	@ (80015a4 <HAL_GetTick+0x14>)
 8001596:	681b      	ldr	r3, [r3, #0]
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	200001cc 	.word	0x200001cc

080015a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b0:	f7ff ffee 	bl	8001590 <HAL_GetTick>
 80015b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c0:	d005      	beq.n	80015ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015c2:	4b0a      	ldr	r3, [pc, #40]	@ (80015ec <HAL_Delay+0x44>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4413      	add	r3, r2
 80015cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ce:	bf00      	nop
 80015d0:	f7ff ffde 	bl	8001590 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d8f7      	bhi.n	80015d0 <HAL_Delay+0x28>
  {
  }
}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000040 	.word	0x20000040

080015f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001600:	4b0c      	ldr	r3, [pc, #48]	@ (8001634 <__NVIC_SetPriorityGrouping+0x44>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800160c:	4013      	ands	r3, r2
 800160e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001618:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800161c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001622:	4a04      	ldr	r2, [pc, #16]	@ (8001634 <__NVIC_SetPriorityGrouping+0x44>)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	60d3      	str	r3, [r2, #12]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800163c:	4b04      	ldr	r3, [pc, #16]	@ (8001650 <__NVIC_GetPriorityGrouping+0x18>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	0a1b      	lsrs	r3, r3, #8
 8001642:	f003 0307 	and.w	r3, r3, #7
}
 8001646:	4618      	mov	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	2b00      	cmp	r3, #0
 8001664:	db0b      	blt.n	800167e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	f003 021f 	and.w	r2, r3, #31
 800166c:	4907      	ldr	r1, [pc, #28]	@ (800168c <__NVIC_EnableIRQ+0x38>)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	095b      	lsrs	r3, r3, #5
 8001674:	2001      	movs	r0, #1
 8001676:	fa00 f202 	lsl.w	r2, r0, r2
 800167a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000e100 	.word	0xe000e100

08001690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	db0a      	blt.n	80016ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	490c      	ldr	r1, [pc, #48]	@ (80016dc <__NVIC_SetPriority+0x4c>)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	0112      	lsls	r2, r2, #4
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	440b      	add	r3, r1
 80016b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b8:	e00a      	b.n	80016d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4908      	ldr	r1, [pc, #32]	@ (80016e0 <__NVIC_SetPriority+0x50>)
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	3b04      	subs	r3, #4
 80016c8:	0112      	lsls	r2, r2, #4
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	440b      	add	r3, r1
 80016ce:	761a      	strb	r2, [r3, #24]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000e100 	.word	0xe000e100
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b089      	sub	sp, #36	@ 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f1c3 0307 	rsb	r3, r3, #7
 80016fe:	2b04      	cmp	r3, #4
 8001700:	bf28      	it	cs
 8001702:	2304      	movcs	r3, #4
 8001704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3304      	adds	r3, #4
 800170a:	2b06      	cmp	r3, #6
 800170c:	d902      	bls.n	8001714 <NVIC_EncodePriority+0x30>
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3b03      	subs	r3, #3
 8001712:	e000      	b.n	8001716 <NVIC_EncodePriority+0x32>
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	f04f 32ff 	mov.w	r2, #4294967295
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43da      	mvns	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	401a      	ands	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800172c:	f04f 31ff 	mov.w	r1, #4294967295
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	43d9      	mvns	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	4313      	orrs	r3, r2
         );
}
 800173e:	4618      	mov	r0, r3
 8001740:	3724      	adds	r7, #36	@ 0x24
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800175c:	d301      	bcc.n	8001762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800175e:	2301      	movs	r3, #1
 8001760:	e00f      	b.n	8001782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001762:	4a0a      	ldr	r2, [pc, #40]	@ (800178c <SysTick_Config+0x40>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176a:	210f      	movs	r1, #15
 800176c:	f04f 30ff 	mov.w	r0, #4294967295
 8001770:	f7ff ff8e 	bl	8001690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001774:	4b05      	ldr	r3, [pc, #20]	@ (800178c <SysTick_Config+0x40>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177a:	4b04      	ldr	r3, [pc, #16]	@ (800178c <SysTick_Config+0x40>)
 800177c:	2207      	movs	r2, #7
 800177e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	e000e010 	.word	0xe000e010

08001790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ff29 	bl	80015f0 <__NVIC_SetPriorityGrouping>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	4603      	mov	r3, r0
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
 80017b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017b8:	f7ff ff3e 	bl	8001638 <__NVIC_GetPriorityGrouping>
 80017bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	68b9      	ldr	r1, [r7, #8]
 80017c2:	6978      	ldr	r0, [r7, #20]
 80017c4:	f7ff ff8e 	bl	80016e4 <NVIC_EncodePriority>
 80017c8:	4602      	mov	r2, r0
 80017ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff5d 	bl	8001690 <__NVIC_SetPriority>
}
 80017d6:	bf00      	nop
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff31 	bl	8001654 <__NVIC_EnableIRQ>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ffa2 	bl	800174c <SysTick_Config>
 8001808:	4603      	mov	r3, r0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001812:	b480      	push	{r7}
 8001814:	b085      	sub	sp, #20
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d008      	beq.n	800183c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2204      	movs	r2, #4
 800182e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e022      	b.n	8001882 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f022 020e 	bic.w	r2, r2, #14
 800184a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 0201 	bic.w	r2, r2, #1
 800185a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001860:	f003 021c 	and.w	r2, r3, #28
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001868:	2101      	movs	r1, #1
 800186a:	fa01 f202 	lsl.w	r2, r1, r2
 800186e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001880:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001882:	4618      	mov	r0, r3
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b084      	sub	sp, #16
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d005      	beq.n	80018b2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2204      	movs	r2, #4
 80018aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	73fb      	strb	r3, [r7, #15]
 80018b0:	e029      	b.n	8001906 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 020e 	bic.w	r2, r2, #14
 80018c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 0201 	bic.w	r2, r2, #1
 80018d0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d6:	f003 021c 	and.w	r2, r3, #28
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018de:	2101      	movs	r1, #1
 80018e0:	fa01 f202 	lsl.w	r2, r1, r2
 80018e4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	4798      	blx	r3
    }
  }
  return status;
 8001906:	7bfb      	ldrb	r3, [r7, #15]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001910:	b480      	push	{r7}
 8001912:	b087      	sub	sp, #28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800191e:	e17f      	b.n	8001c20 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	2101      	movs	r1, #1
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	fa01 f303 	lsl.w	r3, r1, r3
 800192c:	4013      	ands	r3, r2
 800192e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 8171 	beq.w	8001c1a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	2b01      	cmp	r3, #1
 8001942:	d005      	beq.n	8001950 <HAL_GPIO_Init+0x40>
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d130      	bne.n	80019b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	2203      	movs	r2, #3
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001986:	2201      	movs	r2, #1
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4013      	ands	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	091b      	lsrs	r3, r3, #4
 800199c:	f003 0201 	and.w	r2, r3, #1
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	2b03      	cmp	r3, #3
 80019bc:	d118      	bne.n	80019f0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80019c4:	2201      	movs	r2, #1
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4013      	ands	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	08db      	lsrs	r3, r3, #3
 80019da:	f003 0201 	and.w	r2, r3, #1
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d017      	beq.n	8001a2c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	2203      	movs	r2, #3
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4013      	ands	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d123      	bne.n	8001a80 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	08da      	lsrs	r2, r3, #3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3208      	adds	r2, #8
 8001a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a44:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	220f      	movs	r2, #15
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	691a      	ldr	r2, [r3, #16]
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	08da      	lsrs	r2, r3, #3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3208      	adds	r2, #8
 8001a7a:	6939      	ldr	r1, [r7, #16]
 8001a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 0203 	and.w	r2, r3, #3
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f000 80ac 	beq.w	8001c1a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac2:	4b5f      	ldr	r3, [pc, #380]	@ (8001c40 <HAL_GPIO_Init+0x330>)
 8001ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ac6:	4a5e      	ldr	r2, [pc, #376]	@ (8001c40 <HAL_GPIO_Init+0x330>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ace:	4b5c      	ldr	r3, [pc, #368]	@ (8001c40 <HAL_GPIO_Init+0x330>)
 8001ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ada:	4a5a      	ldr	r2, [pc, #360]	@ (8001c44 <HAL_GPIO_Init+0x334>)
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	089b      	lsrs	r3, r3, #2
 8001ae0:	3302      	adds	r3, #2
 8001ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	220f      	movs	r2, #15
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4013      	ands	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b04:	d025      	beq.n	8001b52 <HAL_GPIO_Init+0x242>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a4f      	ldr	r2, [pc, #316]	@ (8001c48 <HAL_GPIO_Init+0x338>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d01f      	beq.n	8001b4e <HAL_GPIO_Init+0x23e>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a4e      	ldr	r2, [pc, #312]	@ (8001c4c <HAL_GPIO_Init+0x33c>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d019      	beq.n	8001b4a <HAL_GPIO_Init+0x23a>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a4d      	ldr	r2, [pc, #308]	@ (8001c50 <HAL_GPIO_Init+0x340>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d013      	beq.n	8001b46 <HAL_GPIO_Init+0x236>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a4c      	ldr	r2, [pc, #304]	@ (8001c54 <HAL_GPIO_Init+0x344>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d00d      	beq.n	8001b42 <HAL_GPIO_Init+0x232>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a4b      	ldr	r2, [pc, #300]	@ (8001c58 <HAL_GPIO_Init+0x348>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d007      	beq.n	8001b3e <HAL_GPIO_Init+0x22e>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a4a      	ldr	r2, [pc, #296]	@ (8001c5c <HAL_GPIO_Init+0x34c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d101      	bne.n	8001b3a <HAL_GPIO_Init+0x22a>
 8001b36:	2306      	movs	r3, #6
 8001b38:	e00c      	b.n	8001b54 <HAL_GPIO_Init+0x244>
 8001b3a:	2307      	movs	r3, #7
 8001b3c:	e00a      	b.n	8001b54 <HAL_GPIO_Init+0x244>
 8001b3e:	2305      	movs	r3, #5
 8001b40:	e008      	b.n	8001b54 <HAL_GPIO_Init+0x244>
 8001b42:	2304      	movs	r3, #4
 8001b44:	e006      	b.n	8001b54 <HAL_GPIO_Init+0x244>
 8001b46:	2303      	movs	r3, #3
 8001b48:	e004      	b.n	8001b54 <HAL_GPIO_Init+0x244>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e002      	b.n	8001b54 <HAL_GPIO_Init+0x244>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <HAL_GPIO_Init+0x244>
 8001b52:	2300      	movs	r3, #0
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	f002 0203 	and.w	r2, r2, #3
 8001b5a:	0092      	lsls	r2, r2, #2
 8001b5c:	4093      	lsls	r3, r2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b64:	4937      	ldr	r1, [pc, #220]	@ (8001c44 <HAL_GPIO_Init+0x334>)
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	089b      	lsrs	r3, r3, #2
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b72:	4b3b      	ldr	r3, [pc, #236]	@ (8001c60 <HAL_GPIO_Init+0x350>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b96:	4a32      	ldr	r2, [pc, #200]	@ (8001c60 <HAL_GPIO_Init+0x350>)
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b9c:	4b30      	ldr	r3, [pc, #192]	@ (8001c60 <HAL_GPIO_Init+0x350>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bc0:	4a27      	ldr	r2, [pc, #156]	@ (8001c60 <HAL_GPIO_Init+0x350>)
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bc6:	4b26      	ldr	r3, [pc, #152]	@ (8001c60 <HAL_GPIO_Init+0x350>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bea:	4a1d      	ldr	r2, [pc, #116]	@ (8001c60 <HAL_GPIO_Init+0x350>)
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c60 <HAL_GPIO_Init+0x350>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c14:	4a12      	ldr	r2, [pc, #72]	@ (8001c60 <HAL_GPIO_Init+0x350>)
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f47f ae78 	bne.w	8001920 <HAL_GPIO_Init+0x10>
  }
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	371c      	adds	r7, #28
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40010000 	.word	0x40010000
 8001c48:	48000400 	.word	0x48000400
 8001c4c:	48000800 	.word	0x48000800
 8001c50:	48000c00 	.word	0x48000c00
 8001c54:	48001000 	.word	0x48001000
 8001c58:	48001400 	.word	0x48001400
 8001c5c:	48001800 	.word	0x48001800
 8001c60:	40010400 	.word	0x40010400

08001c64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691a      	ldr	r2, [r3, #16]
 8001c74:	887b      	ldrh	r3, [r7, #2]
 8001c76:	4013      	ands	r3, r2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d002      	beq.n	8001c82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	73fb      	strb	r3, [r7, #15]
 8001c80:	e001      	b.n	8001c86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	807b      	strh	r3, [r7, #2]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ca4:	787b      	ldrb	r3, [r7, #1]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001caa:	887a      	ldrh	r2, [r7, #2]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cb0:	e002      	b.n	8001cb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cb2:	887a      	ldrh	r2, [r7, #2]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cd6:	887a      	ldrh	r2, [r7, #2]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	041a      	lsls	r2, r3, #16
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	43d9      	mvns	r1, r3
 8001ce2:	887b      	ldrh	r3, [r7, #2]
 8001ce4:	400b      	ands	r3, r1
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	619a      	str	r2, [r3, #24]
}
 8001cec:	bf00      	nop
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d02:	4b08      	ldr	r3, [pc, #32]	@ (8001d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d04:	695a      	ldr	r2, [r3, #20]
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d006      	beq.n	8001d1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d0e:	4a05      	ldr	r2, [pc, #20]	@ (8001d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fd82 	bl	8000820 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40010400 	.word	0x40010400

08001d28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e08d      	b.n	8001e56 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d106      	bne.n	8001d54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff f9ce 	bl	80010f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2224      	movs	r2, #36	@ 0x24
 8001d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 0201 	bic.w	r2, r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d107      	bne.n	8001da2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	e006      	b.n	8001db0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001dae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d108      	bne.n	8001dca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	e007      	b.n	8001dda <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dd8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001de8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001dfc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691a      	ldr	r2, [r3, #16]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69d9      	ldr	r1, [r3, #28]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a1a      	ldr	r2, [r3, #32]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0201 	orr.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2220      	movs	r2, #32
 8001e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af02      	add	r7, sp, #8
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	4608      	mov	r0, r1
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4603      	mov	r3, r0
 8001e70:	817b      	strh	r3, [r7, #10]
 8001e72:	460b      	mov	r3, r1
 8001e74:	813b      	strh	r3, [r7, #8]
 8001e76:	4613      	mov	r3, r2
 8001e78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b20      	cmp	r3, #32
 8001e84:	f040 80f9 	bne.w	800207a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d002      	beq.n	8001e94 <HAL_I2C_Mem_Write+0x34>
 8001e8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d105      	bne.n	8001ea0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e9a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0ed      	b.n	800207c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d101      	bne.n	8001eae <HAL_I2C_Mem_Write+0x4e>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e0e6      	b.n	800207c <HAL_I2C_Mem_Write+0x21c>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001eb6:	f7ff fb6b 	bl	8001590 <HAL_GetTick>
 8001eba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	2319      	movs	r3, #25
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f000 f955 	bl	8002178 <I2C_WaitOnFlagUntilTimeout>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0d1      	b.n	800207c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2221      	movs	r2, #33	@ 0x21
 8001edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2240      	movs	r2, #64	@ 0x40
 8001ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6a3a      	ldr	r2, [r7, #32]
 8001ef2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001ef8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f00:	88f8      	ldrh	r0, [r7, #6]
 8001f02:	893a      	ldrh	r2, [r7, #8]
 8001f04:	8979      	ldrh	r1, [r7, #10]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	9301      	str	r3, [sp, #4]
 8001f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	4603      	mov	r3, r0
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f000 f8b9 	bl	8002088 <I2C_RequestMemoryWrite>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0a9      	b.n	800207c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	2bff      	cmp	r3, #255	@ 0xff
 8001f30:	d90e      	bls.n	8001f50 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	22ff      	movs	r2, #255	@ 0xff
 8001f36:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	8979      	ldrh	r1, [r7, #10]
 8001f40:	2300      	movs	r3, #0
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 fad9 	bl	8002500 <I2C_TransferConfig>
 8001f4e:	e00f      	b.n	8001f70 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	8979      	ldrh	r1, [r7, #10]
 8001f62:	2300      	movs	r3, #0
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 fac8 	bl	8002500 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f000 f958 	bl	800222a <I2C_WaitOnTXISFlagUntilTimeout>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e07b      	b.n	800207c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f88:	781a      	ldrb	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f94:	1c5a      	adds	r2, r3, #1
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fac:	3b01      	subs	r3, #1
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d034      	beq.n	8002028 <HAL_I2C_Mem_Write+0x1c8>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d130      	bne.n	8002028 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fcc:	2200      	movs	r2, #0
 8001fce:	2180      	movs	r1, #128	@ 0x80
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 f8d1 	bl	8002178 <I2C_WaitOnFlagUntilTimeout>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e04d      	b.n	800207c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	2bff      	cmp	r3, #255	@ 0xff
 8001fe8:	d90e      	bls.n	8002008 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	22ff      	movs	r2, #255	@ 0xff
 8001fee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	8979      	ldrh	r1, [r7, #10]
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 fa7d 	bl	8002500 <I2C_TransferConfig>
 8002006:	e00f      	b.n	8002028 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800200c:	b29a      	uxth	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002016:	b2da      	uxtb	r2, r3
 8002018:	8979      	ldrh	r1, [r7, #10]
 800201a:	2300      	movs	r3, #0
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 fa6c 	bl	8002500 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800202c:	b29b      	uxth	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d19e      	bne.n	8001f70 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 f93e 	bl	80022b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e01a      	b.n	800207c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2220      	movs	r2, #32
 800204c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6859      	ldr	r1, [r3, #4]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4b0a      	ldr	r3, [pc, #40]	@ (8002084 <HAL_I2C_Mem_Write+0x224>)
 800205a:	400b      	ands	r3, r1
 800205c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2220      	movs	r2, #32
 8002062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	e000      	b.n	800207c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800207a:	2302      	movs	r3, #2
  }
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	fe00e800 	.word	0xfe00e800

08002088 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af02      	add	r7, sp, #8
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	4608      	mov	r0, r1
 8002092:	4611      	mov	r1, r2
 8002094:	461a      	mov	r2, r3
 8002096:	4603      	mov	r3, r0
 8002098:	817b      	strh	r3, [r7, #10]
 800209a:	460b      	mov	r3, r1
 800209c:	813b      	strh	r3, [r7, #8]
 800209e:	4613      	mov	r3, r2
 80020a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80020a2:	88fb      	ldrh	r3, [r7, #6]
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	8979      	ldrh	r1, [r7, #10]
 80020a8:	4b20      	ldr	r3, [pc, #128]	@ (800212c <I2C_RequestMemoryWrite+0xa4>)
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 fa25 	bl	8002500 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020b6:	69fa      	ldr	r2, [r7, #28]
 80020b8:	69b9      	ldr	r1, [r7, #24]
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 f8b5 	bl	800222a <I2C_WaitOnTXISFlagUntilTimeout>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e02c      	b.n	8002124 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020ca:	88fb      	ldrh	r3, [r7, #6]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d105      	bne.n	80020dc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020d0:	893b      	ldrh	r3, [r7, #8]
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80020da:	e015      	b.n	8002108 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80020dc:	893b      	ldrh	r3, [r7, #8]
 80020de:	0a1b      	lsrs	r3, r3, #8
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ea:	69fa      	ldr	r2, [r7, #28]
 80020ec:	69b9      	ldr	r1, [r7, #24]
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f89b 	bl	800222a <I2C_WaitOnTXISFlagUntilTimeout>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e012      	b.n	8002124 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020fe:	893b      	ldrh	r3, [r7, #8]
 8002100:	b2da      	uxtb	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	2200      	movs	r2, #0
 8002110:	2180      	movs	r1, #128	@ 0x80
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 f830 	bl	8002178 <I2C_WaitOnFlagUntilTimeout>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	80002000 	.word	0x80002000

08002130 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b02      	cmp	r3, #2
 8002144:	d103      	bne.n	800214e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2200      	movs	r2, #0
 800214c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b01      	cmp	r3, #1
 800215a:	d007      	beq.n	800216c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	699a      	ldr	r2, [r3, #24]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0201 	orr.w	r2, r2, #1
 800216a:	619a      	str	r2, [r3, #24]
  }
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	603b      	str	r3, [r7, #0]
 8002184:	4613      	mov	r3, r2
 8002186:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002188:	e03b      	b.n	8002202 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	6839      	ldr	r1, [r7, #0]
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 f8d6 	bl	8002340 <I2C_IsErrorOccurred>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e041      	b.n	8002222 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a4:	d02d      	beq.n	8002202 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021a6:	f7ff f9f3 	bl	8001590 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d302      	bcc.n	80021bc <I2C_WaitOnFlagUntilTimeout+0x44>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d122      	bne.n	8002202 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699a      	ldr	r2, [r3, #24]
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	4013      	ands	r3, r2
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	bf0c      	ite	eq
 80021cc:	2301      	moveq	r3, #1
 80021ce:	2300      	movne	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d113      	bne.n	8002202 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021de:	f043 0220 	orr.w	r2, r3, #32
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2220      	movs	r2, #32
 80021ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e00f      	b.n	8002222 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	699a      	ldr	r2, [r3, #24]
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	4013      	ands	r3, r2
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	429a      	cmp	r2, r3
 8002210:	bf0c      	ite	eq
 8002212:	2301      	moveq	r3, #1
 8002214:	2300      	movne	r3, #0
 8002216:	b2db      	uxtb	r3, r3
 8002218:	461a      	mov	r2, r3
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	429a      	cmp	r2, r3
 800221e:	d0b4      	beq.n	800218a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b084      	sub	sp, #16
 800222e:	af00      	add	r7, sp, #0
 8002230:	60f8      	str	r0, [r7, #12]
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002236:	e033      	b.n	80022a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	68b9      	ldr	r1, [r7, #8]
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 f87f 	bl	8002340 <I2C_IsErrorOccurred>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e031      	b.n	80022b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002252:	d025      	beq.n	80022a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002254:	f7ff f99c 	bl	8001590 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	429a      	cmp	r2, r3
 8002262:	d302      	bcc.n	800226a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d11a      	bne.n	80022a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b02      	cmp	r3, #2
 8002276:	d013      	beq.n	80022a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227c:	f043 0220 	orr.w	r2, r3, #32
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2220      	movs	r2, #32
 8002288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e007      	b.n	80022b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d1c4      	bne.n	8002238 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022c4:	e02f      	b.n	8002326 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68b9      	ldr	r1, [r7, #8]
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 f838 	bl	8002340 <I2C_IsErrorOccurred>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e02d      	b.n	8002336 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022da:	f7ff f959 	bl	8001590 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d302      	bcc.n	80022f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d11a      	bne.n	8002326 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	f003 0320 	and.w	r3, r3, #32
 80022fa:	2b20      	cmp	r3, #32
 80022fc:	d013      	beq.n	8002326 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002302:	f043 0220 	orr.w	r2, r3, #32
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2220      	movs	r2, #32
 800230e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e007      	b.n	8002336 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	f003 0320 	and.w	r3, r3, #32
 8002330:	2b20      	cmp	r3, #32
 8002332:	d1c8      	bne.n	80022c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08a      	sub	sp, #40	@ 0x28
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	f003 0310 	and.w	r3, r3, #16
 8002368:	2b00      	cmp	r3, #0
 800236a:	d068      	beq.n	800243e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2210      	movs	r2, #16
 8002372:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002374:	e049      	b.n	800240a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237c:	d045      	beq.n	800240a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800237e:	f7ff f907 	bl	8001590 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	429a      	cmp	r2, r3
 800238c:	d302      	bcc.n	8002394 <I2C_IsErrorOccurred+0x54>
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d13a      	bne.n	800240a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800239e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80023a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023b6:	d121      	bne.n	80023fc <I2C_IsErrorOccurred+0xbc>
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80023be:	d01d      	beq.n	80023fc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80023c0:	7cfb      	ldrb	r3, [r7, #19]
 80023c2:	2b20      	cmp	r3, #32
 80023c4:	d01a      	beq.n	80023fc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023d4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80023d6:	f7ff f8db 	bl	8001590 <HAL_GetTick>
 80023da:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023dc:	e00e      	b.n	80023fc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80023de:	f7ff f8d7 	bl	8001590 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b19      	cmp	r3, #25
 80023ea:	d907      	bls.n	80023fc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	f043 0320 	orr.w	r3, r3, #32
 80023f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80023fa:	e006      	b.n	800240a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	f003 0320 	and.w	r3, r3, #32
 8002406:	2b20      	cmp	r3, #32
 8002408:	d1e9      	bne.n	80023de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	f003 0320 	and.w	r3, r3, #32
 8002414:	2b20      	cmp	r3, #32
 8002416:	d003      	beq.n	8002420 <I2C_IsErrorOccurred+0xe0>
 8002418:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0aa      	beq.n	8002376 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002420:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002424:	2b00      	cmp	r3, #0
 8002426:	d103      	bne.n	8002430 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2220      	movs	r2, #32
 800242e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	f043 0304 	orr.w	r3, r3, #4
 8002436:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00b      	beq.n	8002468 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002460:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00b      	beq.n	800248a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	f043 0308 	orr.w	r3, r3, #8
 8002478:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002482:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00b      	beq.n	80024ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	f043 0302 	orr.w	r3, r3, #2
 800249a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80024ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d01c      	beq.n	80024ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f7ff fe3b 	bl	8002130 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6859      	ldr	r1, [r3, #4]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	4b0d      	ldr	r3, [pc, #52]	@ (80024fc <I2C_IsErrorOccurred+0x1bc>)
 80024c6:	400b      	ands	r3, r1
 80024c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	431a      	orrs	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2220      	movs	r2, #32
 80024da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80024ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3728      	adds	r7, #40	@ 0x28
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	fe00e800 	.word	0xfe00e800

08002500 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002500:	b480      	push	{r7}
 8002502:	b087      	sub	sp, #28
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	607b      	str	r3, [r7, #4]
 800250a:	460b      	mov	r3, r1
 800250c:	817b      	strh	r3, [r7, #10]
 800250e:	4613      	mov	r3, r2
 8002510:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002512:	897b      	ldrh	r3, [r7, #10]
 8002514:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002518:	7a7b      	ldrb	r3, [r7, #9]
 800251a:	041b      	lsls	r3, r3, #16
 800251c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002520:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002526:	6a3b      	ldr	r3, [r7, #32]
 8002528:	4313      	orrs	r3, r2
 800252a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800252e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	6a3b      	ldr	r3, [r7, #32]
 8002538:	0d5b      	lsrs	r3, r3, #21
 800253a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800253e:	4b08      	ldr	r3, [pc, #32]	@ (8002560 <I2C_TransferConfig+0x60>)
 8002540:	430b      	orrs	r3, r1
 8002542:	43db      	mvns	r3, r3
 8002544:	ea02 0103 	and.w	r1, r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	430a      	orrs	r2, r1
 8002550:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002552:	bf00      	nop
 8002554:	371c      	adds	r7, #28
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	03ff63ff 	.word	0x03ff63ff

08002564 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b20      	cmp	r3, #32
 8002578:	d138      	bne.n	80025ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002584:	2302      	movs	r3, #2
 8002586:	e032      	b.n	80025ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2224      	movs	r2, #36	@ 0x24
 8002594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0201 	bic.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80025b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6819      	ldr	r1, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0201 	orr.w	r2, r2, #1
 80025d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	e000      	b.n	80025ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025ec:	2302      	movs	r3, #2
  }
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b085      	sub	sp, #20
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b20      	cmp	r3, #32
 800260e:	d139      	bne.n	8002684 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800261a:	2302      	movs	r3, #2
 800261c:	e033      	b.n	8002686 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2224      	movs	r2, #36	@ 0x24
 800262a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0201 	bic.w	r2, r2, #1
 800263c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800264c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	021b      	lsls	r3, r3, #8
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	4313      	orrs	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 0201 	orr.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2220      	movs	r2, #32
 8002674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	e000      	b.n	8002686 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002684:	2302      	movs	r3, #2
  }
}
 8002686:	4618      	mov	r0, r3
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002698:	4b04      	ldr	r3, [pc, #16]	@ (80026ac <HAL_PWREx_GetVoltageRange+0x18>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	40007000 	.word	0x40007000

080026b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026be:	d130      	bne.n	8002722 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026c0:	4b23      	ldr	r3, [pc, #140]	@ (8002750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026cc:	d038      	beq.n	8002740 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026ce:	4b20      	ldr	r3, [pc, #128]	@ (8002750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026de:	4b1d      	ldr	r3, [pc, #116]	@ (8002754 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2232      	movs	r2, #50	@ 0x32
 80026e4:	fb02 f303 	mul.w	r3, r2, r3
 80026e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002758 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026ea:	fba2 2303 	umull	r2, r3, r2, r3
 80026ee:	0c9b      	lsrs	r3, r3, #18
 80026f0:	3301      	adds	r3, #1
 80026f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026f4:	e002      	b.n	80026fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	3b01      	subs	r3, #1
 80026fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026fc:	4b14      	ldr	r3, [pc, #80]	@ (8002750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002704:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002708:	d102      	bne.n	8002710 <HAL_PWREx_ControlVoltageScaling+0x60>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1f2      	bne.n	80026f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002710:	4b0f      	ldr	r3, [pc, #60]	@ (8002750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002718:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800271c:	d110      	bne.n	8002740 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e00f      	b.n	8002742 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002722:	4b0b      	ldr	r3, [pc, #44]	@ (8002750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800272a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800272e:	d007      	beq.n	8002740 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002730:	4b07      	ldr	r3, [pc, #28]	@ (8002750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002738:	4a05      	ldr	r2, [pc, #20]	@ (8002750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800273a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800273e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40007000 	.word	0x40007000
 8002754:	20000038 	.word	0x20000038
 8002758:	431bde83 	.word	0x431bde83

0800275c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b088      	sub	sp, #32
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e3ca      	b.n	8002f04 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800276e:	4b97      	ldr	r3, [pc, #604]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 030c 	and.w	r3, r3, #12
 8002776:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002778:	4b94      	ldr	r3, [pc, #592]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f003 0303 	and.w	r3, r3, #3
 8002780:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0310 	and.w	r3, r3, #16
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 80e4 	beq.w	8002958 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d007      	beq.n	80027a6 <HAL_RCC_OscConfig+0x4a>
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	2b0c      	cmp	r3, #12
 800279a:	f040 808b 	bne.w	80028b4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	f040 8087 	bne.w	80028b4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027a6:	4b89      	ldr	r3, [pc, #548]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d005      	beq.n	80027be <HAL_RCC_OscConfig+0x62>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e3a2      	b.n	8002f04 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1a      	ldr	r2, [r3, #32]
 80027c2:	4b82      	ldr	r3, [pc, #520]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d004      	beq.n	80027d8 <HAL_RCC_OscConfig+0x7c>
 80027ce:	4b7f      	ldr	r3, [pc, #508]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027d6:	e005      	b.n	80027e4 <HAL_RCC_OscConfig+0x88>
 80027d8:	4b7c      	ldr	r3, [pc, #496]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 80027da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027de:	091b      	lsrs	r3, r3, #4
 80027e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d223      	bcs.n	8002830 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 fd55 	bl	800329c <RCC_SetFlashLatencyFromMSIRange>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e383      	b.n	8002f04 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027fc:	4b73      	ldr	r3, [pc, #460]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a72      	ldr	r2, [pc, #456]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 8002802:	f043 0308 	orr.w	r3, r3, #8
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	4b70      	ldr	r3, [pc, #448]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	496d      	ldr	r1, [pc, #436]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 8002816:	4313      	orrs	r3, r2
 8002818:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800281a:	4b6c      	ldr	r3, [pc, #432]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	021b      	lsls	r3, r3, #8
 8002828:	4968      	ldr	r1, [pc, #416]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 800282a:	4313      	orrs	r3, r2
 800282c:	604b      	str	r3, [r1, #4]
 800282e:	e025      	b.n	800287c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002830:	4b66      	ldr	r3, [pc, #408]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a65      	ldr	r2, [pc, #404]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 8002836:	f043 0308 	orr.w	r3, r3, #8
 800283a:	6013      	str	r3, [r2, #0]
 800283c:	4b63      	ldr	r3, [pc, #396]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	4960      	ldr	r1, [pc, #384]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 800284a:	4313      	orrs	r3, r2
 800284c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800284e:	4b5f      	ldr	r3, [pc, #380]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	021b      	lsls	r3, r3, #8
 800285c:	495b      	ldr	r1, [pc, #364]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 800285e:	4313      	orrs	r3, r2
 8002860:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d109      	bne.n	800287c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	4618      	mov	r0, r3
 800286e:	f000 fd15 	bl	800329c <RCC_SetFlashLatencyFromMSIRange>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e343      	b.n	8002f04 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800287c:	f000 fc4a 	bl	8003114 <HAL_RCC_GetSysClockFreq>
 8002880:	4602      	mov	r2, r0
 8002882:	4b52      	ldr	r3, [pc, #328]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	091b      	lsrs	r3, r3, #4
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	4950      	ldr	r1, [pc, #320]	@ (80029d0 <HAL_RCC_OscConfig+0x274>)
 800288e:	5ccb      	ldrb	r3, [r1, r3]
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
 8002898:	4a4e      	ldr	r2, [pc, #312]	@ (80029d4 <HAL_RCC_OscConfig+0x278>)
 800289a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800289c:	4b4e      	ldr	r3, [pc, #312]	@ (80029d8 <HAL_RCC_OscConfig+0x27c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fe fe25 	bl	80014f0 <HAL_InitTick>
 80028a6:	4603      	mov	r3, r0
 80028a8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d052      	beq.n	8002956 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	e327      	b.n	8002f04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d032      	beq.n	8002922 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028bc:	4b43      	ldr	r3, [pc, #268]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a42      	ldr	r2, [pc, #264]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 80028c2:	f043 0301 	orr.w	r3, r3, #1
 80028c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028c8:	f7fe fe62 	bl	8001590 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028d0:	f7fe fe5e 	bl	8001590 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e310      	b.n	8002f04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028e2:	4b3a      	ldr	r3, [pc, #232]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0f0      	beq.n	80028d0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028ee:	4b37      	ldr	r3, [pc, #220]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a36      	ldr	r2, [pc, #216]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 80028f4:	f043 0308 	orr.w	r3, r3, #8
 80028f8:	6013      	str	r3, [r2, #0]
 80028fa:	4b34      	ldr	r3, [pc, #208]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	4931      	ldr	r1, [pc, #196]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 8002908:	4313      	orrs	r3, r2
 800290a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800290c:	4b2f      	ldr	r3, [pc, #188]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	021b      	lsls	r3, r3, #8
 800291a:	492c      	ldr	r1, [pc, #176]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 800291c:	4313      	orrs	r3, r2
 800291e:	604b      	str	r3, [r1, #4]
 8002920:	e01a      	b.n	8002958 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002922:	4b2a      	ldr	r3, [pc, #168]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a29      	ldr	r2, [pc, #164]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 8002928:	f023 0301 	bic.w	r3, r3, #1
 800292c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800292e:	f7fe fe2f 	bl	8001590 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002936:	f7fe fe2b 	bl	8001590 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e2dd      	b.n	8002f04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002948:	4b20      	ldr	r3, [pc, #128]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1f0      	bne.n	8002936 <HAL_RCC_OscConfig+0x1da>
 8002954:	e000      	b.n	8002958 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002956:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d074      	beq.n	8002a4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	2b08      	cmp	r3, #8
 8002968:	d005      	beq.n	8002976 <HAL_RCC_OscConfig+0x21a>
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	2b0c      	cmp	r3, #12
 800296e:	d10e      	bne.n	800298e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	2b03      	cmp	r3, #3
 8002974:	d10b      	bne.n	800298e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002976:	4b15      	ldr	r3, [pc, #84]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d064      	beq.n	8002a4c <HAL_RCC_OscConfig+0x2f0>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d160      	bne.n	8002a4c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e2ba      	b.n	8002f04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002996:	d106      	bne.n	80029a6 <HAL_RCC_OscConfig+0x24a>
 8002998:	4b0c      	ldr	r3, [pc, #48]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a0b      	ldr	r2, [pc, #44]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 800299e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	e026      	b.n	80029f4 <HAL_RCC_OscConfig+0x298>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029ae:	d115      	bne.n	80029dc <HAL_RCC_OscConfig+0x280>
 80029b0:	4b06      	ldr	r3, [pc, #24]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a05      	ldr	r2, [pc, #20]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 80029b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029ba:	6013      	str	r3, [r2, #0]
 80029bc:	4b03      	ldr	r3, [pc, #12]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a02      	ldr	r2, [pc, #8]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 80029c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029c6:	6013      	str	r3, [r2, #0]
 80029c8:	e014      	b.n	80029f4 <HAL_RCC_OscConfig+0x298>
 80029ca:	bf00      	nop
 80029cc:	40021000 	.word	0x40021000
 80029d0:	08006d5c 	.word	0x08006d5c
 80029d4:	20000038 	.word	0x20000038
 80029d8:	2000003c 	.word	0x2000003c
 80029dc:	4ba0      	ldr	r3, [pc, #640]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a9f      	ldr	r2, [pc, #636]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 80029e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029e6:	6013      	str	r3, [r2, #0]
 80029e8:	4b9d      	ldr	r3, [pc, #628]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a9c      	ldr	r2, [pc, #624]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 80029ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d013      	beq.n	8002a24 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fc:	f7fe fdc8 	bl	8001590 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a04:	f7fe fdc4 	bl	8001590 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b64      	cmp	r3, #100	@ 0x64
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e276      	b.n	8002f04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a16:	4b92      	ldr	r3, [pc, #584]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCC_OscConfig+0x2a8>
 8002a22:	e014      	b.n	8002a4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a24:	f7fe fdb4 	bl	8001590 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a2c:	f7fe fdb0 	bl	8001590 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b64      	cmp	r3, #100	@ 0x64
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e262      	b.n	8002f04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a3e:	4b88      	ldr	r3, [pc, #544]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f0      	bne.n	8002a2c <HAL_RCC_OscConfig+0x2d0>
 8002a4a:	e000      	b.n	8002a4e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d060      	beq.n	8002b1c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d005      	beq.n	8002a6c <HAL_RCC_OscConfig+0x310>
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	2b0c      	cmp	r3, #12
 8002a64:	d119      	bne.n	8002a9a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d116      	bne.n	8002a9a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a6c:	4b7c      	ldr	r3, [pc, #496]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d005      	beq.n	8002a84 <HAL_RCC_OscConfig+0x328>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e23f      	b.n	8002f04 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a84:	4b76      	ldr	r3, [pc, #472]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	061b      	lsls	r3, r3, #24
 8002a92:	4973      	ldr	r1, [pc, #460]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a98:	e040      	b.n	8002b1c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d023      	beq.n	8002aea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aa2:	4b6f      	ldr	r3, [pc, #444]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a6e      	ldr	r2, [pc, #440]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 8002aa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aae:	f7fe fd6f 	bl	8001590 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ab6:	f7fe fd6b 	bl	8001590 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e21d      	b.n	8002f04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ac8:	4b65      	ldr	r3, [pc, #404]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad4:	4b62      	ldr	r3, [pc, #392]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	061b      	lsls	r3, r3, #24
 8002ae2:	495f      	ldr	r1, [pc, #380]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	604b      	str	r3, [r1, #4]
 8002ae8:	e018      	b.n	8002b1c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aea:	4b5d      	ldr	r3, [pc, #372]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a5c      	ldr	r2, [pc, #368]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 8002af0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af6:	f7fe fd4b 	bl	8001590 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002afe:	f7fe fd47 	bl	8001590 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e1f9      	b.n	8002f04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b10:	4b53      	ldr	r3, [pc, #332]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1f0      	bne.n	8002afe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d03c      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d01c      	beq.n	8002b6a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b30:	4b4b      	ldr	r3, [pc, #300]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 8002b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b36:	4a4a      	ldr	r2, [pc, #296]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b40:	f7fe fd26 	bl	8001590 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b48:	f7fe fd22 	bl	8001590 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e1d4      	b.n	8002f04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b5a:	4b41      	ldr	r3, [pc, #260]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 8002b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0ef      	beq.n	8002b48 <HAL_RCC_OscConfig+0x3ec>
 8002b68:	e01b      	b.n	8002ba2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b6a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 8002b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b70:	4a3b      	ldr	r2, [pc, #236]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 8002b72:	f023 0301 	bic.w	r3, r3, #1
 8002b76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7a:	f7fe fd09 	bl	8001590 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b82:	f7fe fd05 	bl	8001590 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e1b7      	b.n	8002f04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b94:	4b32      	ldr	r3, [pc, #200]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 8002b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1ef      	bne.n	8002b82 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 80a6 	beq.w	8002cfc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 8002bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10d      	bne.n	8002bdc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bc0:	4b27      	ldr	r3, [pc, #156]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 8002bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc4:	4a26      	ldr	r2, [pc, #152]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 8002bc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bca:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bcc:	4b24      	ldr	r3, [pc, #144]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 8002bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bdc:	4b21      	ldr	r3, [pc, #132]	@ (8002c64 <HAL_RCC_OscConfig+0x508>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d118      	bne.n	8002c1a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002be8:	4b1e      	ldr	r3, [pc, #120]	@ (8002c64 <HAL_RCC_OscConfig+0x508>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a1d      	ldr	r2, [pc, #116]	@ (8002c64 <HAL_RCC_OscConfig+0x508>)
 8002bee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bf2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bf4:	f7fe fccc 	bl	8001590 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bfc:	f7fe fcc8 	bl	8001590 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e17a      	b.n	8002f04 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c0e:	4b15      	ldr	r3, [pc, #84]	@ (8002c64 <HAL_RCC_OscConfig+0x508>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d108      	bne.n	8002c34 <HAL_RCC_OscConfig+0x4d8>
 8002c22:	4b0f      	ldr	r3, [pc, #60]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 8002c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c28:	4a0d      	ldr	r2, [pc, #52]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c32:	e029      	b.n	8002c88 <HAL_RCC_OscConfig+0x52c>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	2b05      	cmp	r3, #5
 8002c3a:	d115      	bne.n	8002c68 <HAL_RCC_OscConfig+0x50c>
 8002c3c:	4b08      	ldr	r3, [pc, #32]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 8002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c42:	4a07      	ldr	r2, [pc, #28]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 8002c44:	f043 0304 	orr.w	r3, r3, #4
 8002c48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c4c:	4b04      	ldr	r3, [pc, #16]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 8002c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c52:	4a03      	ldr	r2, [pc, #12]	@ (8002c60 <HAL_RCC_OscConfig+0x504>)
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c5c:	e014      	b.n	8002c88 <HAL_RCC_OscConfig+0x52c>
 8002c5e:	bf00      	nop
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40007000 	.word	0x40007000
 8002c68:	4b9c      	ldr	r3, [pc, #624]	@ (8002edc <HAL_RCC_OscConfig+0x780>)
 8002c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c6e:	4a9b      	ldr	r2, [pc, #620]	@ (8002edc <HAL_RCC_OscConfig+0x780>)
 8002c70:	f023 0301 	bic.w	r3, r3, #1
 8002c74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c78:	4b98      	ldr	r3, [pc, #608]	@ (8002edc <HAL_RCC_OscConfig+0x780>)
 8002c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c7e:	4a97      	ldr	r2, [pc, #604]	@ (8002edc <HAL_RCC_OscConfig+0x780>)
 8002c80:	f023 0304 	bic.w	r3, r3, #4
 8002c84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d016      	beq.n	8002cbe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c90:	f7fe fc7e 	bl	8001590 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c96:	e00a      	b.n	8002cae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c98:	f7fe fc7a 	bl	8001590 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e12a      	b.n	8002f04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cae:	4b8b      	ldr	r3, [pc, #556]	@ (8002edc <HAL_RCC_OscConfig+0x780>)
 8002cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0ed      	beq.n	8002c98 <HAL_RCC_OscConfig+0x53c>
 8002cbc:	e015      	b.n	8002cea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbe:	f7fe fc67 	bl	8001590 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cc4:	e00a      	b.n	8002cdc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc6:	f7fe fc63 	bl	8001590 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e113      	b.n	8002f04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cdc:	4b7f      	ldr	r3, [pc, #508]	@ (8002edc <HAL_RCC_OscConfig+0x780>)
 8002cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1ed      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cea:	7ffb      	ldrb	r3, [r7, #31]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d105      	bne.n	8002cfc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf0:	4b7a      	ldr	r3, [pc, #488]	@ (8002edc <HAL_RCC_OscConfig+0x780>)
 8002cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf4:	4a79      	ldr	r2, [pc, #484]	@ (8002edc <HAL_RCC_OscConfig+0x780>)
 8002cf6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cfa:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 80fe 	beq.w	8002f02 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	f040 80d0 	bne.w	8002eb0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d10:	4b72      	ldr	r3, [pc, #456]	@ (8002edc <HAL_RCC_OscConfig+0x780>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f003 0203 	and.w	r2, r3, #3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d130      	bne.n	8002d86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d127      	bne.n	8002d86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d40:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d11f      	bne.n	8002d86 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d50:	2a07      	cmp	r2, #7
 8002d52:	bf14      	ite	ne
 8002d54:	2201      	movne	r2, #1
 8002d56:	2200      	moveq	r2, #0
 8002d58:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d113      	bne.n	8002d86 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d68:	085b      	lsrs	r3, r3, #1
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d109      	bne.n	8002d86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7c:	085b      	lsrs	r3, r3, #1
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d06e      	beq.n	8002e64 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	2b0c      	cmp	r3, #12
 8002d8a:	d069      	beq.n	8002e60 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d8c:	4b53      	ldr	r3, [pc, #332]	@ (8002edc <HAL_RCC_OscConfig+0x780>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d105      	bne.n	8002da4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d98:	4b50      	ldr	r3, [pc, #320]	@ (8002edc <HAL_RCC_OscConfig+0x780>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0ad      	b.n	8002f04 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002da8:	4b4c      	ldr	r3, [pc, #304]	@ (8002edc <HAL_RCC_OscConfig+0x780>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a4b      	ldr	r2, [pc, #300]	@ (8002edc <HAL_RCC_OscConfig+0x780>)
 8002dae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002db2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002db4:	f7fe fbec 	bl	8001590 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dbc:	f7fe fbe8 	bl	8001590 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e09a      	b.n	8002f04 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dce:	4b43      	ldr	r3, [pc, #268]	@ (8002edc <HAL_RCC_OscConfig+0x780>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dda:	4b40      	ldr	r3, [pc, #256]	@ (8002edc <HAL_RCC_OscConfig+0x780>)
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	4b40      	ldr	r3, [pc, #256]	@ (8002ee0 <HAL_RCC_OscConfig+0x784>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002dea:	3a01      	subs	r2, #1
 8002dec:	0112      	lsls	r2, r2, #4
 8002dee:	4311      	orrs	r1, r2
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002df4:	0212      	lsls	r2, r2, #8
 8002df6:	4311      	orrs	r1, r2
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002dfc:	0852      	lsrs	r2, r2, #1
 8002dfe:	3a01      	subs	r2, #1
 8002e00:	0552      	lsls	r2, r2, #21
 8002e02:	4311      	orrs	r1, r2
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e08:	0852      	lsrs	r2, r2, #1
 8002e0a:	3a01      	subs	r2, #1
 8002e0c:	0652      	lsls	r2, r2, #25
 8002e0e:	4311      	orrs	r1, r2
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e14:	0912      	lsrs	r2, r2, #4
 8002e16:	0452      	lsls	r2, r2, #17
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	4930      	ldr	r1, [pc, #192]	@ (8002edc <HAL_RCC_OscConfig+0x780>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e20:	4b2e      	ldr	r3, [pc, #184]	@ (8002edc <HAL_RCC_OscConfig+0x780>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a2d      	ldr	r2, [pc, #180]	@ (8002edc <HAL_RCC_OscConfig+0x780>)
 8002e26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8002edc <HAL_RCC_OscConfig+0x780>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	4a2a      	ldr	r2, [pc, #168]	@ (8002edc <HAL_RCC_OscConfig+0x780>)
 8002e32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e38:	f7fe fbaa 	bl	8001590 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e40:	f7fe fba6 	bl	8001590 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e058      	b.n	8002f04 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e52:	4b22      	ldr	r3, [pc, #136]	@ (8002edc <HAL_RCC_OscConfig+0x780>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e5e:	e050      	b.n	8002f02 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e04f      	b.n	8002f04 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e64:	4b1d      	ldr	r3, [pc, #116]	@ (8002edc <HAL_RCC_OscConfig+0x780>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d148      	bne.n	8002f02 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e70:	4b1a      	ldr	r3, [pc, #104]	@ (8002edc <HAL_RCC_OscConfig+0x780>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a19      	ldr	r2, [pc, #100]	@ (8002edc <HAL_RCC_OscConfig+0x780>)
 8002e76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e7a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e7c:	4b17      	ldr	r3, [pc, #92]	@ (8002edc <HAL_RCC_OscConfig+0x780>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	4a16      	ldr	r2, [pc, #88]	@ (8002edc <HAL_RCC_OscConfig+0x780>)
 8002e82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e86:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e88:	f7fe fb82 	bl	8001590 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e90:	f7fe fb7e 	bl	8001590 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e030      	b.n	8002f04 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8002edc <HAL_RCC_OscConfig+0x780>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCC_OscConfig+0x734>
 8002eae:	e028      	b.n	8002f02 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	2b0c      	cmp	r3, #12
 8002eb4:	d023      	beq.n	8002efe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb6:	4b09      	ldr	r3, [pc, #36]	@ (8002edc <HAL_RCC_OscConfig+0x780>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a08      	ldr	r2, [pc, #32]	@ (8002edc <HAL_RCC_OscConfig+0x780>)
 8002ebc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec2:	f7fe fb65 	bl	8001590 <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ec8:	e00c      	b.n	8002ee4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eca:	f7fe fb61 	bl	8001590 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d905      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e013      	b.n	8002f04 <HAL_RCC_OscConfig+0x7a8>
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ee4:	4b09      	ldr	r3, [pc, #36]	@ (8002f0c <HAL_RCC_OscConfig+0x7b0>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1ec      	bne.n	8002eca <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ef0:	4b06      	ldr	r3, [pc, #24]	@ (8002f0c <HAL_RCC_OscConfig+0x7b0>)
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	4905      	ldr	r1, [pc, #20]	@ (8002f0c <HAL_RCC_OscConfig+0x7b0>)
 8002ef6:	4b06      	ldr	r3, [pc, #24]	@ (8002f10 <HAL_RCC_OscConfig+0x7b4>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	60cb      	str	r3, [r1, #12]
 8002efc:	e001      	b.n	8002f02 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3720      	adds	r7, #32
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	feeefffc 	.word	0xfeeefffc

08002f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e0e7      	b.n	80030f8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f28:	4b75      	ldr	r3, [pc, #468]	@ (8003100 <HAL_RCC_ClockConfig+0x1ec>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d910      	bls.n	8002f58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f36:	4b72      	ldr	r3, [pc, #456]	@ (8003100 <HAL_RCC_ClockConfig+0x1ec>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f023 0207 	bic.w	r2, r3, #7
 8002f3e:	4970      	ldr	r1, [pc, #448]	@ (8003100 <HAL_RCC_ClockConfig+0x1ec>)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f46:	4b6e      	ldr	r3, [pc, #440]	@ (8003100 <HAL_RCC_ClockConfig+0x1ec>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d001      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0cf      	b.n	80030f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d010      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	4b66      	ldr	r3, [pc, #408]	@ (8003104 <HAL_RCC_ClockConfig+0x1f0>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d908      	bls.n	8002f86 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f74:	4b63      	ldr	r3, [pc, #396]	@ (8003104 <HAL_RCC_ClockConfig+0x1f0>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	4960      	ldr	r1, [pc, #384]	@ (8003104 <HAL_RCC_ClockConfig+0x1f0>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d04c      	beq.n	800302c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	d107      	bne.n	8002faa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f9a:	4b5a      	ldr	r3, [pc, #360]	@ (8003104 <HAL_RCC_ClockConfig+0x1f0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d121      	bne.n	8002fea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e0a6      	b.n	80030f8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d107      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fb2:	4b54      	ldr	r3, [pc, #336]	@ (8003104 <HAL_RCC_ClockConfig+0x1f0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d115      	bne.n	8002fea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e09a      	b.n	80030f8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d107      	bne.n	8002fda <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fca:	4b4e      	ldr	r3, [pc, #312]	@ (8003104 <HAL_RCC_ClockConfig+0x1f0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d109      	bne.n	8002fea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e08e      	b.n	80030f8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fda:	4b4a      	ldr	r3, [pc, #296]	@ (8003104 <HAL_RCC_ClockConfig+0x1f0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e086      	b.n	80030f8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fea:	4b46      	ldr	r3, [pc, #280]	@ (8003104 <HAL_RCC_ClockConfig+0x1f0>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f023 0203 	bic.w	r2, r3, #3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	4943      	ldr	r1, [pc, #268]	@ (8003104 <HAL_RCC_ClockConfig+0x1f0>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ffc:	f7fe fac8 	bl	8001590 <HAL_GetTick>
 8003000:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003002:	e00a      	b.n	800301a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003004:	f7fe fac4 	bl	8001590 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e06e      	b.n	80030f8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301a:	4b3a      	ldr	r3, [pc, #232]	@ (8003104 <HAL_RCC_ClockConfig+0x1f0>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 020c 	and.w	r2, r3, #12
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	429a      	cmp	r2, r3
 800302a:	d1eb      	bne.n	8003004 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d010      	beq.n	800305a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	4b31      	ldr	r3, [pc, #196]	@ (8003104 <HAL_RCC_ClockConfig+0x1f0>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003044:	429a      	cmp	r2, r3
 8003046:	d208      	bcs.n	800305a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003048:	4b2e      	ldr	r3, [pc, #184]	@ (8003104 <HAL_RCC_ClockConfig+0x1f0>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	492b      	ldr	r1, [pc, #172]	@ (8003104 <HAL_RCC_ClockConfig+0x1f0>)
 8003056:	4313      	orrs	r3, r2
 8003058:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800305a:	4b29      	ldr	r3, [pc, #164]	@ (8003100 <HAL_RCC_ClockConfig+0x1ec>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d210      	bcs.n	800308a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003068:	4b25      	ldr	r3, [pc, #148]	@ (8003100 <HAL_RCC_ClockConfig+0x1ec>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f023 0207 	bic.w	r2, r3, #7
 8003070:	4923      	ldr	r1, [pc, #140]	@ (8003100 <HAL_RCC_ClockConfig+0x1ec>)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	4313      	orrs	r3, r2
 8003076:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003078:	4b21      	ldr	r3, [pc, #132]	@ (8003100 <HAL_RCC_ClockConfig+0x1ec>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d001      	beq.n	800308a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e036      	b.n	80030f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	2b00      	cmp	r3, #0
 8003094:	d008      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003096:	4b1b      	ldr	r3, [pc, #108]	@ (8003104 <HAL_RCC_ClockConfig+0x1f0>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	4918      	ldr	r1, [pc, #96]	@ (8003104 <HAL_RCC_ClockConfig+0x1f0>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d009      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030b4:	4b13      	ldr	r3, [pc, #76]	@ (8003104 <HAL_RCC_ClockConfig+0x1f0>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4910      	ldr	r1, [pc, #64]	@ (8003104 <HAL_RCC_ClockConfig+0x1f0>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030c8:	f000 f824 	bl	8003114 <HAL_RCC_GetSysClockFreq>
 80030cc:	4602      	mov	r2, r0
 80030ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003104 <HAL_RCC_ClockConfig+0x1f0>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	091b      	lsrs	r3, r3, #4
 80030d4:	f003 030f 	and.w	r3, r3, #15
 80030d8:	490b      	ldr	r1, [pc, #44]	@ (8003108 <HAL_RCC_ClockConfig+0x1f4>)
 80030da:	5ccb      	ldrb	r3, [r1, r3]
 80030dc:	f003 031f 	and.w	r3, r3, #31
 80030e0:	fa22 f303 	lsr.w	r3, r2, r3
 80030e4:	4a09      	ldr	r2, [pc, #36]	@ (800310c <HAL_RCC_ClockConfig+0x1f8>)
 80030e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030e8:	4b09      	ldr	r3, [pc, #36]	@ (8003110 <HAL_RCC_ClockConfig+0x1fc>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fe f9ff 	bl	80014f0 <HAL_InitTick>
 80030f2:	4603      	mov	r3, r0
 80030f4:	72fb      	strb	r3, [r7, #11]

  return status;
 80030f6:	7afb      	ldrb	r3, [r7, #11]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40022000 	.word	0x40022000
 8003104:	40021000 	.word	0x40021000
 8003108:	08006d5c 	.word	0x08006d5c
 800310c:	20000038 	.word	0x20000038
 8003110:	2000003c 	.word	0x2000003c

08003114 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003114:	b480      	push	{r7}
 8003116:	b089      	sub	sp, #36	@ 0x24
 8003118:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800311a:	2300      	movs	r3, #0
 800311c:	61fb      	str	r3, [r7, #28]
 800311e:	2300      	movs	r3, #0
 8003120:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003122:	4b3e      	ldr	r3, [pc, #248]	@ (800321c <HAL_RCC_GetSysClockFreq+0x108>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800312c:	4b3b      	ldr	r3, [pc, #236]	@ (800321c <HAL_RCC_GetSysClockFreq+0x108>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_RCC_GetSysClockFreq+0x34>
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	2b0c      	cmp	r3, #12
 8003140:	d121      	bne.n	8003186 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d11e      	bne.n	8003186 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003148:	4b34      	ldr	r3, [pc, #208]	@ (800321c <HAL_RCC_GetSysClockFreq+0x108>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0308 	and.w	r3, r3, #8
 8003150:	2b00      	cmp	r3, #0
 8003152:	d107      	bne.n	8003164 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003154:	4b31      	ldr	r3, [pc, #196]	@ (800321c <HAL_RCC_GetSysClockFreq+0x108>)
 8003156:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800315a:	0a1b      	lsrs	r3, r3, #8
 800315c:	f003 030f 	and.w	r3, r3, #15
 8003160:	61fb      	str	r3, [r7, #28]
 8003162:	e005      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003164:	4b2d      	ldr	r3, [pc, #180]	@ (800321c <HAL_RCC_GetSysClockFreq+0x108>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	091b      	lsrs	r3, r3, #4
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003170:	4a2b      	ldr	r2, [pc, #172]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003178:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10d      	bne.n	800319c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003184:	e00a      	b.n	800319c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	2b04      	cmp	r3, #4
 800318a:	d102      	bne.n	8003192 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800318c:	4b25      	ldr	r3, [pc, #148]	@ (8003224 <HAL_RCC_GetSysClockFreq+0x110>)
 800318e:	61bb      	str	r3, [r7, #24]
 8003190:	e004      	b.n	800319c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	2b08      	cmp	r3, #8
 8003196:	d101      	bne.n	800319c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003198:	4b23      	ldr	r3, [pc, #140]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x114>)
 800319a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	2b0c      	cmp	r3, #12
 80031a0:	d134      	bne.n	800320c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031a2:	4b1e      	ldr	r3, [pc, #120]	@ (800321c <HAL_RCC_GetSysClockFreq+0x108>)
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d003      	beq.n	80031ba <HAL_RCC_GetSysClockFreq+0xa6>
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	d003      	beq.n	80031c0 <HAL_RCC_GetSysClockFreq+0xac>
 80031b8:	e005      	b.n	80031c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003224 <HAL_RCC_GetSysClockFreq+0x110>)
 80031bc:	617b      	str	r3, [r7, #20]
      break;
 80031be:	e005      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031c0:	4b19      	ldr	r3, [pc, #100]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x114>)
 80031c2:	617b      	str	r3, [r7, #20]
      break;
 80031c4:	e002      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	617b      	str	r3, [r7, #20]
      break;
 80031ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031cc:	4b13      	ldr	r3, [pc, #76]	@ (800321c <HAL_RCC_GetSysClockFreq+0x108>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	091b      	lsrs	r3, r3, #4
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	3301      	adds	r3, #1
 80031d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031da:	4b10      	ldr	r3, [pc, #64]	@ (800321c <HAL_RCC_GetSysClockFreq+0x108>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	0a1b      	lsrs	r3, r3, #8
 80031e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	fb03 f202 	mul.w	r2, r3, r2
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031f2:	4b0a      	ldr	r3, [pc, #40]	@ (800321c <HAL_RCC_GetSysClockFreq+0x108>)
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	0e5b      	lsrs	r3, r3, #25
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	3301      	adds	r3, #1
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	fbb2 f3f3 	udiv	r3, r2, r3
 800320a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800320c:	69bb      	ldr	r3, [r7, #24]
}
 800320e:	4618      	mov	r0, r3
 8003210:	3724      	adds	r7, #36	@ 0x24
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	40021000 	.word	0x40021000
 8003220:	08006d74 	.word	0x08006d74
 8003224:	00f42400 	.word	0x00f42400
 8003228:	007a1200 	.word	0x007a1200

0800322c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003230:	4b03      	ldr	r3, [pc, #12]	@ (8003240 <HAL_RCC_GetHCLKFreq+0x14>)
 8003232:	681b      	ldr	r3, [r3, #0]
}
 8003234:	4618      	mov	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	20000038 	.word	0x20000038

08003244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003248:	f7ff fff0 	bl	800322c <HAL_RCC_GetHCLKFreq>
 800324c:	4602      	mov	r2, r0
 800324e:	4b06      	ldr	r3, [pc, #24]	@ (8003268 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	0a1b      	lsrs	r3, r3, #8
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	4904      	ldr	r1, [pc, #16]	@ (800326c <HAL_RCC_GetPCLK1Freq+0x28>)
 800325a:	5ccb      	ldrb	r3, [r1, r3]
 800325c:	f003 031f 	and.w	r3, r3, #31
 8003260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003264:	4618      	mov	r0, r3
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40021000 	.word	0x40021000
 800326c:	08006d6c 	.word	0x08006d6c

08003270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003274:	f7ff ffda 	bl	800322c <HAL_RCC_GetHCLKFreq>
 8003278:	4602      	mov	r2, r0
 800327a:	4b06      	ldr	r3, [pc, #24]	@ (8003294 <HAL_RCC_GetPCLK2Freq+0x24>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	0adb      	lsrs	r3, r3, #11
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	4904      	ldr	r1, [pc, #16]	@ (8003298 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003286:	5ccb      	ldrb	r3, [r1, r3]
 8003288:	f003 031f 	and.w	r3, r3, #31
 800328c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003290:	4618      	mov	r0, r3
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40021000 	.word	0x40021000
 8003298:	08006d6c 	.word	0x08006d6c

0800329c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032a4:	2300      	movs	r3, #0
 80032a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032b4:	f7ff f9ee 	bl	8002694 <HAL_PWREx_GetVoltageRange>
 80032b8:	6178      	str	r0, [r7, #20]
 80032ba:	e014      	b.n	80032e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032bc:	4b25      	ldr	r3, [pc, #148]	@ (8003354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c0:	4a24      	ldr	r2, [pc, #144]	@ (8003354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80032c8:	4b22      	ldr	r3, [pc, #136]	@ (8003354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032d4:	f7ff f9de 	bl	8002694 <HAL_PWREx_GetVoltageRange>
 80032d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032da:	4b1e      	ldr	r3, [pc, #120]	@ (8003354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032de:	4a1d      	ldr	r2, [pc, #116]	@ (8003354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032ec:	d10b      	bne.n	8003306 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b80      	cmp	r3, #128	@ 0x80
 80032f2:	d919      	bls.n	8003328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2ba0      	cmp	r3, #160	@ 0xa0
 80032f8:	d902      	bls.n	8003300 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032fa:	2302      	movs	r3, #2
 80032fc:	613b      	str	r3, [r7, #16]
 80032fe:	e013      	b.n	8003328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003300:	2301      	movs	r3, #1
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	e010      	b.n	8003328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b80      	cmp	r3, #128	@ 0x80
 800330a:	d902      	bls.n	8003312 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800330c:	2303      	movs	r3, #3
 800330e:	613b      	str	r3, [r7, #16]
 8003310:	e00a      	b.n	8003328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b80      	cmp	r3, #128	@ 0x80
 8003316:	d102      	bne.n	800331e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003318:	2302      	movs	r3, #2
 800331a:	613b      	str	r3, [r7, #16]
 800331c:	e004      	b.n	8003328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b70      	cmp	r3, #112	@ 0x70
 8003322:	d101      	bne.n	8003328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003324:	2301      	movs	r3, #1
 8003326:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003328:	4b0b      	ldr	r3, [pc, #44]	@ (8003358 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f023 0207 	bic.w	r2, r3, #7
 8003330:	4909      	ldr	r1, [pc, #36]	@ (8003358 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4313      	orrs	r3, r2
 8003336:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003338:	4b07      	ldr	r3, [pc, #28]	@ (8003358 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	429a      	cmp	r2, r3
 8003344:	d001      	beq.n	800334a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40021000 	.word	0x40021000
 8003358:	40022000 	.word	0x40022000

0800335c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003364:	2300      	movs	r3, #0
 8003366:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003368:	2300      	movs	r3, #0
 800336a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003374:	2b00      	cmp	r3, #0
 8003376:	d041      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800337c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003380:	d02a      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003382:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003386:	d824      	bhi.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003388:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800338c:	d008      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800338e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003392:	d81e      	bhi.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003398:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800339c:	d010      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800339e:	e018      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033a0:	4b86      	ldr	r3, [pc, #536]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	4a85      	ldr	r2, [pc, #532]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033ac:	e015      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3304      	adds	r3, #4
 80033b2:	2100      	movs	r1, #0
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 fabb 	bl	8003930 <RCCEx_PLLSAI1_Config>
 80033ba:	4603      	mov	r3, r0
 80033bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033be:	e00c      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3320      	adds	r3, #32
 80033c4:	2100      	movs	r1, #0
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fba6 	bl	8003b18 <RCCEx_PLLSAI2_Config>
 80033cc:	4603      	mov	r3, r0
 80033ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033d0:	e003      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	74fb      	strb	r3, [r7, #19]
      break;
 80033d6:	e000      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80033d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033da:	7cfb      	ldrb	r3, [r7, #19]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10b      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033e0:	4b76      	ldr	r3, [pc, #472]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033ee:	4973      	ldr	r1, [pc, #460]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80033f6:	e001      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f8:	7cfb      	ldrb	r3, [r7, #19]
 80033fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d041      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800340c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003410:	d02a      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003412:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003416:	d824      	bhi.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003418:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800341c:	d008      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800341e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003422:	d81e      	bhi.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00a      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003428:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800342c:	d010      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800342e:	e018      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003430:	4b62      	ldr	r3, [pc, #392]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4a61      	ldr	r2, [pc, #388]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003436:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800343a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800343c:	e015      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3304      	adds	r3, #4
 8003442:	2100      	movs	r1, #0
 8003444:	4618      	mov	r0, r3
 8003446:	f000 fa73 	bl	8003930 <RCCEx_PLLSAI1_Config>
 800344a:	4603      	mov	r3, r0
 800344c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800344e:	e00c      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3320      	adds	r3, #32
 8003454:	2100      	movs	r1, #0
 8003456:	4618      	mov	r0, r3
 8003458:	f000 fb5e 	bl	8003b18 <RCCEx_PLLSAI2_Config>
 800345c:	4603      	mov	r3, r0
 800345e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003460:	e003      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	74fb      	strb	r3, [r7, #19]
      break;
 8003466:	e000      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003468:	bf00      	nop
    }

    if(ret == HAL_OK)
 800346a:	7cfb      	ldrb	r3, [r7, #19]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10b      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003470:	4b52      	ldr	r3, [pc, #328]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003476:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800347e:	494f      	ldr	r1, [pc, #316]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003480:	4313      	orrs	r3, r2
 8003482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003486:	e001      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003488:	7cfb      	ldrb	r3, [r7, #19]
 800348a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 80a0 	beq.w	80035da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800349a:	2300      	movs	r3, #0
 800349c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800349e:	4b47      	ldr	r3, [pc, #284]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x152>
 80034aa:	2301      	movs	r3, #1
 80034ac:	e000      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80034ae:	2300      	movs	r3, #0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00d      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b4:	4b41      	ldr	r3, [pc, #260]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b8:	4a40      	ldr	r2, [pc, #256]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034be:	6593      	str	r3, [r2, #88]	@ 0x58
 80034c0:	4b3e      	ldr	r3, [pc, #248]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034cc:	2301      	movs	r3, #1
 80034ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034d0:	4b3b      	ldr	r3, [pc, #236]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a3a      	ldr	r2, [pc, #232]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034dc:	f7fe f858 	bl	8001590 <HAL_GetTick>
 80034e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034e2:	e009      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e4:	f7fe f854 	bl	8001590 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d902      	bls.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	74fb      	strb	r3, [r7, #19]
        break;
 80034f6:	e005      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034f8:	4b31      	ldr	r3, [pc, #196]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0ef      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003504:	7cfb      	ldrb	r3, [r7, #19]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d15c      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800350a:	4b2c      	ldr	r3, [pc, #176]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800350c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003510:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003514:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d01f      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	429a      	cmp	r2, r3
 8003526:	d019      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003528:	4b24      	ldr	r3, [pc, #144]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800352e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003532:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003534:	4b21      	ldr	r3, [pc, #132]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800353a:	4a20      	ldr	r2, [pc, #128]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800353c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003540:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003544:	4b1d      	ldr	r3, [pc, #116]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800354a:	4a1c      	ldr	r2, [pc, #112]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800354c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003550:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003554:	4a19      	ldr	r2, [pc, #100]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d016      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003566:	f7fe f813 	bl	8001590 <HAL_GetTick>
 800356a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800356c:	e00b      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356e:	f7fe f80f 	bl	8001590 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	f241 3288 	movw	r2, #5000	@ 0x1388
 800357c:	4293      	cmp	r3, r2
 800357e:	d902      	bls.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	74fb      	strb	r3, [r7, #19]
            break;
 8003584:	e006      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003586:	4b0d      	ldr	r3, [pc, #52]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0ec      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003594:	7cfb      	ldrb	r3, [r7, #19]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10c      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800359a:	4b08      	ldr	r3, [pc, #32]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035aa:	4904      	ldr	r1, [pc, #16]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80035b2:	e009      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035b4:	7cfb      	ldrb	r3, [r7, #19]
 80035b6:	74bb      	strb	r3, [r7, #18]
 80035b8:	e006      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80035ba:	bf00      	nop
 80035bc:	40021000 	.word	0x40021000
 80035c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c4:	7cfb      	ldrb	r3, [r7, #19]
 80035c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035c8:	7c7b      	ldrb	r3, [r7, #17]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d105      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ce:	4b9e      	ldr	r3, [pc, #632]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d2:	4a9d      	ldr	r2, [pc, #628]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035e6:	4b98      	ldr	r3, [pc, #608]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ec:	f023 0203 	bic.w	r2, r3, #3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f4:	4994      	ldr	r1, [pc, #592]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003608:	4b8f      	ldr	r3, [pc, #572]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800360e:	f023 020c 	bic.w	r2, r3, #12
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003616:	498c      	ldr	r1, [pc, #560]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003618:	4313      	orrs	r3, r2
 800361a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0304 	and.w	r3, r3, #4
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800362a:	4b87      	ldr	r3, [pc, #540]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003630:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003638:	4983      	ldr	r1, [pc, #524]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363a:	4313      	orrs	r3, r2
 800363c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800364c:	4b7e      	ldr	r3, [pc, #504]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003652:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365a:	497b      	ldr	r1, [pc, #492]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0310 	and.w	r3, r3, #16
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00a      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800366e:	4b76      	ldr	r3, [pc, #472]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003674:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800367c:	4972      	ldr	r1, [pc, #456]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367e:	4313      	orrs	r3, r2
 8003680:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0320 	and.w	r3, r3, #32
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00a      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003690:	4b6d      	ldr	r3, [pc, #436]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003696:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800369e:	496a      	ldr	r1, [pc, #424]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00a      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036b2:	4b65      	ldr	r3, [pc, #404]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c0:	4961      	ldr	r1, [pc, #388]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00a      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036d4:	4b5c      	ldr	r3, [pc, #368]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036e2:	4959      	ldr	r1, [pc, #356]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036f6:	4b54      	ldr	r3, [pc, #336]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036fc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003704:	4950      	ldr	r1, [pc, #320]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003706:	4313      	orrs	r3, r2
 8003708:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00a      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003718:	4b4b      	ldr	r3, [pc, #300]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800371e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003726:	4948      	ldr	r1, [pc, #288]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003728:	4313      	orrs	r3, r2
 800372a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800373a:	4b43      	ldr	r3, [pc, #268]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800373c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003740:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003748:	493f      	ldr	r1, [pc, #252]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374a:	4313      	orrs	r3, r2
 800374c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d028      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800375c:	4b3a      	ldr	r3, [pc, #232]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003762:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800376a:	4937      	ldr	r1, [pc, #220]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376c:	4313      	orrs	r3, r2
 800376e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003776:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800377a:	d106      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800377c:	4b32      	ldr	r3, [pc, #200]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	4a31      	ldr	r2, [pc, #196]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003782:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003786:	60d3      	str	r3, [r2, #12]
 8003788:	e011      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800378e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003792:	d10c      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3304      	adds	r3, #4
 8003798:	2101      	movs	r1, #1
 800379a:	4618      	mov	r0, r3
 800379c:	f000 f8c8 	bl	8003930 <RCCEx_PLLSAI1_Config>
 80037a0:	4603      	mov	r3, r0
 80037a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037a4:	7cfb      	ldrb	r3, [r7, #19]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80037aa:	7cfb      	ldrb	r3, [r7, #19]
 80037ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d028      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037ba:	4b23      	ldr	r3, [pc, #140]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c8:	491f      	ldr	r1, [pc, #124]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037d8:	d106      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037da:	4b1b      	ldr	r3, [pc, #108]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	4a1a      	ldr	r2, [pc, #104]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037e4:	60d3      	str	r3, [r2, #12]
 80037e6:	e011      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037f0:	d10c      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	3304      	adds	r3, #4
 80037f6:	2101      	movs	r1, #1
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 f899 	bl	8003930 <RCCEx_PLLSAI1_Config>
 80037fe:	4603      	mov	r3, r0
 8003800:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003802:	7cfb      	ldrb	r3, [r7, #19]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003808:	7cfb      	ldrb	r3, [r7, #19]
 800380a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d02b      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003818:	4b0b      	ldr	r3, [pc, #44]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800381e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003826:	4908      	ldr	r1, [pc, #32]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003832:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003836:	d109      	bne.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003838:	4b03      	ldr	r3, [pc, #12]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	4a02      	ldr	r2, [pc, #8]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003842:	60d3      	str	r3, [r2, #12]
 8003844:	e014      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003846:	bf00      	nop
 8003848:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003850:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003854:	d10c      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3304      	adds	r3, #4
 800385a:	2101      	movs	r1, #1
 800385c:	4618      	mov	r0, r3
 800385e:	f000 f867 	bl	8003930 <RCCEx_PLLSAI1_Config>
 8003862:	4603      	mov	r3, r0
 8003864:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003866:	7cfb      	ldrb	r3, [r7, #19]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800386c:	7cfb      	ldrb	r3, [r7, #19]
 800386e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d02f      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800387c:	4b2b      	ldr	r3, [pc, #172]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800387e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003882:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800388a:	4928      	ldr	r1, [pc, #160]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800388c:	4313      	orrs	r3, r2
 800388e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003896:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800389a:	d10d      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3304      	adds	r3, #4
 80038a0:	2102      	movs	r1, #2
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 f844 	bl	8003930 <RCCEx_PLLSAI1_Config>
 80038a8:	4603      	mov	r3, r0
 80038aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038ac:	7cfb      	ldrb	r3, [r7, #19]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d014      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038b2:	7cfb      	ldrb	r3, [r7, #19]
 80038b4:	74bb      	strb	r3, [r7, #18]
 80038b6:	e011      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038c0:	d10c      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3320      	adds	r3, #32
 80038c6:	2102      	movs	r1, #2
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 f925 	bl	8003b18 <RCCEx_PLLSAI2_Config>
 80038ce:	4603      	mov	r3, r0
 80038d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038d2:	7cfb      	ldrb	r3, [r7, #19]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038d8:	7cfb      	ldrb	r3, [r7, #19]
 80038da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00a      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038e8:	4b10      	ldr	r3, [pc, #64]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ee:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038f6:	490d      	ldr	r1, [pc, #52]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00b      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800390a:	4b08      	ldr	r3, [pc, #32]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800390c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003910:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800391a:	4904      	ldr	r1, [pc, #16]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003922:	7cbb      	ldrb	r3, [r7, #18]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40021000 	.word	0x40021000

08003930 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800393e:	4b75      	ldr	r3, [pc, #468]	@ (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d018      	beq.n	800397c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800394a:	4b72      	ldr	r3, [pc, #456]	@ (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f003 0203 	and.w	r2, r3, #3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	429a      	cmp	r2, r3
 8003958:	d10d      	bne.n	8003976 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
       ||
 800395e:	2b00      	cmp	r3, #0
 8003960:	d009      	beq.n	8003976 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003962:	4b6c      	ldr	r3, [pc, #432]	@ (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	091b      	lsrs	r3, r3, #4
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
       ||
 8003972:	429a      	cmp	r2, r3
 8003974:	d047      	beq.n	8003a06 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	73fb      	strb	r3, [r7, #15]
 800397a:	e044      	b.n	8003a06 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b03      	cmp	r3, #3
 8003982:	d018      	beq.n	80039b6 <RCCEx_PLLSAI1_Config+0x86>
 8003984:	2b03      	cmp	r3, #3
 8003986:	d825      	bhi.n	80039d4 <RCCEx_PLLSAI1_Config+0xa4>
 8003988:	2b01      	cmp	r3, #1
 800398a:	d002      	beq.n	8003992 <RCCEx_PLLSAI1_Config+0x62>
 800398c:	2b02      	cmp	r3, #2
 800398e:	d009      	beq.n	80039a4 <RCCEx_PLLSAI1_Config+0x74>
 8003990:	e020      	b.n	80039d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003992:	4b60      	ldr	r3, [pc, #384]	@ (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d11d      	bne.n	80039da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039a2:	e01a      	b.n	80039da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039a4:	4b5b      	ldr	r3, [pc, #364]	@ (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d116      	bne.n	80039de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039b4:	e013      	b.n	80039de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039b6:	4b57      	ldr	r3, [pc, #348]	@ (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10f      	bne.n	80039e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039c2:	4b54      	ldr	r3, [pc, #336]	@ (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d109      	bne.n	80039e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039d2:	e006      	b.n	80039e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	73fb      	strb	r3, [r7, #15]
      break;
 80039d8:	e004      	b.n	80039e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039da:	bf00      	nop
 80039dc:	e002      	b.n	80039e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039de:	bf00      	nop
 80039e0:	e000      	b.n	80039e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10d      	bne.n	8003a06 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6819      	ldr	r1, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	430b      	orrs	r3, r1
 8003a00:	4944      	ldr	r1, [pc, #272]	@ (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d17d      	bne.n	8003b08 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a0c:	4b41      	ldr	r3, [pc, #260]	@ (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a40      	ldr	r2, [pc, #256]	@ (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003a16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a18:	f7fd fdba 	bl	8001590 <HAL_GetTick>
 8003a1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a1e:	e009      	b.n	8003a34 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a20:	f7fd fdb6 	bl	8001590 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d902      	bls.n	8003a34 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	73fb      	strb	r3, [r7, #15]
        break;
 8003a32:	e005      	b.n	8003a40 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a34:	4b37      	ldr	r3, [pc, #220]	@ (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1ef      	bne.n	8003a20 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d160      	bne.n	8003b08 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d111      	bne.n	8003a70 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a4c:	4b31      	ldr	r3, [pc, #196]	@ (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003a54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6892      	ldr	r2, [r2, #8]
 8003a5c:	0211      	lsls	r1, r2, #8
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	68d2      	ldr	r2, [r2, #12]
 8003a62:	0912      	lsrs	r2, r2, #4
 8003a64:	0452      	lsls	r2, r2, #17
 8003a66:	430a      	orrs	r2, r1
 8003a68:	492a      	ldr	r1, [pc, #168]	@ (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	610b      	str	r3, [r1, #16]
 8003a6e:	e027      	b.n	8003ac0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d112      	bne.n	8003a9c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a76:	4b27      	ldr	r3, [pc, #156]	@ (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003a7e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6892      	ldr	r2, [r2, #8]
 8003a86:	0211      	lsls	r1, r2, #8
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6912      	ldr	r2, [r2, #16]
 8003a8c:	0852      	lsrs	r2, r2, #1
 8003a8e:	3a01      	subs	r2, #1
 8003a90:	0552      	lsls	r2, r2, #21
 8003a92:	430a      	orrs	r2, r1
 8003a94:	491f      	ldr	r1, [pc, #124]	@ (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	610b      	str	r3, [r1, #16]
 8003a9a:	e011      	b.n	8003ac0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003aa4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6892      	ldr	r2, [r2, #8]
 8003aac:	0211      	lsls	r1, r2, #8
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6952      	ldr	r2, [r2, #20]
 8003ab2:	0852      	lsrs	r2, r2, #1
 8003ab4:	3a01      	subs	r2, #1
 8003ab6:	0652      	lsls	r2, r2, #25
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	4916      	ldr	r1, [pc, #88]	@ (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ac0:	4b14      	ldr	r3, [pc, #80]	@ (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a13      	ldr	r2, [pc, #76]	@ (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003aca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003acc:	f7fd fd60 	bl	8001590 <HAL_GetTick>
 8003ad0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ad2:	e009      	b.n	8003ae8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ad4:	f7fd fd5c 	bl	8001590 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d902      	bls.n	8003ae8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	73fb      	strb	r3, [r7, #15]
          break;
 8003ae6:	e005      	b.n	8003af4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0ef      	beq.n	8003ad4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d106      	bne.n	8003b08 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003afa:	4b06      	ldr	r3, [pc, #24]	@ (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003afc:	691a      	ldr	r2, [r3, #16]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	4904      	ldr	r1, [pc, #16]	@ (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40021000 	.word	0x40021000

08003b18 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b26:	4b6a      	ldr	r3, [pc, #424]	@ (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d018      	beq.n	8003b64 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b32:	4b67      	ldr	r3, [pc, #412]	@ (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f003 0203 	and.w	r2, r3, #3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d10d      	bne.n	8003b5e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
       ||
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d009      	beq.n	8003b5e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003b4a:	4b61      	ldr	r3, [pc, #388]	@ (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	091b      	lsrs	r3, r3, #4
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	1c5a      	adds	r2, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
       ||
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d047      	beq.n	8003bee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	73fb      	strb	r3, [r7, #15]
 8003b62:	e044      	b.n	8003bee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b03      	cmp	r3, #3
 8003b6a:	d018      	beq.n	8003b9e <RCCEx_PLLSAI2_Config+0x86>
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	d825      	bhi.n	8003bbc <RCCEx_PLLSAI2_Config+0xa4>
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d002      	beq.n	8003b7a <RCCEx_PLLSAI2_Config+0x62>
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d009      	beq.n	8003b8c <RCCEx_PLLSAI2_Config+0x74>
 8003b78:	e020      	b.n	8003bbc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b7a:	4b55      	ldr	r3, [pc, #340]	@ (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d11d      	bne.n	8003bc2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b8a:	e01a      	b.n	8003bc2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b8c:	4b50      	ldr	r3, [pc, #320]	@ (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d116      	bne.n	8003bc6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b9c:	e013      	b.n	8003bc6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b9e:	4b4c      	ldr	r3, [pc, #304]	@ (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10f      	bne.n	8003bca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003baa:	4b49      	ldr	r3, [pc, #292]	@ (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d109      	bne.n	8003bca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bba:	e006      	b.n	8003bca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8003bc0:	e004      	b.n	8003bcc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003bc2:	bf00      	nop
 8003bc4:	e002      	b.n	8003bcc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003bc6:	bf00      	nop
 8003bc8:	e000      	b.n	8003bcc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003bca:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10d      	bne.n	8003bee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003bd2:	4b3f      	ldr	r3, [pc, #252]	@ (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6819      	ldr	r1, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	3b01      	subs	r3, #1
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	430b      	orrs	r3, r1
 8003be8:	4939      	ldr	r1, [pc, #228]	@ (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003bee:	7bfb      	ldrb	r3, [r7, #15]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d167      	bne.n	8003cc4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003bf4:	4b36      	ldr	r3, [pc, #216]	@ (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a35      	ldr	r2, [pc, #212]	@ (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c00:	f7fd fcc6 	bl	8001590 <HAL_GetTick>
 8003c04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c06:	e009      	b.n	8003c1c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c08:	f7fd fcc2 	bl	8001590 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d902      	bls.n	8003c1c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	73fb      	strb	r3, [r7, #15]
        break;
 8003c1a:	e005      	b.n	8003c28 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c1c:	4b2c      	ldr	r3, [pc, #176]	@ (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1ef      	bne.n	8003c08 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d14a      	bne.n	8003cc4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d111      	bne.n	8003c58 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c34:	4b26      	ldr	r3, [pc, #152]	@ (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003c3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6892      	ldr	r2, [r2, #8]
 8003c44:	0211      	lsls	r1, r2, #8
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	68d2      	ldr	r2, [r2, #12]
 8003c4a:	0912      	lsrs	r2, r2, #4
 8003c4c:	0452      	lsls	r2, r2, #17
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	491f      	ldr	r1, [pc, #124]	@ (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	614b      	str	r3, [r1, #20]
 8003c56:	e011      	b.n	8003c7c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c58:	4b1d      	ldr	r3, [pc, #116]	@ (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003c60:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6892      	ldr	r2, [r2, #8]
 8003c68:	0211      	lsls	r1, r2, #8
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6912      	ldr	r2, [r2, #16]
 8003c6e:	0852      	lsrs	r2, r2, #1
 8003c70:	3a01      	subs	r2, #1
 8003c72:	0652      	lsls	r2, r2, #25
 8003c74:	430a      	orrs	r2, r1
 8003c76:	4916      	ldr	r1, [pc, #88]	@ (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c7c:	4b14      	ldr	r3, [pc, #80]	@ (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a13      	ldr	r2, [pc, #76]	@ (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c88:	f7fd fc82 	bl	8001590 <HAL_GetTick>
 8003c8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c8e:	e009      	b.n	8003ca4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c90:	f7fd fc7e 	bl	8001590 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d902      	bls.n	8003ca4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	73fb      	strb	r3, [r7, #15]
          break;
 8003ca2:	e005      	b.n	8003cb0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0ef      	beq.n	8003c90 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d106      	bne.n	8003cc4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003cb6:	4b06      	ldr	r3, [pc, #24]	@ (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cb8:	695a      	ldr	r2, [r3, #20]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	4904      	ldr	r1, [pc, #16]	@ (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40021000 	.word	0x40021000

08003cd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e040      	b.n	8003d68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d106      	bne.n	8003cfc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7fd fa58 	bl	80011ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2224      	movs	r2, #36	@ 0x24
 8003d00:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0201 	bic.w	r2, r2, #1
 8003d10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 fedc 	bl	8004ad8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 fc21 	bl	8004568 <UART_SetConfig>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e01b      	b.n	8003d68 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 ff5b 	bl	8004c1c <UART_CheckIdleState>
 8003d66:	4603      	mov	r3, r0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b08a      	sub	sp, #40	@ 0x28
 8003d74:	af02      	add	r7, sp, #8
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	603b      	str	r3, [r7, #0]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d84:	2b20      	cmp	r3, #32
 8003d86:	d177      	bne.n	8003e78 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <HAL_UART_Transmit+0x24>
 8003d8e:	88fb      	ldrh	r3, [r7, #6]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e070      	b.n	8003e7a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2221      	movs	r2, #33	@ 0x21
 8003da4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003da6:	f7fd fbf3 	bl	8001590 <HAL_GetTick>
 8003daa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	88fa      	ldrh	r2, [r7, #6]
 8003db0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	88fa      	ldrh	r2, [r7, #6]
 8003db8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dc4:	d108      	bne.n	8003dd8 <HAL_UART_Transmit+0x68>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d104      	bne.n	8003dd8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	61bb      	str	r3, [r7, #24]
 8003dd6:	e003      	b.n	8003de0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003de0:	e02f      	b.n	8003e42 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2200      	movs	r2, #0
 8003dea:	2180      	movs	r1, #128	@ 0x80
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 ffbd 	bl	8004d6c <UART_WaitOnFlagUntilTimeout>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d004      	beq.n	8003e02 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e03b      	b.n	8003e7a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10b      	bne.n	8003e20 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	881a      	ldrh	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e14:	b292      	uxth	r2, r2
 8003e16:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	3302      	adds	r3, #2
 8003e1c:	61bb      	str	r3, [r7, #24]
 8003e1e:	e007      	b.n	8003e30 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	781a      	ldrb	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1c9      	bne.n	8003de2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2200      	movs	r2, #0
 8003e56:	2140      	movs	r1, #64	@ 0x40
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 ff87 	bl	8004d6c <UART_WaitOnFlagUntilTimeout>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d004      	beq.n	8003e6e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2220      	movs	r2, #32
 8003e68:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e005      	b.n	8003e7a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2220      	movs	r2, #32
 8003e72:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	e000      	b.n	8003e7a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003e78:	2302      	movs	r3, #2
  }
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3720      	adds	r7, #32
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08a      	sub	sp, #40	@ 0x28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e98:	2b20      	cmp	r3, #32
 8003e9a:	d137      	bne.n	8003f0c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <HAL_UART_Receive_IT+0x24>
 8003ea2:	88fb      	ldrh	r3, [r7, #6]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e030      	b.n	8003f0e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a18      	ldr	r2, [pc, #96]	@ (8003f18 <HAL_UART_Receive_IT+0x94>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d01f      	beq.n	8003efc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d018      	beq.n	8003efc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	e853 3f00 	ldrex	r3, [r3]
 8003ed6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ede:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee8:	623b      	str	r3, [r7, #32]
 8003eea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eec:	69f9      	ldr	r1, [r7, #28]
 8003eee:	6a3a      	ldr	r2, [r7, #32]
 8003ef0:	e841 2300 	strex	r3, r2, [r1]
 8003ef4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1e6      	bne.n	8003eca <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003efc:	88fb      	ldrh	r3, [r7, #6]
 8003efe:	461a      	mov	r2, r3
 8003f00:	68b9      	ldr	r1, [r7, #8]
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 ffa0 	bl	8004e48 <UART_Start_Receive_IT>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	e000      	b.n	8003f0e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f0c:	2302      	movs	r3, #2
  }
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3728      	adds	r7, #40	@ 0x28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40008000 	.word	0x40008000

08003f1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b0ba      	sub	sp, #232	@ 0xe8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003f46:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003f50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d115      	bne.n	8003f84 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f5c:	f003 0320 	and.w	r3, r3, #32
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00f      	beq.n	8003f84 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f68:	f003 0320 	and.w	r3, r3, #32
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d009      	beq.n	8003f84 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 82ca 	beq.w	800450e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	4798      	blx	r3
      }
      return;
 8003f82:	e2c4      	b.n	800450e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003f84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 8117 	beq.w	80041bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003f9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003f9e:	4b85      	ldr	r3, [pc, #532]	@ (80041b4 <HAL_UART_IRQHandler+0x298>)
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 810a 	beq.w	80041bc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d011      	beq.n	8003fd8 <HAL_UART_IRQHandler+0xbc>
 8003fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00b      	beq.n	8003fd8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fce:	f043 0201 	orr.w	r2, r3, #1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d011      	beq.n	8004008 <HAL_UART_IRQHandler+0xec>
 8003fe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00b      	beq.n	8004008 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ffe:	f043 0204 	orr.w	r2, r3, #4
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b00      	cmp	r3, #0
 8004012:	d011      	beq.n	8004038 <HAL_UART_IRQHandler+0x11c>
 8004014:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00b      	beq.n	8004038 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2204      	movs	r2, #4
 8004026:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800402e:	f043 0202 	orr.w	r2, r3, #2
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b00      	cmp	r3, #0
 8004042:	d017      	beq.n	8004074 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004048:	f003 0320 	and.w	r3, r3, #32
 800404c:	2b00      	cmp	r3, #0
 800404e:	d105      	bne.n	800405c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004054:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00b      	beq.n	8004074 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2208      	movs	r2, #8
 8004062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800406a:	f043 0208 	orr.w	r2, r3, #8
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004078:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800407c:	2b00      	cmp	r3, #0
 800407e:	d012      	beq.n	80040a6 <HAL_UART_IRQHandler+0x18a>
 8004080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004084:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00c      	beq.n	80040a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004094:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800409c:	f043 0220 	orr.w	r2, r3, #32
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 8230 	beq.w	8004512 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80040b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00d      	beq.n	80040da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040c2:	f003 0320 	and.w	r3, r3, #32
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d007      	beq.n	80040da <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ee:	2b40      	cmp	r3, #64	@ 0x40
 80040f0:	d005      	beq.n	80040fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80040f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d04f      	beq.n	800419e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 ff68 	bl	8004fd4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800410e:	2b40      	cmp	r3, #64	@ 0x40
 8004110:	d141      	bne.n	8004196 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	3308      	adds	r3, #8
 8004118:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004120:	e853 3f00 	ldrex	r3, [r3]
 8004124:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004128:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800412c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004130:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	3308      	adds	r3, #8
 800413a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800413e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004142:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004146:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800414a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800414e:	e841 2300 	strex	r3, r2, [r1]
 8004152:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004156:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1d9      	bne.n	8004112 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004162:	2b00      	cmp	r3, #0
 8004164:	d013      	beq.n	800418e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800416a:	4a13      	ldr	r2, [pc, #76]	@ (80041b8 <HAL_UART_IRQHandler+0x29c>)
 800416c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004172:	4618      	mov	r0, r3
 8004174:	f7fd fb8b 	bl	800188e <HAL_DMA_Abort_IT>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d017      	beq.n	80041ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004188:	4610      	mov	r0, r2
 800418a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800418c:	e00f      	b.n	80041ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f9d4 	bl	800453c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004194:	e00b      	b.n	80041ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f9d0 	bl	800453c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800419c:	e007      	b.n	80041ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f9cc 	bl	800453c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80041ac:	e1b1      	b.n	8004512 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ae:	bf00      	nop
    return;
 80041b0:	e1af      	b.n	8004512 <HAL_UART_IRQHandler+0x5f6>
 80041b2:	bf00      	nop
 80041b4:	04000120 	.word	0x04000120
 80041b8:	0800509d 	.word	0x0800509d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	f040 816a 	bne.w	800449a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80041c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041ca:	f003 0310 	and.w	r3, r3, #16
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 8163 	beq.w	800449a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80041d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041d8:	f003 0310 	and.w	r3, r3, #16
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 815c 	beq.w	800449a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2210      	movs	r2, #16
 80041e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041f4:	2b40      	cmp	r3, #64	@ 0x40
 80041f6:	f040 80d4 	bne.w	80043a2 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004206:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 80ad 	beq.w	800436a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004216:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800421a:	429a      	cmp	r2, r3
 800421c:	f080 80a5 	bcs.w	800436a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004226:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0320 	and.w	r3, r3, #32
 8004236:	2b00      	cmp	r3, #0
 8004238:	f040 8086 	bne.w	8004348 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004244:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004248:	e853 3f00 	ldrex	r3, [r3]
 800424c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004250:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004254:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004258:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	461a      	mov	r2, r3
 8004262:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004266:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800426a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004272:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800427e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1da      	bne.n	800423c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3308      	adds	r3, #8
 800428c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004290:	e853 3f00 	ldrex	r3, [r3]
 8004294:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004296:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004298:	f023 0301 	bic.w	r3, r3, #1
 800429c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	3308      	adds	r3, #8
 80042a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80042ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80042b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80042b6:	e841 2300 	strex	r3, r2, [r1]
 80042ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80042bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1e1      	bne.n	8004286 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3308      	adds	r3, #8
 80042c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042cc:	e853 3f00 	ldrex	r3, [r3]
 80042d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80042d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3308      	adds	r3, #8
 80042e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80042e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80042e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80042ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80042ee:	e841 2300 	strex	r3, r2, [r1]
 80042f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80042f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1e3      	bne.n	80042c2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004310:	e853 3f00 	ldrex	r3, [r3]
 8004314:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004316:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004318:	f023 0310 	bic.w	r3, r3, #16
 800431c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800432a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800432c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004330:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004332:	e841 2300 	strex	r3, r2, [r1]
 8004336:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004338:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1e4      	bne.n	8004308 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004342:	4618      	mov	r0, r3
 8004344:	f7fd fa65 	bl	8001812 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2202      	movs	r2, #2
 800434c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800435a:	b29b      	uxth	r3, r3
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	b29b      	uxth	r3, r3
 8004360:	4619      	mov	r1, r3
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f8f4 	bl	8004550 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004368:	e0d5      	b.n	8004516 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004370:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004374:	429a      	cmp	r2, r3
 8004376:	f040 80ce 	bne.w	8004516 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0320 	and.w	r3, r3, #32
 8004386:	2b20      	cmp	r3, #32
 8004388:	f040 80c5 	bne.w	8004516 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004398:	4619      	mov	r1, r3
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f8d8 	bl	8004550 <HAL_UARTEx_RxEventCallback>
      return;
 80043a0:	e0b9      	b.n	8004516 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80043bc:	b29b      	uxth	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 80ab 	beq.w	800451a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80043c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 80a6 	beq.w	800451a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d6:	e853 3f00 	ldrex	r3, [r3]
 80043da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	461a      	mov	r2, r3
 80043ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80043f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80043f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043f8:	e841 2300 	strex	r3, r2, [r1]
 80043fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1e4      	bne.n	80043ce <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3308      	adds	r3, #8
 800440a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440e:	e853 3f00 	ldrex	r3, [r3]
 8004412:	623b      	str	r3, [r7, #32]
   return(result);
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	f023 0301 	bic.w	r3, r3, #1
 800441a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3308      	adds	r3, #8
 8004424:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004428:	633a      	str	r2, [r7, #48]	@ 0x30
 800442a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800442e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004430:	e841 2300 	strex	r3, r2, [r1]
 8004434:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e3      	bne.n	8004404 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2220      	movs	r2, #32
 8004440:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	e853 3f00 	ldrex	r3, [r3]
 800445c:	60fb      	str	r3, [r7, #12]
   return(result);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f023 0310 	bic.w	r3, r3, #16
 8004464:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	461a      	mov	r2, r3
 800446e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004472:	61fb      	str	r3, [r7, #28]
 8004474:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004476:	69b9      	ldr	r1, [r7, #24]
 8004478:	69fa      	ldr	r2, [r7, #28]
 800447a:	e841 2300 	strex	r3, r2, [r1]
 800447e:	617b      	str	r3, [r7, #20]
   return(result);
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1e4      	bne.n	8004450 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2202      	movs	r2, #2
 800448a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800448c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004490:	4619      	mov	r1, r3
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f85c 	bl	8004550 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004498:	e03f      	b.n	800451a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800449a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800449e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00e      	beq.n	80044c4 <HAL_UART_IRQHandler+0x5a8>
 80044a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d008      	beq.n	80044c4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80044ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 ffe9 	bl	8005494 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80044c2:	e02d      	b.n	8004520 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80044c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00e      	beq.n	80044ee <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80044d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d008      	beq.n	80044ee <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d01c      	beq.n	800451e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	4798      	blx	r3
    }
    return;
 80044ec:	e017      	b.n	800451e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80044ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d012      	beq.n	8004520 <HAL_UART_IRQHandler+0x604>
 80044fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00c      	beq.n	8004520 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fdde 	bl	80050c8 <UART_EndTransmit_IT>
    return;
 800450c:	e008      	b.n	8004520 <HAL_UART_IRQHandler+0x604>
      return;
 800450e:	bf00      	nop
 8004510:	e006      	b.n	8004520 <HAL_UART_IRQHandler+0x604>
    return;
 8004512:	bf00      	nop
 8004514:	e004      	b.n	8004520 <HAL_UART_IRQHandler+0x604>
      return;
 8004516:	bf00      	nop
 8004518:	e002      	b.n	8004520 <HAL_UART_IRQHandler+0x604>
      return;
 800451a:	bf00      	nop
 800451c:	e000      	b.n	8004520 <HAL_UART_IRQHandler+0x604>
    return;
 800451e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004520:	37e8      	adds	r7, #232	@ 0xe8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop

08004528 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	460b      	mov	r3, r1
 800455a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800456c:	b08a      	sub	sp, #40	@ 0x28
 800456e:	af00      	add	r7, sp, #0
 8004570:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004572:	2300      	movs	r3, #0
 8004574:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	431a      	orrs	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	431a      	orrs	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	4313      	orrs	r3, r2
 800458e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	4ba4      	ldr	r3, [pc, #656]	@ (8004828 <UART_SetConfig+0x2c0>)
 8004598:	4013      	ands	r3, r2
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	6812      	ldr	r2, [r2, #0]
 800459e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045a0:	430b      	orrs	r3, r1
 80045a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a99      	ldr	r2, [pc, #612]	@ (800482c <UART_SetConfig+0x2c4>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d004      	beq.n	80045d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045d0:	4313      	orrs	r3, r2
 80045d2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045e4:	430a      	orrs	r2, r1
 80045e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a90      	ldr	r2, [pc, #576]	@ (8004830 <UART_SetConfig+0x2c8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d126      	bne.n	8004640 <UART_SetConfig+0xd8>
 80045f2:	4b90      	ldr	r3, [pc, #576]	@ (8004834 <UART_SetConfig+0x2cc>)
 80045f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f8:	f003 0303 	and.w	r3, r3, #3
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d81b      	bhi.n	8004638 <UART_SetConfig+0xd0>
 8004600:	a201      	add	r2, pc, #4	@ (adr r2, 8004608 <UART_SetConfig+0xa0>)
 8004602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004606:	bf00      	nop
 8004608:	08004619 	.word	0x08004619
 800460c:	08004629 	.word	0x08004629
 8004610:	08004621 	.word	0x08004621
 8004614:	08004631 	.word	0x08004631
 8004618:	2301      	movs	r3, #1
 800461a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800461e:	e116      	b.n	800484e <UART_SetConfig+0x2e6>
 8004620:	2302      	movs	r3, #2
 8004622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004626:	e112      	b.n	800484e <UART_SetConfig+0x2e6>
 8004628:	2304      	movs	r3, #4
 800462a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800462e:	e10e      	b.n	800484e <UART_SetConfig+0x2e6>
 8004630:	2308      	movs	r3, #8
 8004632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004636:	e10a      	b.n	800484e <UART_SetConfig+0x2e6>
 8004638:	2310      	movs	r3, #16
 800463a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800463e:	e106      	b.n	800484e <UART_SetConfig+0x2e6>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a7c      	ldr	r2, [pc, #496]	@ (8004838 <UART_SetConfig+0x2d0>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d138      	bne.n	80046bc <UART_SetConfig+0x154>
 800464a:	4b7a      	ldr	r3, [pc, #488]	@ (8004834 <UART_SetConfig+0x2cc>)
 800464c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004650:	f003 030c 	and.w	r3, r3, #12
 8004654:	2b0c      	cmp	r3, #12
 8004656:	d82d      	bhi.n	80046b4 <UART_SetConfig+0x14c>
 8004658:	a201      	add	r2, pc, #4	@ (adr r2, 8004660 <UART_SetConfig+0xf8>)
 800465a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465e:	bf00      	nop
 8004660:	08004695 	.word	0x08004695
 8004664:	080046b5 	.word	0x080046b5
 8004668:	080046b5 	.word	0x080046b5
 800466c:	080046b5 	.word	0x080046b5
 8004670:	080046a5 	.word	0x080046a5
 8004674:	080046b5 	.word	0x080046b5
 8004678:	080046b5 	.word	0x080046b5
 800467c:	080046b5 	.word	0x080046b5
 8004680:	0800469d 	.word	0x0800469d
 8004684:	080046b5 	.word	0x080046b5
 8004688:	080046b5 	.word	0x080046b5
 800468c:	080046b5 	.word	0x080046b5
 8004690:	080046ad 	.word	0x080046ad
 8004694:	2300      	movs	r3, #0
 8004696:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800469a:	e0d8      	b.n	800484e <UART_SetConfig+0x2e6>
 800469c:	2302      	movs	r3, #2
 800469e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046a2:	e0d4      	b.n	800484e <UART_SetConfig+0x2e6>
 80046a4:	2304      	movs	r3, #4
 80046a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046aa:	e0d0      	b.n	800484e <UART_SetConfig+0x2e6>
 80046ac:	2308      	movs	r3, #8
 80046ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046b2:	e0cc      	b.n	800484e <UART_SetConfig+0x2e6>
 80046b4:	2310      	movs	r3, #16
 80046b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ba:	e0c8      	b.n	800484e <UART_SetConfig+0x2e6>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a5e      	ldr	r2, [pc, #376]	@ (800483c <UART_SetConfig+0x2d4>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d125      	bne.n	8004712 <UART_SetConfig+0x1aa>
 80046c6:	4b5b      	ldr	r3, [pc, #364]	@ (8004834 <UART_SetConfig+0x2cc>)
 80046c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80046d0:	2b30      	cmp	r3, #48	@ 0x30
 80046d2:	d016      	beq.n	8004702 <UART_SetConfig+0x19a>
 80046d4:	2b30      	cmp	r3, #48	@ 0x30
 80046d6:	d818      	bhi.n	800470a <UART_SetConfig+0x1a2>
 80046d8:	2b20      	cmp	r3, #32
 80046da:	d00a      	beq.n	80046f2 <UART_SetConfig+0x18a>
 80046dc:	2b20      	cmp	r3, #32
 80046de:	d814      	bhi.n	800470a <UART_SetConfig+0x1a2>
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <UART_SetConfig+0x182>
 80046e4:	2b10      	cmp	r3, #16
 80046e6:	d008      	beq.n	80046fa <UART_SetConfig+0x192>
 80046e8:	e00f      	b.n	800470a <UART_SetConfig+0x1a2>
 80046ea:	2300      	movs	r3, #0
 80046ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046f0:	e0ad      	b.n	800484e <UART_SetConfig+0x2e6>
 80046f2:	2302      	movs	r3, #2
 80046f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046f8:	e0a9      	b.n	800484e <UART_SetConfig+0x2e6>
 80046fa:	2304      	movs	r3, #4
 80046fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004700:	e0a5      	b.n	800484e <UART_SetConfig+0x2e6>
 8004702:	2308      	movs	r3, #8
 8004704:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004708:	e0a1      	b.n	800484e <UART_SetConfig+0x2e6>
 800470a:	2310      	movs	r3, #16
 800470c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004710:	e09d      	b.n	800484e <UART_SetConfig+0x2e6>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a4a      	ldr	r2, [pc, #296]	@ (8004840 <UART_SetConfig+0x2d8>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d125      	bne.n	8004768 <UART_SetConfig+0x200>
 800471c:	4b45      	ldr	r3, [pc, #276]	@ (8004834 <UART_SetConfig+0x2cc>)
 800471e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004722:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004726:	2bc0      	cmp	r3, #192	@ 0xc0
 8004728:	d016      	beq.n	8004758 <UART_SetConfig+0x1f0>
 800472a:	2bc0      	cmp	r3, #192	@ 0xc0
 800472c:	d818      	bhi.n	8004760 <UART_SetConfig+0x1f8>
 800472e:	2b80      	cmp	r3, #128	@ 0x80
 8004730:	d00a      	beq.n	8004748 <UART_SetConfig+0x1e0>
 8004732:	2b80      	cmp	r3, #128	@ 0x80
 8004734:	d814      	bhi.n	8004760 <UART_SetConfig+0x1f8>
 8004736:	2b00      	cmp	r3, #0
 8004738:	d002      	beq.n	8004740 <UART_SetConfig+0x1d8>
 800473a:	2b40      	cmp	r3, #64	@ 0x40
 800473c:	d008      	beq.n	8004750 <UART_SetConfig+0x1e8>
 800473e:	e00f      	b.n	8004760 <UART_SetConfig+0x1f8>
 8004740:	2300      	movs	r3, #0
 8004742:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004746:	e082      	b.n	800484e <UART_SetConfig+0x2e6>
 8004748:	2302      	movs	r3, #2
 800474a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800474e:	e07e      	b.n	800484e <UART_SetConfig+0x2e6>
 8004750:	2304      	movs	r3, #4
 8004752:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004756:	e07a      	b.n	800484e <UART_SetConfig+0x2e6>
 8004758:	2308      	movs	r3, #8
 800475a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800475e:	e076      	b.n	800484e <UART_SetConfig+0x2e6>
 8004760:	2310      	movs	r3, #16
 8004762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004766:	e072      	b.n	800484e <UART_SetConfig+0x2e6>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a35      	ldr	r2, [pc, #212]	@ (8004844 <UART_SetConfig+0x2dc>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d12a      	bne.n	80047c8 <UART_SetConfig+0x260>
 8004772:	4b30      	ldr	r3, [pc, #192]	@ (8004834 <UART_SetConfig+0x2cc>)
 8004774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004778:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800477c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004780:	d01a      	beq.n	80047b8 <UART_SetConfig+0x250>
 8004782:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004786:	d81b      	bhi.n	80047c0 <UART_SetConfig+0x258>
 8004788:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800478c:	d00c      	beq.n	80047a8 <UART_SetConfig+0x240>
 800478e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004792:	d815      	bhi.n	80047c0 <UART_SetConfig+0x258>
 8004794:	2b00      	cmp	r3, #0
 8004796:	d003      	beq.n	80047a0 <UART_SetConfig+0x238>
 8004798:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800479c:	d008      	beq.n	80047b0 <UART_SetConfig+0x248>
 800479e:	e00f      	b.n	80047c0 <UART_SetConfig+0x258>
 80047a0:	2300      	movs	r3, #0
 80047a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047a6:	e052      	b.n	800484e <UART_SetConfig+0x2e6>
 80047a8:	2302      	movs	r3, #2
 80047aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ae:	e04e      	b.n	800484e <UART_SetConfig+0x2e6>
 80047b0:	2304      	movs	r3, #4
 80047b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047b6:	e04a      	b.n	800484e <UART_SetConfig+0x2e6>
 80047b8:	2308      	movs	r3, #8
 80047ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047be:	e046      	b.n	800484e <UART_SetConfig+0x2e6>
 80047c0:	2310      	movs	r3, #16
 80047c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047c6:	e042      	b.n	800484e <UART_SetConfig+0x2e6>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a17      	ldr	r2, [pc, #92]	@ (800482c <UART_SetConfig+0x2c4>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d13a      	bne.n	8004848 <UART_SetConfig+0x2e0>
 80047d2:	4b18      	ldr	r3, [pc, #96]	@ (8004834 <UART_SetConfig+0x2cc>)
 80047d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80047dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80047e0:	d01a      	beq.n	8004818 <UART_SetConfig+0x2b0>
 80047e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80047e6:	d81b      	bhi.n	8004820 <UART_SetConfig+0x2b8>
 80047e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047ec:	d00c      	beq.n	8004808 <UART_SetConfig+0x2a0>
 80047ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047f2:	d815      	bhi.n	8004820 <UART_SetConfig+0x2b8>
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <UART_SetConfig+0x298>
 80047f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047fc:	d008      	beq.n	8004810 <UART_SetConfig+0x2a8>
 80047fe:	e00f      	b.n	8004820 <UART_SetConfig+0x2b8>
 8004800:	2300      	movs	r3, #0
 8004802:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004806:	e022      	b.n	800484e <UART_SetConfig+0x2e6>
 8004808:	2302      	movs	r3, #2
 800480a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800480e:	e01e      	b.n	800484e <UART_SetConfig+0x2e6>
 8004810:	2304      	movs	r3, #4
 8004812:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004816:	e01a      	b.n	800484e <UART_SetConfig+0x2e6>
 8004818:	2308      	movs	r3, #8
 800481a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800481e:	e016      	b.n	800484e <UART_SetConfig+0x2e6>
 8004820:	2310      	movs	r3, #16
 8004822:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004826:	e012      	b.n	800484e <UART_SetConfig+0x2e6>
 8004828:	efff69f3 	.word	0xefff69f3
 800482c:	40008000 	.word	0x40008000
 8004830:	40013800 	.word	0x40013800
 8004834:	40021000 	.word	0x40021000
 8004838:	40004400 	.word	0x40004400
 800483c:	40004800 	.word	0x40004800
 8004840:	40004c00 	.word	0x40004c00
 8004844:	40005000 	.word	0x40005000
 8004848:	2310      	movs	r3, #16
 800484a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a9f      	ldr	r2, [pc, #636]	@ (8004ad0 <UART_SetConfig+0x568>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d17a      	bne.n	800494e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004858:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800485c:	2b08      	cmp	r3, #8
 800485e:	d824      	bhi.n	80048aa <UART_SetConfig+0x342>
 8004860:	a201      	add	r2, pc, #4	@ (adr r2, 8004868 <UART_SetConfig+0x300>)
 8004862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004866:	bf00      	nop
 8004868:	0800488d 	.word	0x0800488d
 800486c:	080048ab 	.word	0x080048ab
 8004870:	08004895 	.word	0x08004895
 8004874:	080048ab 	.word	0x080048ab
 8004878:	0800489b 	.word	0x0800489b
 800487c:	080048ab 	.word	0x080048ab
 8004880:	080048ab 	.word	0x080048ab
 8004884:	080048ab 	.word	0x080048ab
 8004888:	080048a3 	.word	0x080048a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800488c:	f7fe fcda 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 8004890:	61f8      	str	r0, [r7, #28]
        break;
 8004892:	e010      	b.n	80048b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004894:	4b8f      	ldr	r3, [pc, #572]	@ (8004ad4 <UART_SetConfig+0x56c>)
 8004896:	61fb      	str	r3, [r7, #28]
        break;
 8004898:	e00d      	b.n	80048b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800489a:	f7fe fc3b 	bl	8003114 <HAL_RCC_GetSysClockFreq>
 800489e:	61f8      	str	r0, [r7, #28]
        break;
 80048a0:	e009      	b.n	80048b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048a6:	61fb      	str	r3, [r7, #28]
        break;
 80048a8:	e005      	b.n	80048b6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80048b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 80fb 	beq.w	8004ab4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	4613      	mov	r3, r2
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	4413      	add	r3, r2
 80048c8:	69fa      	ldr	r2, [r7, #28]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d305      	bcc.n	80048da <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048d4:	69fa      	ldr	r2, [r7, #28]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d903      	bls.n	80048e2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80048e0:	e0e8      	b.n	8004ab4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	2200      	movs	r2, #0
 80048e6:	461c      	mov	r4, r3
 80048e8:	4615      	mov	r5, r2
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	f04f 0300 	mov.w	r3, #0
 80048f2:	022b      	lsls	r3, r5, #8
 80048f4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80048f8:	0222      	lsls	r2, r4, #8
 80048fa:	68f9      	ldr	r1, [r7, #12]
 80048fc:	6849      	ldr	r1, [r1, #4]
 80048fe:	0849      	lsrs	r1, r1, #1
 8004900:	2000      	movs	r0, #0
 8004902:	4688      	mov	r8, r1
 8004904:	4681      	mov	r9, r0
 8004906:	eb12 0a08 	adds.w	sl, r2, r8
 800490a:	eb43 0b09 	adc.w	fp, r3, r9
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	603b      	str	r3, [r7, #0]
 8004916:	607a      	str	r2, [r7, #4]
 8004918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800491c:	4650      	mov	r0, sl
 800491e:	4659      	mov	r1, fp
 8004920:	f7fb fca6 	bl	8000270 <__aeabi_uldivmod>
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	4613      	mov	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004932:	d308      	bcc.n	8004946 <UART_SetConfig+0x3de>
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800493a:	d204      	bcs.n	8004946 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	60da      	str	r2, [r3, #12]
 8004944:	e0b6      	b.n	8004ab4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800494c:	e0b2      	b.n	8004ab4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004956:	d15e      	bne.n	8004a16 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004958:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800495c:	2b08      	cmp	r3, #8
 800495e:	d828      	bhi.n	80049b2 <UART_SetConfig+0x44a>
 8004960:	a201      	add	r2, pc, #4	@ (adr r2, 8004968 <UART_SetConfig+0x400>)
 8004962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004966:	bf00      	nop
 8004968:	0800498d 	.word	0x0800498d
 800496c:	08004995 	.word	0x08004995
 8004970:	0800499d 	.word	0x0800499d
 8004974:	080049b3 	.word	0x080049b3
 8004978:	080049a3 	.word	0x080049a3
 800497c:	080049b3 	.word	0x080049b3
 8004980:	080049b3 	.word	0x080049b3
 8004984:	080049b3 	.word	0x080049b3
 8004988:	080049ab 	.word	0x080049ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800498c:	f7fe fc5a 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 8004990:	61f8      	str	r0, [r7, #28]
        break;
 8004992:	e014      	b.n	80049be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004994:	f7fe fc6c 	bl	8003270 <HAL_RCC_GetPCLK2Freq>
 8004998:	61f8      	str	r0, [r7, #28]
        break;
 800499a:	e010      	b.n	80049be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800499c:	4b4d      	ldr	r3, [pc, #308]	@ (8004ad4 <UART_SetConfig+0x56c>)
 800499e:	61fb      	str	r3, [r7, #28]
        break;
 80049a0:	e00d      	b.n	80049be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049a2:	f7fe fbb7 	bl	8003114 <HAL_RCC_GetSysClockFreq>
 80049a6:	61f8      	str	r0, [r7, #28]
        break;
 80049a8:	e009      	b.n	80049be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049ae:	61fb      	str	r3, [r7, #28]
        break;
 80049b0:	e005      	b.n	80049be <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80049b2:	2300      	movs	r3, #0
 80049b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80049bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d077      	beq.n	8004ab4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	005a      	lsls	r2, r3, #1
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	085b      	lsrs	r3, r3, #1
 80049ce:	441a      	add	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	2b0f      	cmp	r3, #15
 80049de:	d916      	bls.n	8004a0e <UART_SetConfig+0x4a6>
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049e6:	d212      	bcs.n	8004a0e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	f023 030f 	bic.w	r3, r3, #15
 80049f0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	085b      	lsrs	r3, r3, #1
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	8afb      	ldrh	r3, [r7, #22]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	8afa      	ldrh	r2, [r7, #22]
 8004a0a:	60da      	str	r2, [r3, #12]
 8004a0c:	e052      	b.n	8004ab4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004a14:	e04e      	b.n	8004ab4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a16:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d827      	bhi.n	8004a6e <UART_SetConfig+0x506>
 8004a1e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a24 <UART_SetConfig+0x4bc>)
 8004a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a24:	08004a49 	.word	0x08004a49
 8004a28:	08004a51 	.word	0x08004a51
 8004a2c:	08004a59 	.word	0x08004a59
 8004a30:	08004a6f 	.word	0x08004a6f
 8004a34:	08004a5f 	.word	0x08004a5f
 8004a38:	08004a6f 	.word	0x08004a6f
 8004a3c:	08004a6f 	.word	0x08004a6f
 8004a40:	08004a6f 	.word	0x08004a6f
 8004a44:	08004a67 	.word	0x08004a67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a48:	f7fe fbfc 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 8004a4c:	61f8      	str	r0, [r7, #28]
        break;
 8004a4e:	e014      	b.n	8004a7a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a50:	f7fe fc0e 	bl	8003270 <HAL_RCC_GetPCLK2Freq>
 8004a54:	61f8      	str	r0, [r7, #28]
        break;
 8004a56:	e010      	b.n	8004a7a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a58:	4b1e      	ldr	r3, [pc, #120]	@ (8004ad4 <UART_SetConfig+0x56c>)
 8004a5a:	61fb      	str	r3, [r7, #28]
        break;
 8004a5c:	e00d      	b.n	8004a7a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a5e:	f7fe fb59 	bl	8003114 <HAL_RCC_GetSysClockFreq>
 8004a62:	61f8      	str	r0, [r7, #28]
        break;
 8004a64:	e009      	b.n	8004a7a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a6a:	61fb      	str	r3, [r7, #28]
        break;
 8004a6c:	e005      	b.n	8004a7a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004a78:	bf00      	nop
    }

    if (pclk != 0U)
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d019      	beq.n	8004ab4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	085a      	lsrs	r2, r3, #1
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	441a      	add	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a92:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	2b0f      	cmp	r3, #15
 8004a98:	d909      	bls.n	8004aae <UART_SetConfig+0x546>
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aa0:	d205      	bcs.n	8004aae <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	60da      	str	r2, [r3, #12]
 8004aac:	e002      	b.n	8004ab4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004ac0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3728      	adds	r7, #40	@ 0x28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ace:	bf00      	nop
 8004ad0:	40008000 	.word	0x40008000
 8004ad4:	00f42400 	.word	0x00f42400

08004ad8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae4:	f003 0308 	and.w	r3, r3, #8
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00a      	beq.n	8004b02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00a      	beq.n	8004b46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6c:	f003 0310 	and.w	r3, r3, #16
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00a      	beq.n	8004b8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8e:	f003 0320 	and.w	r3, r3, #32
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00a      	beq.n	8004bac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d01a      	beq.n	8004bee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bd6:	d10a      	bne.n	8004bee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00a      	beq.n	8004c10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	605a      	str	r2, [r3, #4]
  }
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b098      	sub	sp, #96	@ 0x60
 8004c20:	af02      	add	r7, sp, #8
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c2c:	f7fc fcb0 	bl	8001590 <HAL_GetTick>
 8004c30:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0308 	and.w	r3, r3, #8
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d12e      	bne.n	8004c9e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f88c 	bl	8004d6c <UART_WaitOnFlagUntilTimeout>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d021      	beq.n	8004c9e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c62:	e853 3f00 	ldrex	r3, [r3]
 8004c66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	461a      	mov	r2, r3
 8004c76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c78:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c7a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c80:	e841 2300 	strex	r3, r2, [r1]
 8004c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1e6      	bne.n	8004c5a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e062      	b.n	8004d64 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b04      	cmp	r3, #4
 8004caa:	d149      	bne.n	8004d40 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f856 	bl	8004d6c <UART_WaitOnFlagUntilTimeout>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d03c      	beq.n	8004d40 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cce:	e853 3f00 	ldrex	r3, [r3]
 8004cd2:	623b      	str	r3, [r7, #32]
   return(result);
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ce4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ce6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cec:	e841 2300 	strex	r3, r2, [r1]
 8004cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1e6      	bne.n	8004cc6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	3308      	adds	r3, #8
 8004cfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	e853 3f00 	ldrex	r3, [r3]
 8004d06:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0301 	bic.w	r3, r3, #1
 8004d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3308      	adds	r3, #8
 8004d16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d18:	61fa      	str	r2, [r7, #28]
 8004d1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1c:	69b9      	ldr	r1, [r7, #24]
 8004d1e:	69fa      	ldr	r2, [r7, #28]
 8004d20:	e841 2300 	strex	r3, r2, [r1]
 8004d24:	617b      	str	r3, [r7, #20]
   return(result);
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1e5      	bne.n	8004cf8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e011      	b.n	8004d64 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2220      	movs	r2, #32
 8004d44:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3758      	adds	r7, #88	@ 0x58
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	603b      	str	r3, [r7, #0]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d7c:	e04f      	b.n	8004e1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d84:	d04b      	beq.n	8004e1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d86:	f7fc fc03 	bl	8001590 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d302      	bcc.n	8004d9c <UART_WaitOnFlagUntilTimeout+0x30>
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e04e      	b.n	8004e3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0304 	and.w	r3, r3, #4
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d037      	beq.n	8004e1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2b80      	cmp	r3, #128	@ 0x80
 8004db2:	d034      	beq.n	8004e1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	2b40      	cmp	r3, #64	@ 0x40
 8004db8:	d031      	beq.n	8004e1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	69db      	ldr	r3, [r3, #28]
 8004dc0:	f003 0308 	and.w	r3, r3, #8
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d110      	bne.n	8004dea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2208      	movs	r2, #8
 8004dce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 f8ff 	bl	8004fd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2208      	movs	r2, #8
 8004dda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e029      	b.n	8004e3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004df4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004df8:	d111      	bne.n	8004e1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 f8e5 	bl	8004fd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e00f      	b.n	8004e3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	69da      	ldr	r2, [r3, #28]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	4013      	ands	r3, r2
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	bf0c      	ite	eq
 8004e2e:	2301      	moveq	r3, #1
 8004e30:	2300      	movne	r3, #0
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	461a      	mov	r2, r3
 8004e36:	79fb      	ldrb	r3, [r7, #7]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d0a0      	beq.n	8004d7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
	...

08004e48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b097      	sub	sp, #92	@ 0x5c
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	4613      	mov	r3, r2
 8004e54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	88fa      	ldrh	r2, [r7, #6]
 8004e60:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	88fa      	ldrh	r2, [r7, #6]
 8004e68:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e7a:	d10e      	bne.n	8004e9a <UART_Start_Receive_IT+0x52>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d105      	bne.n	8004e90 <UART_Start_Receive_IT+0x48>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004e8a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e8e:	e02d      	b.n	8004eec <UART_Start_Receive_IT+0xa4>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	22ff      	movs	r2, #255	@ 0xff
 8004e94:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e98:	e028      	b.n	8004eec <UART_Start_Receive_IT+0xa4>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10d      	bne.n	8004ebe <UART_Start_Receive_IT+0x76>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d104      	bne.n	8004eb4 <UART_Start_Receive_IT+0x6c>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	22ff      	movs	r2, #255	@ 0xff
 8004eae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004eb2:	e01b      	b.n	8004eec <UART_Start_Receive_IT+0xa4>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	227f      	movs	r2, #127	@ 0x7f
 8004eb8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ebc:	e016      	b.n	8004eec <UART_Start_Receive_IT+0xa4>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ec6:	d10d      	bne.n	8004ee4 <UART_Start_Receive_IT+0x9c>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d104      	bne.n	8004eda <UART_Start_Receive_IT+0x92>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	227f      	movs	r2, #127	@ 0x7f
 8004ed4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ed8:	e008      	b.n	8004eec <UART_Start_Receive_IT+0xa4>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	223f      	movs	r2, #63	@ 0x3f
 8004ede:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ee2:	e003      	b.n	8004eec <UART_Start_Receive_IT+0xa4>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2222      	movs	r2, #34	@ 0x22
 8004ef8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3308      	adds	r3, #8
 8004f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f06:	e853 3f00 	ldrex	r3, [r3]
 8004f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f0e:	f043 0301 	orr.w	r3, r3, #1
 8004f12:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	3308      	adds	r3, #8
 8004f1a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004f1c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004f1e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f20:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004f22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f24:	e841 2300 	strex	r3, r2, [r1]
 8004f28:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004f2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1e5      	bne.n	8004efc <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f38:	d107      	bne.n	8004f4a <UART_Start_Receive_IT+0x102>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d103      	bne.n	8004f4a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	4a21      	ldr	r2, [pc, #132]	@ (8004fcc <UART_Start_Receive_IT+0x184>)
 8004f46:	669a      	str	r2, [r3, #104]	@ 0x68
 8004f48:	e002      	b.n	8004f50 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	4a20      	ldr	r2, [pc, #128]	@ (8004fd0 <UART_Start_Receive_IT+0x188>)
 8004f4e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d019      	beq.n	8004f8c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f60:	e853 3f00 	ldrex	r3, [r3]
 8004f64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f68:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004f6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	461a      	mov	r2, r3
 8004f74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f76:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f78:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f7e:	e841 2300 	strex	r3, r2, [r1]
 8004f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1e6      	bne.n	8004f58 <UART_Start_Receive_IT+0x110>
 8004f8a:	e018      	b.n	8004fbe <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	e853 3f00 	ldrex	r3, [r3]
 8004f98:	613b      	str	r3, [r7, #16]
   return(result);
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	f043 0320 	orr.w	r3, r3, #32
 8004fa0:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004faa:	623b      	str	r3, [r7, #32]
 8004fac:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fae:	69f9      	ldr	r1, [r7, #28]
 8004fb0:	6a3a      	ldr	r2, [r7, #32]
 8004fb2:	e841 2300 	strex	r3, r2, [r1]
 8004fb6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1e6      	bne.n	8004f8c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	375c      	adds	r7, #92	@ 0x5c
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr
 8004fcc:	080052d9 	.word	0x080052d9
 8004fd0:	0800511d 	.word	0x0800511d

08004fd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b095      	sub	sp, #84	@ 0x54
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fe4:	e853 3f00 	ldrex	r3, [r3]
 8004fe8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ff0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ffa:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ffc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005000:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005002:	e841 2300 	strex	r3, r2, [r1]
 8005006:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1e6      	bne.n	8004fdc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	3308      	adds	r3, #8
 8005014:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	e853 3f00 	ldrex	r3, [r3]
 800501c:	61fb      	str	r3, [r7, #28]
   return(result);
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	f023 0301 	bic.w	r3, r3, #1
 8005024:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3308      	adds	r3, #8
 800502c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800502e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005030:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005032:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005034:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005036:	e841 2300 	strex	r3, r2, [r1]
 800503a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800503c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1e5      	bne.n	800500e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005046:	2b01      	cmp	r3, #1
 8005048:	d118      	bne.n	800507c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	e853 3f00 	ldrex	r3, [r3]
 8005056:	60bb      	str	r3, [r7, #8]
   return(result);
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f023 0310 	bic.w	r3, r3, #16
 800505e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	461a      	mov	r2, r3
 8005066:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005068:	61bb      	str	r3, [r7, #24]
 800506a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506c:	6979      	ldr	r1, [r7, #20]
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	e841 2300 	strex	r3, r2, [r1]
 8005074:	613b      	str	r3, [r7, #16]
   return(result);
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1e6      	bne.n	800504a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2220      	movs	r2, #32
 8005080:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005090:	bf00      	nop
 8005092:	3754      	adds	r7, #84	@ 0x54
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f7ff fa3e 	bl	800453c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050c0:	bf00      	nop
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b088      	sub	sp, #32
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	e853 3f00 	ldrex	r3, [r3]
 80050dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050e4:	61fb      	str	r3, [r7, #28]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	461a      	mov	r2, r3
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	61bb      	str	r3, [r7, #24]
 80050f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f2:	6979      	ldr	r1, [r7, #20]
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	e841 2300 	strex	r3, r2, [r1]
 80050fa:	613b      	str	r3, [r7, #16]
   return(result);
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1e6      	bne.n	80050d0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2220      	movs	r2, #32
 8005106:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7ff fa0a 	bl	8004528 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005114:	bf00      	nop
 8005116:	3720      	adds	r7, #32
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b09c      	sub	sp, #112	@ 0x70
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800512a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005134:	2b22      	cmp	r3, #34	@ 0x22
 8005136:	f040 80be 	bne.w	80052b6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005140:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005144:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005148:	b2d9      	uxtb	r1, r3
 800514a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800514e:	b2da      	uxtb	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005154:	400a      	ands	r2, r1
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800516a:	b29b      	uxth	r3, r3
 800516c:	3b01      	subs	r3, #1
 800516e:	b29a      	uxth	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800517c:	b29b      	uxth	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	f040 80a3 	bne.w	80052ca <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005192:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005194:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005198:	66bb      	str	r3, [r7, #104]	@ 0x68
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80051b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e6      	bne.n	8005184 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	3308      	adds	r3, #8
 80051bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c0:	e853 3f00 	ldrex	r3, [r3]
 80051c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051c8:	f023 0301 	bic.w	r3, r3, #1
 80051cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	3308      	adds	r3, #8
 80051d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80051d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80051d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051de:	e841 2300 	strex	r3, r2, [r1]
 80051e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1e5      	bne.n	80051b6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a34      	ldr	r2, [pc, #208]	@ (80052d4 <UART_RxISR_8BIT+0x1b8>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d01f      	beq.n	8005248 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d018      	beq.n	8005248 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521e:	e853 3f00 	ldrex	r3, [r3]
 8005222:	623b      	str	r3, [r7, #32]
   return(result);
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800522a:	663b      	str	r3, [r7, #96]	@ 0x60
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	461a      	mov	r2, r3
 8005232:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005234:	633b      	str	r3, [r7, #48]	@ 0x30
 8005236:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005238:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800523a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800523c:	e841 2300 	strex	r3, r2, [r1]
 8005240:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1e6      	bne.n	8005216 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800524c:	2b01      	cmp	r3, #1
 800524e:	d12e      	bne.n	80052ae <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	e853 3f00 	ldrex	r3, [r3]
 8005262:	60fb      	str	r3, [r7, #12]
   return(result);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f023 0310 	bic.w	r3, r3, #16
 800526a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	461a      	mov	r2, r3
 8005272:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005274:	61fb      	str	r3, [r7, #28]
 8005276:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005278:	69b9      	ldr	r1, [r7, #24]
 800527a:	69fa      	ldr	r2, [r7, #28]
 800527c:	e841 2300 	strex	r3, r2, [r1]
 8005280:	617b      	str	r3, [r7, #20]
   return(result);
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1e6      	bne.n	8005256 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	f003 0310 	and.w	r3, r3, #16
 8005292:	2b10      	cmp	r3, #16
 8005294:	d103      	bne.n	800529e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2210      	movs	r2, #16
 800529c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80052a4:	4619      	mov	r1, r3
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7ff f952 	bl	8004550 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052ac:	e00d      	b.n	80052ca <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7fb fa64 	bl	800077c <HAL_UART_RxCpltCallback>
}
 80052b4:	e009      	b.n	80052ca <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	8b1b      	ldrh	r3, [r3, #24]
 80052bc:	b29a      	uxth	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0208 	orr.w	r2, r2, #8
 80052c6:	b292      	uxth	r2, r2
 80052c8:	831a      	strh	r2, [r3, #24]
}
 80052ca:	bf00      	nop
 80052cc:	3770      	adds	r7, #112	@ 0x70
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	40008000 	.word	0x40008000

080052d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b09c      	sub	sp, #112	@ 0x70
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80052e6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052f0:	2b22      	cmp	r3, #34	@ 0x22
 80052f2:	f040 80be 	bne.w	8005472 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80052fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005304:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005306:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800530a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800530e:	4013      	ands	r3, r2
 8005310:	b29a      	uxth	r2, r3
 8005312:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005314:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800531a:	1c9a      	adds	r2, r3, #2
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005326:	b29b      	uxth	r3, r3
 8005328:	3b01      	subs	r3, #1
 800532a:	b29a      	uxth	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005338:	b29b      	uxth	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	f040 80a3 	bne.w	8005486 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005346:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005348:	e853 3f00 	ldrex	r3, [r3]
 800534c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800534e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005350:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005354:	667b      	str	r3, [r7, #100]	@ 0x64
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	461a      	mov	r2, r3
 800535c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800535e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005360:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005362:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005364:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005366:	e841 2300 	strex	r3, r2, [r1]
 800536a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800536c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1e6      	bne.n	8005340 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3308      	adds	r3, #8
 8005378:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800537c:	e853 3f00 	ldrex	r3, [r3]
 8005380:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005384:	f023 0301 	bic.w	r3, r3, #1
 8005388:	663b      	str	r3, [r7, #96]	@ 0x60
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3308      	adds	r3, #8
 8005390:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005392:	643a      	str	r2, [r7, #64]	@ 0x40
 8005394:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005396:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005398:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800539a:	e841 2300 	strex	r3, r2, [r1]
 800539e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1e5      	bne.n	8005372 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2220      	movs	r2, #32
 80053aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a34      	ldr	r2, [pc, #208]	@ (8005490 <UART_RxISR_16BIT+0x1b8>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d01f      	beq.n	8005404 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d018      	beq.n	8005404 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	e853 3f00 	ldrex	r3, [r3]
 80053de:	61fb      	str	r3, [r7, #28]
   return(result);
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80053e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	461a      	mov	r2, r3
 80053ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053f2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053f8:	e841 2300 	strex	r3, r2, [r1]
 80053fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1e6      	bne.n	80053d2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005408:	2b01      	cmp	r3, #1
 800540a:	d12e      	bne.n	800546a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	e853 3f00 	ldrex	r3, [r3]
 800541e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f023 0310 	bic.w	r3, r3, #16
 8005426:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	461a      	mov	r2, r3
 800542e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005430:	61bb      	str	r3, [r7, #24]
 8005432:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005434:	6979      	ldr	r1, [r7, #20]
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	e841 2300 	strex	r3, r2, [r1]
 800543c:	613b      	str	r3, [r7, #16]
   return(result);
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1e6      	bne.n	8005412 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	f003 0310 	and.w	r3, r3, #16
 800544e:	2b10      	cmp	r3, #16
 8005450:	d103      	bne.n	800545a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2210      	movs	r2, #16
 8005458:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005460:	4619      	mov	r1, r3
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7ff f874 	bl	8004550 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005468:	e00d      	b.n	8005486 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7fb f986 	bl	800077c <HAL_UART_RxCpltCallback>
}
 8005470:	e009      	b.n	8005486 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	8b1b      	ldrh	r3, [r3, #24]
 8005478:	b29a      	uxth	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0208 	orr.w	r2, r2, #8
 8005482:	b292      	uxth	r2, r2
 8005484:	831a      	strh	r2, [r3, #24]
}
 8005486:	bf00      	nop
 8005488:	3770      	adds	r7, #112	@ 0x70
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	40008000 	.word	0x40008000

08005494 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80054a8:	b480      	push	{r7}
 80054aa:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80054ac:	bf00      	nop
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
	...

080054b8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af04      	add	r7, sp, #16
 80054be:	4603      	mov	r3, r0
 80054c0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80054c2:	f04f 33ff 	mov.w	r3, #4294967295
 80054c6:	9302      	str	r3, [sp, #8]
 80054c8:	2301      	movs	r3, #1
 80054ca:	9301      	str	r3, [sp, #4]
 80054cc:	1dfb      	adds	r3, r7, #7
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	2301      	movs	r3, #1
 80054d2:	2200      	movs	r2, #0
 80054d4:	2178      	movs	r1, #120	@ 0x78
 80054d6:	4803      	ldr	r0, [pc, #12]	@ (80054e4 <ssd1306_WriteCommand+0x2c>)
 80054d8:	f7fc fcc2 	bl	8001e60 <HAL_I2C_Mem_Write>
}
 80054dc:	bf00      	nop
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	200000c0 	.word	0x200000c0

080054e8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af04      	add	r7, sp, #16
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	f04f 32ff 	mov.w	r2, #4294967295
 80054fa:	9202      	str	r2, [sp, #8]
 80054fc:	9301      	str	r3, [sp, #4]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	2301      	movs	r3, #1
 8005504:	2240      	movs	r2, #64	@ 0x40
 8005506:	2178      	movs	r1, #120	@ 0x78
 8005508:	4803      	ldr	r0, [pc, #12]	@ (8005518 <ssd1306_WriteData+0x30>)
 800550a:	f7fc fca9 	bl	8001e60 <HAL_I2C_Mem_Write>
}
 800550e:	bf00      	nop
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	200000c0 	.word	0x200000c0

0800551c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800551c:	b580      	push	{r7, lr}
 800551e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8005520:	f7ff ffc2 	bl	80054a8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8005524:	2064      	movs	r0, #100	@ 0x64
 8005526:	f7fc f83f 	bl	80015a8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800552a:	2000      	movs	r0, #0
 800552c:	f000 f9d6 	bl	80058dc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8005530:	2020      	movs	r0, #32
 8005532:	f7ff ffc1 	bl	80054b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8005536:	2000      	movs	r0, #0
 8005538:	f7ff ffbe 	bl	80054b8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800553c:	20b0      	movs	r0, #176	@ 0xb0
 800553e:	f7ff ffbb 	bl	80054b8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8005542:	20c8      	movs	r0, #200	@ 0xc8
 8005544:	f7ff ffb8 	bl	80054b8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8005548:	2000      	movs	r0, #0
 800554a:	f7ff ffb5 	bl	80054b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800554e:	2010      	movs	r0, #16
 8005550:	f7ff ffb2 	bl	80054b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8005554:	2040      	movs	r0, #64	@ 0x40
 8005556:	f7ff ffaf 	bl	80054b8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800555a:	20ff      	movs	r0, #255	@ 0xff
 800555c:	f000 f9aa 	bl	80058b4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8005560:	20a1      	movs	r0, #161	@ 0xa1
 8005562:	f7ff ffa9 	bl	80054b8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8005566:	20a6      	movs	r0, #166	@ 0xa6
 8005568:	f7ff ffa6 	bl	80054b8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800556c:	20a8      	movs	r0, #168	@ 0xa8
 800556e:	f7ff ffa3 	bl	80054b8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8005572:	203f      	movs	r0, #63	@ 0x3f
 8005574:	f7ff ffa0 	bl	80054b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8005578:	20a4      	movs	r0, #164	@ 0xa4
 800557a:	f7ff ff9d 	bl	80054b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800557e:	20d3      	movs	r0, #211	@ 0xd3
 8005580:	f7ff ff9a 	bl	80054b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8005584:	2000      	movs	r0, #0
 8005586:	f7ff ff97 	bl	80054b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800558a:	20d5      	movs	r0, #213	@ 0xd5
 800558c:	f7ff ff94 	bl	80054b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8005590:	20f0      	movs	r0, #240	@ 0xf0
 8005592:	f7ff ff91 	bl	80054b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8005596:	20d9      	movs	r0, #217	@ 0xd9
 8005598:	f7ff ff8e 	bl	80054b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800559c:	2022      	movs	r0, #34	@ 0x22
 800559e:	f7ff ff8b 	bl	80054b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80055a2:	20da      	movs	r0, #218	@ 0xda
 80055a4:	f7ff ff88 	bl	80054b8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80055a8:	2012      	movs	r0, #18
 80055aa:	f7ff ff85 	bl	80054b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80055ae:	20db      	movs	r0, #219	@ 0xdb
 80055b0:	f7ff ff82 	bl	80054b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80055b4:	2020      	movs	r0, #32
 80055b6:	f7ff ff7f 	bl	80054b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80055ba:	208d      	movs	r0, #141	@ 0x8d
 80055bc:	f7ff ff7c 	bl	80054b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80055c0:	2014      	movs	r0, #20
 80055c2:	f7ff ff79 	bl	80054b8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80055c6:	2001      	movs	r0, #1
 80055c8:	f000 f988 	bl	80058dc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80055cc:	2000      	movs	r0, #0
 80055ce:	f000 f80f 	bl	80055f0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80055d2:	f000 f825 	bl	8005620 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80055d6:	4b05      	ldr	r3, [pc, #20]	@ (80055ec <ssd1306_Init+0xd0>)
 80055d8:	2200      	movs	r2, #0
 80055da:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80055dc:	4b03      	ldr	r3, [pc, #12]	@ (80055ec <ssd1306_Init+0xd0>)
 80055de:	2200      	movs	r2, #0
 80055e0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80055e2:	4b02      	ldr	r3, [pc, #8]	@ (80055ec <ssd1306_Init+0xd0>)
 80055e4:	2201      	movs	r2, #1
 80055e6:	711a      	strb	r2, [r3, #4]
}
 80055e8:	bf00      	nop
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	200005d0 	.word	0x200005d0

080055f0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	4603      	mov	r3, r0
 80055f8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80055fa:	79fb      	ldrb	r3, [r7, #7]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <ssd1306_Fill+0x14>
 8005600:	2300      	movs	r3, #0
 8005602:	e000      	b.n	8005606 <ssd1306_Fill+0x16>
 8005604:	23ff      	movs	r3, #255	@ 0xff
 8005606:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800560a:	4619      	mov	r1, r3
 800560c:	4803      	ldr	r0, [pc, #12]	@ (800561c <ssd1306_Fill+0x2c>)
 800560e:	f000 fbc7 	bl	8005da0 <memset>
}
 8005612:	bf00      	nop
 8005614:	3708      	adds	r7, #8
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	200001d0 	.word	0x200001d0

08005620 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005626:	2300      	movs	r3, #0
 8005628:	71fb      	strb	r3, [r7, #7]
 800562a:	e016      	b.n	800565a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800562c:	79fb      	ldrb	r3, [r7, #7]
 800562e:	3b50      	subs	r3, #80	@ 0x50
 8005630:	b2db      	uxtb	r3, r3
 8005632:	4618      	mov	r0, r3
 8005634:	f7ff ff40 	bl	80054b8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8005638:	2000      	movs	r0, #0
 800563a:	f7ff ff3d 	bl	80054b8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800563e:	2010      	movs	r0, #16
 8005640:	f7ff ff3a 	bl	80054b8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8005644:	79fb      	ldrb	r3, [r7, #7]
 8005646:	01db      	lsls	r3, r3, #7
 8005648:	4a08      	ldr	r2, [pc, #32]	@ (800566c <ssd1306_UpdateScreen+0x4c>)
 800564a:	4413      	add	r3, r2
 800564c:	2180      	movs	r1, #128	@ 0x80
 800564e:	4618      	mov	r0, r3
 8005650:	f7ff ff4a 	bl	80054e8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005654:	79fb      	ldrb	r3, [r7, #7]
 8005656:	3301      	adds	r3, #1
 8005658:	71fb      	strb	r3, [r7, #7]
 800565a:	79fb      	ldrb	r3, [r7, #7]
 800565c:	2b07      	cmp	r3, #7
 800565e:	d9e5      	bls.n	800562c <ssd1306_UpdateScreen+0xc>
    }
}
 8005660:	bf00      	nop
 8005662:	bf00      	nop
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	200001d0 	.word	0x200001d0

08005670 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	4603      	mov	r3, r0
 8005678:	71fb      	strb	r3, [r7, #7]
 800567a:	460b      	mov	r3, r1
 800567c:	71bb      	strb	r3, [r7, #6]
 800567e:	4613      	mov	r3, r2
 8005680:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8005682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005686:	2b00      	cmp	r3, #0
 8005688:	db3d      	blt.n	8005706 <ssd1306_DrawPixel+0x96>
 800568a:	79bb      	ldrb	r3, [r7, #6]
 800568c:	2b3f      	cmp	r3, #63	@ 0x3f
 800568e:	d83a      	bhi.n	8005706 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8005690:	797b      	ldrb	r3, [r7, #5]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d11a      	bne.n	80056cc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005696:	79fa      	ldrb	r2, [r7, #7]
 8005698:	79bb      	ldrb	r3, [r7, #6]
 800569a:	08db      	lsrs	r3, r3, #3
 800569c:	b2d8      	uxtb	r0, r3
 800569e:	4603      	mov	r3, r0
 80056a0:	01db      	lsls	r3, r3, #7
 80056a2:	4413      	add	r3, r2
 80056a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005714 <ssd1306_DrawPixel+0xa4>)
 80056a6:	5cd3      	ldrb	r3, [r2, r3]
 80056a8:	b25a      	sxtb	r2, r3
 80056aa:	79bb      	ldrb	r3, [r7, #6]
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	2101      	movs	r1, #1
 80056b2:	fa01 f303 	lsl.w	r3, r1, r3
 80056b6:	b25b      	sxtb	r3, r3
 80056b8:	4313      	orrs	r3, r2
 80056ba:	b259      	sxtb	r1, r3
 80056bc:	79fa      	ldrb	r2, [r7, #7]
 80056be:	4603      	mov	r3, r0
 80056c0:	01db      	lsls	r3, r3, #7
 80056c2:	4413      	add	r3, r2
 80056c4:	b2c9      	uxtb	r1, r1
 80056c6:	4a13      	ldr	r2, [pc, #76]	@ (8005714 <ssd1306_DrawPixel+0xa4>)
 80056c8:	54d1      	strb	r1, [r2, r3]
 80056ca:	e01d      	b.n	8005708 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80056cc:	79fa      	ldrb	r2, [r7, #7]
 80056ce:	79bb      	ldrb	r3, [r7, #6]
 80056d0:	08db      	lsrs	r3, r3, #3
 80056d2:	b2d8      	uxtb	r0, r3
 80056d4:	4603      	mov	r3, r0
 80056d6:	01db      	lsls	r3, r3, #7
 80056d8:	4413      	add	r3, r2
 80056da:	4a0e      	ldr	r2, [pc, #56]	@ (8005714 <ssd1306_DrawPixel+0xa4>)
 80056dc:	5cd3      	ldrb	r3, [r2, r3]
 80056de:	b25a      	sxtb	r2, r3
 80056e0:	79bb      	ldrb	r3, [r7, #6]
 80056e2:	f003 0307 	and.w	r3, r3, #7
 80056e6:	2101      	movs	r1, #1
 80056e8:	fa01 f303 	lsl.w	r3, r1, r3
 80056ec:	b25b      	sxtb	r3, r3
 80056ee:	43db      	mvns	r3, r3
 80056f0:	b25b      	sxtb	r3, r3
 80056f2:	4013      	ands	r3, r2
 80056f4:	b259      	sxtb	r1, r3
 80056f6:	79fa      	ldrb	r2, [r7, #7]
 80056f8:	4603      	mov	r3, r0
 80056fa:	01db      	lsls	r3, r3, #7
 80056fc:	4413      	add	r3, r2
 80056fe:	b2c9      	uxtb	r1, r1
 8005700:	4a04      	ldr	r2, [pc, #16]	@ (8005714 <ssd1306_DrawPixel+0xa4>)
 8005702:	54d1      	strb	r1, [r2, r3]
 8005704:	e000      	b.n	8005708 <ssd1306_DrawPixel+0x98>
        return;
 8005706:	bf00      	nop
    }
}
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	200001d0 	.word	0x200001d0

08005718 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8005718:	b590      	push	{r4, r7, lr}
 800571a:	b089      	sub	sp, #36	@ 0x24
 800571c:	af00      	add	r7, sp, #0
 800571e:	4604      	mov	r4, r0
 8005720:	4638      	mov	r0, r7
 8005722:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8005726:	4623      	mov	r3, r4
 8005728:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800572a:	7bfb      	ldrb	r3, [r7, #15]
 800572c:	2b1f      	cmp	r3, #31
 800572e:	d902      	bls.n	8005736 <ssd1306_WriteChar+0x1e>
 8005730:	7bfb      	ldrb	r3, [r7, #15]
 8005732:	2b7e      	cmp	r3, #126	@ 0x7e
 8005734:	d901      	bls.n	800573a <ssd1306_WriteChar+0x22>
        return 0;
 8005736:	2300      	movs	r3, #0
 8005738:	e077      	b.n	800582a <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800573a:	4b3e      	ldr	r3, [pc, #248]	@ (8005834 <ssd1306_WriteChar+0x11c>)
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	461a      	mov	r2, r3
 8005740:	783b      	ldrb	r3, [r7, #0]
 8005742:	4413      	add	r3, r2
 8005744:	2b80      	cmp	r3, #128	@ 0x80
 8005746:	dc06      	bgt.n	8005756 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8005748:	4b3a      	ldr	r3, [pc, #232]	@ (8005834 <ssd1306_WriteChar+0x11c>)
 800574a:	885b      	ldrh	r3, [r3, #2]
 800574c:	461a      	mov	r2, r3
 800574e:	787b      	ldrb	r3, [r7, #1]
 8005750:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8005752:	2b40      	cmp	r3, #64	@ 0x40
 8005754:	dd01      	ble.n	800575a <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8005756:	2300      	movs	r3, #0
 8005758:	e067      	b.n	800582a <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800575a:	2300      	movs	r3, #0
 800575c:	61fb      	str	r3, [r7, #28]
 800575e:	e04e      	b.n	80057fe <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	7bfb      	ldrb	r3, [r7, #15]
 8005764:	3b20      	subs	r3, #32
 8005766:	7879      	ldrb	r1, [r7, #1]
 8005768:	fb01 f303 	mul.w	r3, r1, r3
 800576c:	4619      	mov	r1, r3
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	440b      	add	r3, r1
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	4413      	add	r3, r2
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800577a:	2300      	movs	r3, #0
 800577c:	61bb      	str	r3, [r7, #24]
 800577e:	e036      	b.n	80057ee <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	fa02 f303 	lsl.w	r3, r2, r3
 8005788:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d013      	beq.n	80057b8 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005790:	4b28      	ldr	r3, [pc, #160]	@ (8005834 <ssd1306_WriteChar+0x11c>)
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	b2da      	uxtb	r2, r3
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	b2db      	uxtb	r3, r3
 800579a:	4413      	add	r3, r2
 800579c:	b2d8      	uxtb	r0, r3
 800579e:	4b25      	ldr	r3, [pc, #148]	@ (8005834 <ssd1306_WriteChar+0x11c>)
 80057a0:	885b      	ldrh	r3, [r3, #2]
 80057a2:	b2da      	uxtb	r2, r3
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	4413      	add	r3, r2
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80057b0:	4619      	mov	r1, r3
 80057b2:	f7ff ff5d 	bl	8005670 <ssd1306_DrawPixel>
 80057b6:	e017      	b.n	80057e8 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80057b8:	4b1e      	ldr	r3, [pc, #120]	@ (8005834 <ssd1306_WriteChar+0x11c>)
 80057ba:	881b      	ldrh	r3, [r3, #0]
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	4413      	add	r3, r2
 80057c4:	b2d8      	uxtb	r0, r3
 80057c6:	4b1b      	ldr	r3, [pc, #108]	@ (8005834 <ssd1306_WriteChar+0x11c>)
 80057c8:	885b      	ldrh	r3, [r3, #2]
 80057ca:	b2da      	uxtb	r2, r3
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	4413      	add	r3, r2
 80057d2:	b2d9      	uxtb	r1, r3
 80057d4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80057d8:	2b00      	cmp	r3, #0
 80057da:	bf0c      	ite	eq
 80057dc:	2301      	moveq	r3, #1
 80057de:	2300      	movne	r3, #0
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	461a      	mov	r2, r3
 80057e4:	f7ff ff44 	bl	8005670 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	3301      	adds	r3, #1
 80057ec:	61bb      	str	r3, [r7, #24]
 80057ee:	783b      	ldrb	r3, [r7, #0]
 80057f0:	461a      	mov	r2, r3
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d3c3      	bcc.n	8005780 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	3301      	adds	r3, #1
 80057fc:	61fb      	str	r3, [r7, #28]
 80057fe:	787b      	ldrb	r3, [r7, #1]
 8005800:	461a      	mov	r2, r3
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	4293      	cmp	r3, r2
 8005806:	d3ab      	bcc.n	8005760 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8005808:	4b0a      	ldr	r3, [pc, #40]	@ (8005834 <ssd1306_WriteChar+0x11c>)
 800580a:	881b      	ldrh	r3, [r3, #0]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	2a00      	cmp	r2, #0
 8005810:	d005      	beq.n	800581e <ssd1306_WriteChar+0x106>
 8005812:	68b9      	ldr	r1, [r7, #8]
 8005814:	7bfa      	ldrb	r2, [r7, #15]
 8005816:	3a20      	subs	r2, #32
 8005818:	440a      	add	r2, r1
 800581a:	7812      	ldrb	r2, [r2, #0]
 800581c:	e000      	b.n	8005820 <ssd1306_WriteChar+0x108>
 800581e:	783a      	ldrb	r2, [r7, #0]
 8005820:	4413      	add	r3, r2
 8005822:	b29a      	uxth	r2, r3
 8005824:	4b03      	ldr	r3, [pc, #12]	@ (8005834 <ssd1306_WriteChar+0x11c>)
 8005826:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8005828:	7bfb      	ldrb	r3, [r7, #15]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3724      	adds	r7, #36	@ 0x24
 800582e:	46bd      	mov	sp, r7
 8005830:	bd90      	pop	{r4, r7, pc}
 8005832:	bf00      	nop
 8005834:	200005d0 	.word	0x200005d0

08005838 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af02      	add	r7, sp, #8
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	4638      	mov	r0, r7
 8005842:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8005846:	e013      	b.n	8005870 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	7818      	ldrb	r0, [r3, #0]
 800584c:	7e3b      	ldrb	r3, [r7, #24]
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	463b      	mov	r3, r7
 8005852:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005854:	f7ff ff60 	bl	8005718 <ssd1306_WriteChar>
 8005858:	4603      	mov	r3, r0
 800585a:	461a      	mov	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	429a      	cmp	r2, r3
 8005862:	d002      	beq.n	800586a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	e008      	b.n	800587c <ssd1306_WriteString+0x44>
        }
        str++;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	3301      	adds	r3, #1
 800586e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1e7      	bne.n	8005848 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	781b      	ldrb	r3, [r3, #0]
}
 800587c:	4618      	mov	r0, r3
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	4603      	mov	r3, r0
 800588c:	460a      	mov	r2, r1
 800588e:	71fb      	strb	r3, [r7, #7]
 8005890:	4613      	mov	r3, r2
 8005892:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8005894:	79fb      	ldrb	r3, [r7, #7]
 8005896:	b29a      	uxth	r2, r3
 8005898:	4b05      	ldr	r3, [pc, #20]	@ (80058b0 <ssd1306_SetCursor+0x2c>)
 800589a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800589c:	79bb      	ldrb	r3, [r7, #6]
 800589e:	b29a      	uxth	r2, r3
 80058a0:	4b03      	ldr	r3, [pc, #12]	@ (80058b0 <ssd1306_SetCursor+0x2c>)
 80058a2:	805a      	strh	r2, [r3, #2]
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	200005d0 	.word	0x200005d0

080058b4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	4603      	mov	r3, r0
 80058bc:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80058be:	2381      	movs	r3, #129	@ 0x81
 80058c0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7ff fdf7 	bl	80054b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80058ca:	79fb      	ldrb	r3, [r7, #7]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7ff fdf3 	bl	80054b8 <ssd1306_WriteCommand>
}
 80058d2:	bf00      	nop
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
	...

080058dc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	4603      	mov	r3, r0
 80058e4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80058e6:	79fb      	ldrb	r3, [r7, #7]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d005      	beq.n	80058f8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80058ec:	23af      	movs	r3, #175	@ 0xaf
 80058ee:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80058f0:	4b08      	ldr	r3, [pc, #32]	@ (8005914 <ssd1306_SetDisplayOn+0x38>)
 80058f2:	2201      	movs	r2, #1
 80058f4:	715a      	strb	r2, [r3, #5]
 80058f6:	e004      	b.n	8005902 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80058f8:	23ae      	movs	r3, #174	@ 0xae
 80058fa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80058fc:	4b05      	ldr	r3, [pc, #20]	@ (8005914 <ssd1306_SetDisplayOn+0x38>)
 80058fe:	2200      	movs	r2, #0
 8005900:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8005902:	7bfb      	ldrb	r3, [r7, #15]
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff fdd7 	bl	80054b8 <ssd1306_WriteCommand>
}
 800590a:	bf00      	nop
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	200005d0 	.word	0x200005d0

08005918 <std>:
 8005918:	2300      	movs	r3, #0
 800591a:	b510      	push	{r4, lr}
 800591c:	4604      	mov	r4, r0
 800591e:	e9c0 3300 	strd	r3, r3, [r0]
 8005922:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005926:	6083      	str	r3, [r0, #8]
 8005928:	8181      	strh	r1, [r0, #12]
 800592a:	6643      	str	r3, [r0, #100]	@ 0x64
 800592c:	81c2      	strh	r2, [r0, #14]
 800592e:	6183      	str	r3, [r0, #24]
 8005930:	4619      	mov	r1, r3
 8005932:	2208      	movs	r2, #8
 8005934:	305c      	adds	r0, #92	@ 0x5c
 8005936:	f000 fa33 	bl	8005da0 <memset>
 800593a:	4b0d      	ldr	r3, [pc, #52]	@ (8005970 <std+0x58>)
 800593c:	6263      	str	r3, [r4, #36]	@ 0x24
 800593e:	4b0d      	ldr	r3, [pc, #52]	@ (8005974 <std+0x5c>)
 8005940:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005942:	4b0d      	ldr	r3, [pc, #52]	@ (8005978 <std+0x60>)
 8005944:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005946:	4b0d      	ldr	r3, [pc, #52]	@ (800597c <std+0x64>)
 8005948:	6323      	str	r3, [r4, #48]	@ 0x30
 800594a:	4b0d      	ldr	r3, [pc, #52]	@ (8005980 <std+0x68>)
 800594c:	6224      	str	r4, [r4, #32]
 800594e:	429c      	cmp	r4, r3
 8005950:	d006      	beq.n	8005960 <std+0x48>
 8005952:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005956:	4294      	cmp	r4, r2
 8005958:	d002      	beq.n	8005960 <std+0x48>
 800595a:	33d0      	adds	r3, #208	@ 0xd0
 800595c:	429c      	cmp	r4, r3
 800595e:	d105      	bne.n	800596c <std+0x54>
 8005960:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005968:	f000 ba92 	b.w	8005e90 <__retarget_lock_init_recursive>
 800596c:	bd10      	pop	{r4, pc}
 800596e:	bf00      	nop
 8005970:	08005bbd 	.word	0x08005bbd
 8005974:	08005bdf 	.word	0x08005bdf
 8005978:	08005c17 	.word	0x08005c17
 800597c:	08005c3b 	.word	0x08005c3b
 8005980:	200005d8 	.word	0x200005d8

08005984 <stdio_exit_handler>:
 8005984:	4a02      	ldr	r2, [pc, #8]	@ (8005990 <stdio_exit_handler+0xc>)
 8005986:	4903      	ldr	r1, [pc, #12]	@ (8005994 <stdio_exit_handler+0x10>)
 8005988:	4803      	ldr	r0, [pc, #12]	@ (8005998 <stdio_exit_handler+0x14>)
 800598a:	f000 b869 	b.w	8005a60 <_fwalk_sglue>
 800598e:	bf00      	nop
 8005990:	20000044 	.word	0x20000044
 8005994:	080069fd 	.word	0x080069fd
 8005998:	20000054 	.word	0x20000054

0800599c <cleanup_stdio>:
 800599c:	6841      	ldr	r1, [r0, #4]
 800599e:	4b0c      	ldr	r3, [pc, #48]	@ (80059d0 <cleanup_stdio+0x34>)
 80059a0:	4299      	cmp	r1, r3
 80059a2:	b510      	push	{r4, lr}
 80059a4:	4604      	mov	r4, r0
 80059a6:	d001      	beq.n	80059ac <cleanup_stdio+0x10>
 80059a8:	f001 f828 	bl	80069fc <_fflush_r>
 80059ac:	68a1      	ldr	r1, [r4, #8]
 80059ae:	4b09      	ldr	r3, [pc, #36]	@ (80059d4 <cleanup_stdio+0x38>)
 80059b0:	4299      	cmp	r1, r3
 80059b2:	d002      	beq.n	80059ba <cleanup_stdio+0x1e>
 80059b4:	4620      	mov	r0, r4
 80059b6:	f001 f821 	bl	80069fc <_fflush_r>
 80059ba:	68e1      	ldr	r1, [r4, #12]
 80059bc:	4b06      	ldr	r3, [pc, #24]	@ (80059d8 <cleanup_stdio+0x3c>)
 80059be:	4299      	cmp	r1, r3
 80059c0:	d004      	beq.n	80059cc <cleanup_stdio+0x30>
 80059c2:	4620      	mov	r0, r4
 80059c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059c8:	f001 b818 	b.w	80069fc <_fflush_r>
 80059cc:	bd10      	pop	{r4, pc}
 80059ce:	bf00      	nop
 80059d0:	200005d8 	.word	0x200005d8
 80059d4:	20000640 	.word	0x20000640
 80059d8:	200006a8 	.word	0x200006a8

080059dc <global_stdio_init.part.0>:
 80059dc:	b510      	push	{r4, lr}
 80059de:	4b0b      	ldr	r3, [pc, #44]	@ (8005a0c <global_stdio_init.part.0+0x30>)
 80059e0:	4c0b      	ldr	r4, [pc, #44]	@ (8005a10 <global_stdio_init.part.0+0x34>)
 80059e2:	4a0c      	ldr	r2, [pc, #48]	@ (8005a14 <global_stdio_init.part.0+0x38>)
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	4620      	mov	r0, r4
 80059e8:	2200      	movs	r2, #0
 80059ea:	2104      	movs	r1, #4
 80059ec:	f7ff ff94 	bl	8005918 <std>
 80059f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80059f4:	2201      	movs	r2, #1
 80059f6:	2109      	movs	r1, #9
 80059f8:	f7ff ff8e 	bl	8005918 <std>
 80059fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a00:	2202      	movs	r2, #2
 8005a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a06:	2112      	movs	r1, #18
 8005a08:	f7ff bf86 	b.w	8005918 <std>
 8005a0c:	20000710 	.word	0x20000710
 8005a10:	200005d8 	.word	0x200005d8
 8005a14:	08005985 	.word	0x08005985

08005a18 <__sfp_lock_acquire>:
 8005a18:	4801      	ldr	r0, [pc, #4]	@ (8005a20 <__sfp_lock_acquire+0x8>)
 8005a1a:	f000 ba3a 	b.w	8005e92 <__retarget_lock_acquire_recursive>
 8005a1e:	bf00      	nop
 8005a20:	20000719 	.word	0x20000719

08005a24 <__sfp_lock_release>:
 8005a24:	4801      	ldr	r0, [pc, #4]	@ (8005a2c <__sfp_lock_release+0x8>)
 8005a26:	f000 ba35 	b.w	8005e94 <__retarget_lock_release_recursive>
 8005a2a:	bf00      	nop
 8005a2c:	20000719 	.word	0x20000719

08005a30 <__sinit>:
 8005a30:	b510      	push	{r4, lr}
 8005a32:	4604      	mov	r4, r0
 8005a34:	f7ff fff0 	bl	8005a18 <__sfp_lock_acquire>
 8005a38:	6a23      	ldr	r3, [r4, #32]
 8005a3a:	b11b      	cbz	r3, 8005a44 <__sinit+0x14>
 8005a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a40:	f7ff bff0 	b.w	8005a24 <__sfp_lock_release>
 8005a44:	4b04      	ldr	r3, [pc, #16]	@ (8005a58 <__sinit+0x28>)
 8005a46:	6223      	str	r3, [r4, #32]
 8005a48:	4b04      	ldr	r3, [pc, #16]	@ (8005a5c <__sinit+0x2c>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1f5      	bne.n	8005a3c <__sinit+0xc>
 8005a50:	f7ff ffc4 	bl	80059dc <global_stdio_init.part.0>
 8005a54:	e7f2      	b.n	8005a3c <__sinit+0xc>
 8005a56:	bf00      	nop
 8005a58:	0800599d 	.word	0x0800599d
 8005a5c:	20000710 	.word	0x20000710

08005a60 <_fwalk_sglue>:
 8005a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a64:	4607      	mov	r7, r0
 8005a66:	4688      	mov	r8, r1
 8005a68:	4614      	mov	r4, r2
 8005a6a:	2600      	movs	r6, #0
 8005a6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a70:	f1b9 0901 	subs.w	r9, r9, #1
 8005a74:	d505      	bpl.n	8005a82 <_fwalk_sglue+0x22>
 8005a76:	6824      	ldr	r4, [r4, #0]
 8005a78:	2c00      	cmp	r4, #0
 8005a7a:	d1f7      	bne.n	8005a6c <_fwalk_sglue+0xc>
 8005a7c:	4630      	mov	r0, r6
 8005a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a82:	89ab      	ldrh	r3, [r5, #12]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d907      	bls.n	8005a98 <_fwalk_sglue+0x38>
 8005a88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	d003      	beq.n	8005a98 <_fwalk_sglue+0x38>
 8005a90:	4629      	mov	r1, r5
 8005a92:	4638      	mov	r0, r7
 8005a94:	47c0      	blx	r8
 8005a96:	4306      	orrs	r6, r0
 8005a98:	3568      	adds	r5, #104	@ 0x68
 8005a9a:	e7e9      	b.n	8005a70 <_fwalk_sglue+0x10>

08005a9c <iprintf>:
 8005a9c:	b40f      	push	{r0, r1, r2, r3}
 8005a9e:	b507      	push	{r0, r1, r2, lr}
 8005aa0:	4906      	ldr	r1, [pc, #24]	@ (8005abc <iprintf+0x20>)
 8005aa2:	ab04      	add	r3, sp, #16
 8005aa4:	6808      	ldr	r0, [r1, #0]
 8005aa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005aaa:	6881      	ldr	r1, [r0, #8]
 8005aac:	9301      	str	r3, [sp, #4]
 8005aae:	f000 fc7b 	bl	80063a8 <_vfiprintf_r>
 8005ab2:	b003      	add	sp, #12
 8005ab4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ab8:	b004      	add	sp, #16
 8005aba:	4770      	bx	lr
 8005abc:	20000050 	.word	0x20000050

08005ac0 <_puts_r>:
 8005ac0:	6a03      	ldr	r3, [r0, #32]
 8005ac2:	b570      	push	{r4, r5, r6, lr}
 8005ac4:	6884      	ldr	r4, [r0, #8]
 8005ac6:	4605      	mov	r5, r0
 8005ac8:	460e      	mov	r6, r1
 8005aca:	b90b      	cbnz	r3, 8005ad0 <_puts_r+0x10>
 8005acc:	f7ff ffb0 	bl	8005a30 <__sinit>
 8005ad0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ad2:	07db      	lsls	r3, r3, #31
 8005ad4:	d405      	bmi.n	8005ae2 <_puts_r+0x22>
 8005ad6:	89a3      	ldrh	r3, [r4, #12]
 8005ad8:	0598      	lsls	r0, r3, #22
 8005ada:	d402      	bmi.n	8005ae2 <_puts_r+0x22>
 8005adc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ade:	f000 f9d8 	bl	8005e92 <__retarget_lock_acquire_recursive>
 8005ae2:	89a3      	ldrh	r3, [r4, #12]
 8005ae4:	0719      	lsls	r1, r3, #28
 8005ae6:	d502      	bpl.n	8005aee <_puts_r+0x2e>
 8005ae8:	6923      	ldr	r3, [r4, #16]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d135      	bne.n	8005b5a <_puts_r+0x9a>
 8005aee:	4621      	mov	r1, r4
 8005af0:	4628      	mov	r0, r5
 8005af2:	f000 f8e5 	bl	8005cc0 <__swsetup_r>
 8005af6:	b380      	cbz	r0, 8005b5a <_puts_r+0x9a>
 8005af8:	f04f 35ff 	mov.w	r5, #4294967295
 8005afc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005afe:	07da      	lsls	r2, r3, #31
 8005b00:	d405      	bmi.n	8005b0e <_puts_r+0x4e>
 8005b02:	89a3      	ldrh	r3, [r4, #12]
 8005b04:	059b      	lsls	r3, r3, #22
 8005b06:	d402      	bmi.n	8005b0e <_puts_r+0x4e>
 8005b08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b0a:	f000 f9c3 	bl	8005e94 <__retarget_lock_release_recursive>
 8005b0e:	4628      	mov	r0, r5
 8005b10:	bd70      	pop	{r4, r5, r6, pc}
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	da04      	bge.n	8005b20 <_puts_r+0x60>
 8005b16:	69a2      	ldr	r2, [r4, #24]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	dc17      	bgt.n	8005b4c <_puts_r+0x8c>
 8005b1c:	290a      	cmp	r1, #10
 8005b1e:	d015      	beq.n	8005b4c <_puts_r+0x8c>
 8005b20:	6823      	ldr	r3, [r4, #0]
 8005b22:	1c5a      	adds	r2, r3, #1
 8005b24:	6022      	str	r2, [r4, #0]
 8005b26:	7019      	strb	r1, [r3, #0]
 8005b28:	68a3      	ldr	r3, [r4, #8]
 8005b2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	60a3      	str	r3, [r4, #8]
 8005b32:	2900      	cmp	r1, #0
 8005b34:	d1ed      	bne.n	8005b12 <_puts_r+0x52>
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	da11      	bge.n	8005b5e <_puts_r+0x9e>
 8005b3a:	4622      	mov	r2, r4
 8005b3c:	210a      	movs	r1, #10
 8005b3e:	4628      	mov	r0, r5
 8005b40:	f000 f87f 	bl	8005c42 <__swbuf_r>
 8005b44:	3001      	adds	r0, #1
 8005b46:	d0d7      	beq.n	8005af8 <_puts_r+0x38>
 8005b48:	250a      	movs	r5, #10
 8005b4a:	e7d7      	b.n	8005afc <_puts_r+0x3c>
 8005b4c:	4622      	mov	r2, r4
 8005b4e:	4628      	mov	r0, r5
 8005b50:	f000 f877 	bl	8005c42 <__swbuf_r>
 8005b54:	3001      	adds	r0, #1
 8005b56:	d1e7      	bne.n	8005b28 <_puts_r+0x68>
 8005b58:	e7ce      	b.n	8005af8 <_puts_r+0x38>
 8005b5a:	3e01      	subs	r6, #1
 8005b5c:	e7e4      	b.n	8005b28 <_puts_r+0x68>
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	1c5a      	adds	r2, r3, #1
 8005b62:	6022      	str	r2, [r4, #0]
 8005b64:	220a      	movs	r2, #10
 8005b66:	701a      	strb	r2, [r3, #0]
 8005b68:	e7ee      	b.n	8005b48 <_puts_r+0x88>
	...

08005b6c <puts>:
 8005b6c:	4b02      	ldr	r3, [pc, #8]	@ (8005b78 <puts+0xc>)
 8005b6e:	4601      	mov	r1, r0
 8005b70:	6818      	ldr	r0, [r3, #0]
 8005b72:	f7ff bfa5 	b.w	8005ac0 <_puts_r>
 8005b76:	bf00      	nop
 8005b78:	20000050 	.word	0x20000050

08005b7c <siprintf>:
 8005b7c:	b40e      	push	{r1, r2, r3}
 8005b7e:	b500      	push	{lr}
 8005b80:	b09c      	sub	sp, #112	@ 0x70
 8005b82:	ab1d      	add	r3, sp, #116	@ 0x74
 8005b84:	9002      	str	r0, [sp, #8]
 8005b86:	9006      	str	r0, [sp, #24]
 8005b88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005b8c:	4809      	ldr	r0, [pc, #36]	@ (8005bb4 <siprintf+0x38>)
 8005b8e:	9107      	str	r1, [sp, #28]
 8005b90:	9104      	str	r1, [sp, #16]
 8005b92:	4909      	ldr	r1, [pc, #36]	@ (8005bb8 <siprintf+0x3c>)
 8005b94:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b98:	9105      	str	r1, [sp, #20]
 8005b9a:	6800      	ldr	r0, [r0, #0]
 8005b9c:	9301      	str	r3, [sp, #4]
 8005b9e:	a902      	add	r1, sp, #8
 8005ba0:	f000 fadc 	bl	800615c <_svfiprintf_r>
 8005ba4:	9b02      	ldr	r3, [sp, #8]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	701a      	strb	r2, [r3, #0]
 8005baa:	b01c      	add	sp, #112	@ 0x70
 8005bac:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bb0:	b003      	add	sp, #12
 8005bb2:	4770      	bx	lr
 8005bb4:	20000050 	.word	0x20000050
 8005bb8:	ffff0208 	.word	0xffff0208

08005bbc <__sread>:
 8005bbc:	b510      	push	{r4, lr}
 8005bbe:	460c      	mov	r4, r1
 8005bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bc4:	f000 f916 	bl	8005df4 <_read_r>
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	bfab      	itete	ge
 8005bcc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005bce:	89a3      	ldrhlt	r3, [r4, #12]
 8005bd0:	181b      	addge	r3, r3, r0
 8005bd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005bd6:	bfac      	ite	ge
 8005bd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005bda:	81a3      	strhlt	r3, [r4, #12]
 8005bdc:	bd10      	pop	{r4, pc}

08005bde <__swrite>:
 8005bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005be2:	461f      	mov	r7, r3
 8005be4:	898b      	ldrh	r3, [r1, #12]
 8005be6:	05db      	lsls	r3, r3, #23
 8005be8:	4605      	mov	r5, r0
 8005bea:	460c      	mov	r4, r1
 8005bec:	4616      	mov	r6, r2
 8005bee:	d505      	bpl.n	8005bfc <__swrite+0x1e>
 8005bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f000 f8ea 	bl	8005dd0 <_lseek_r>
 8005bfc:	89a3      	ldrh	r3, [r4, #12]
 8005bfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c06:	81a3      	strh	r3, [r4, #12]
 8005c08:	4632      	mov	r2, r6
 8005c0a:	463b      	mov	r3, r7
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c12:	f000 b901 	b.w	8005e18 <_write_r>

08005c16 <__sseek>:
 8005c16:	b510      	push	{r4, lr}
 8005c18:	460c      	mov	r4, r1
 8005c1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c1e:	f000 f8d7 	bl	8005dd0 <_lseek_r>
 8005c22:	1c43      	adds	r3, r0, #1
 8005c24:	89a3      	ldrh	r3, [r4, #12]
 8005c26:	bf15      	itete	ne
 8005c28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c32:	81a3      	strheq	r3, [r4, #12]
 8005c34:	bf18      	it	ne
 8005c36:	81a3      	strhne	r3, [r4, #12]
 8005c38:	bd10      	pop	{r4, pc}

08005c3a <__sclose>:
 8005c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c3e:	f000 b8b7 	b.w	8005db0 <_close_r>

08005c42 <__swbuf_r>:
 8005c42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c44:	460e      	mov	r6, r1
 8005c46:	4614      	mov	r4, r2
 8005c48:	4605      	mov	r5, r0
 8005c4a:	b118      	cbz	r0, 8005c54 <__swbuf_r+0x12>
 8005c4c:	6a03      	ldr	r3, [r0, #32]
 8005c4e:	b90b      	cbnz	r3, 8005c54 <__swbuf_r+0x12>
 8005c50:	f7ff feee 	bl	8005a30 <__sinit>
 8005c54:	69a3      	ldr	r3, [r4, #24]
 8005c56:	60a3      	str	r3, [r4, #8]
 8005c58:	89a3      	ldrh	r3, [r4, #12]
 8005c5a:	071a      	lsls	r2, r3, #28
 8005c5c:	d501      	bpl.n	8005c62 <__swbuf_r+0x20>
 8005c5e:	6923      	ldr	r3, [r4, #16]
 8005c60:	b943      	cbnz	r3, 8005c74 <__swbuf_r+0x32>
 8005c62:	4621      	mov	r1, r4
 8005c64:	4628      	mov	r0, r5
 8005c66:	f000 f82b 	bl	8005cc0 <__swsetup_r>
 8005c6a:	b118      	cbz	r0, 8005c74 <__swbuf_r+0x32>
 8005c6c:	f04f 37ff 	mov.w	r7, #4294967295
 8005c70:	4638      	mov	r0, r7
 8005c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c74:	6823      	ldr	r3, [r4, #0]
 8005c76:	6922      	ldr	r2, [r4, #16]
 8005c78:	1a98      	subs	r0, r3, r2
 8005c7a:	6963      	ldr	r3, [r4, #20]
 8005c7c:	b2f6      	uxtb	r6, r6
 8005c7e:	4283      	cmp	r3, r0
 8005c80:	4637      	mov	r7, r6
 8005c82:	dc05      	bgt.n	8005c90 <__swbuf_r+0x4e>
 8005c84:	4621      	mov	r1, r4
 8005c86:	4628      	mov	r0, r5
 8005c88:	f000 feb8 	bl	80069fc <_fflush_r>
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	d1ed      	bne.n	8005c6c <__swbuf_r+0x2a>
 8005c90:	68a3      	ldr	r3, [r4, #8]
 8005c92:	3b01      	subs	r3, #1
 8005c94:	60a3      	str	r3, [r4, #8]
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	1c5a      	adds	r2, r3, #1
 8005c9a:	6022      	str	r2, [r4, #0]
 8005c9c:	701e      	strb	r6, [r3, #0]
 8005c9e:	6962      	ldr	r2, [r4, #20]
 8005ca0:	1c43      	adds	r3, r0, #1
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d004      	beq.n	8005cb0 <__swbuf_r+0x6e>
 8005ca6:	89a3      	ldrh	r3, [r4, #12]
 8005ca8:	07db      	lsls	r3, r3, #31
 8005caa:	d5e1      	bpl.n	8005c70 <__swbuf_r+0x2e>
 8005cac:	2e0a      	cmp	r6, #10
 8005cae:	d1df      	bne.n	8005c70 <__swbuf_r+0x2e>
 8005cb0:	4621      	mov	r1, r4
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	f000 fea2 	bl	80069fc <_fflush_r>
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	d0d9      	beq.n	8005c70 <__swbuf_r+0x2e>
 8005cbc:	e7d6      	b.n	8005c6c <__swbuf_r+0x2a>
	...

08005cc0 <__swsetup_r>:
 8005cc0:	b538      	push	{r3, r4, r5, lr}
 8005cc2:	4b29      	ldr	r3, [pc, #164]	@ (8005d68 <__swsetup_r+0xa8>)
 8005cc4:	4605      	mov	r5, r0
 8005cc6:	6818      	ldr	r0, [r3, #0]
 8005cc8:	460c      	mov	r4, r1
 8005cca:	b118      	cbz	r0, 8005cd4 <__swsetup_r+0x14>
 8005ccc:	6a03      	ldr	r3, [r0, #32]
 8005cce:	b90b      	cbnz	r3, 8005cd4 <__swsetup_r+0x14>
 8005cd0:	f7ff feae 	bl	8005a30 <__sinit>
 8005cd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cd8:	0719      	lsls	r1, r3, #28
 8005cda:	d422      	bmi.n	8005d22 <__swsetup_r+0x62>
 8005cdc:	06da      	lsls	r2, r3, #27
 8005cde:	d407      	bmi.n	8005cf0 <__swsetup_r+0x30>
 8005ce0:	2209      	movs	r2, #9
 8005ce2:	602a      	str	r2, [r5, #0]
 8005ce4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ce8:	81a3      	strh	r3, [r4, #12]
 8005cea:	f04f 30ff 	mov.w	r0, #4294967295
 8005cee:	e033      	b.n	8005d58 <__swsetup_r+0x98>
 8005cf0:	0758      	lsls	r0, r3, #29
 8005cf2:	d512      	bpl.n	8005d1a <__swsetup_r+0x5a>
 8005cf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005cf6:	b141      	cbz	r1, 8005d0a <__swsetup_r+0x4a>
 8005cf8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005cfc:	4299      	cmp	r1, r3
 8005cfe:	d002      	beq.n	8005d06 <__swsetup_r+0x46>
 8005d00:	4628      	mov	r0, r5
 8005d02:	f000 f8d7 	bl	8005eb4 <_free_r>
 8005d06:	2300      	movs	r3, #0
 8005d08:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d0a:	89a3      	ldrh	r3, [r4, #12]
 8005d0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005d10:	81a3      	strh	r3, [r4, #12]
 8005d12:	2300      	movs	r3, #0
 8005d14:	6063      	str	r3, [r4, #4]
 8005d16:	6923      	ldr	r3, [r4, #16]
 8005d18:	6023      	str	r3, [r4, #0]
 8005d1a:	89a3      	ldrh	r3, [r4, #12]
 8005d1c:	f043 0308 	orr.w	r3, r3, #8
 8005d20:	81a3      	strh	r3, [r4, #12]
 8005d22:	6923      	ldr	r3, [r4, #16]
 8005d24:	b94b      	cbnz	r3, 8005d3a <__swsetup_r+0x7a>
 8005d26:	89a3      	ldrh	r3, [r4, #12]
 8005d28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005d2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d30:	d003      	beq.n	8005d3a <__swsetup_r+0x7a>
 8005d32:	4621      	mov	r1, r4
 8005d34:	4628      	mov	r0, r5
 8005d36:	f000 feaf 	bl	8006a98 <__smakebuf_r>
 8005d3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d3e:	f013 0201 	ands.w	r2, r3, #1
 8005d42:	d00a      	beq.n	8005d5a <__swsetup_r+0x9a>
 8005d44:	2200      	movs	r2, #0
 8005d46:	60a2      	str	r2, [r4, #8]
 8005d48:	6962      	ldr	r2, [r4, #20]
 8005d4a:	4252      	negs	r2, r2
 8005d4c:	61a2      	str	r2, [r4, #24]
 8005d4e:	6922      	ldr	r2, [r4, #16]
 8005d50:	b942      	cbnz	r2, 8005d64 <__swsetup_r+0xa4>
 8005d52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005d56:	d1c5      	bne.n	8005ce4 <__swsetup_r+0x24>
 8005d58:	bd38      	pop	{r3, r4, r5, pc}
 8005d5a:	0799      	lsls	r1, r3, #30
 8005d5c:	bf58      	it	pl
 8005d5e:	6962      	ldrpl	r2, [r4, #20]
 8005d60:	60a2      	str	r2, [r4, #8]
 8005d62:	e7f4      	b.n	8005d4e <__swsetup_r+0x8e>
 8005d64:	2000      	movs	r0, #0
 8005d66:	e7f7      	b.n	8005d58 <__swsetup_r+0x98>
 8005d68:	20000050 	.word	0x20000050

08005d6c <memmove>:
 8005d6c:	4288      	cmp	r0, r1
 8005d6e:	b510      	push	{r4, lr}
 8005d70:	eb01 0402 	add.w	r4, r1, r2
 8005d74:	d902      	bls.n	8005d7c <memmove+0x10>
 8005d76:	4284      	cmp	r4, r0
 8005d78:	4623      	mov	r3, r4
 8005d7a:	d807      	bhi.n	8005d8c <memmove+0x20>
 8005d7c:	1e43      	subs	r3, r0, #1
 8005d7e:	42a1      	cmp	r1, r4
 8005d80:	d008      	beq.n	8005d94 <memmove+0x28>
 8005d82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d8a:	e7f8      	b.n	8005d7e <memmove+0x12>
 8005d8c:	4402      	add	r2, r0
 8005d8e:	4601      	mov	r1, r0
 8005d90:	428a      	cmp	r2, r1
 8005d92:	d100      	bne.n	8005d96 <memmove+0x2a>
 8005d94:	bd10      	pop	{r4, pc}
 8005d96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d9e:	e7f7      	b.n	8005d90 <memmove+0x24>

08005da0 <memset>:
 8005da0:	4402      	add	r2, r0
 8005da2:	4603      	mov	r3, r0
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d100      	bne.n	8005daa <memset+0xa>
 8005da8:	4770      	bx	lr
 8005daa:	f803 1b01 	strb.w	r1, [r3], #1
 8005dae:	e7f9      	b.n	8005da4 <memset+0x4>

08005db0 <_close_r>:
 8005db0:	b538      	push	{r3, r4, r5, lr}
 8005db2:	4d06      	ldr	r5, [pc, #24]	@ (8005dcc <_close_r+0x1c>)
 8005db4:	2300      	movs	r3, #0
 8005db6:	4604      	mov	r4, r0
 8005db8:	4608      	mov	r0, r1
 8005dba:	602b      	str	r3, [r5, #0]
 8005dbc:	f7fb fad1 	bl	8001362 <_close>
 8005dc0:	1c43      	adds	r3, r0, #1
 8005dc2:	d102      	bne.n	8005dca <_close_r+0x1a>
 8005dc4:	682b      	ldr	r3, [r5, #0]
 8005dc6:	b103      	cbz	r3, 8005dca <_close_r+0x1a>
 8005dc8:	6023      	str	r3, [r4, #0]
 8005dca:	bd38      	pop	{r3, r4, r5, pc}
 8005dcc:	20000714 	.word	0x20000714

08005dd0 <_lseek_r>:
 8005dd0:	b538      	push	{r3, r4, r5, lr}
 8005dd2:	4d07      	ldr	r5, [pc, #28]	@ (8005df0 <_lseek_r+0x20>)
 8005dd4:	4604      	mov	r4, r0
 8005dd6:	4608      	mov	r0, r1
 8005dd8:	4611      	mov	r1, r2
 8005dda:	2200      	movs	r2, #0
 8005ddc:	602a      	str	r2, [r5, #0]
 8005dde:	461a      	mov	r2, r3
 8005de0:	f7fb fae6 	bl	80013b0 <_lseek>
 8005de4:	1c43      	adds	r3, r0, #1
 8005de6:	d102      	bne.n	8005dee <_lseek_r+0x1e>
 8005de8:	682b      	ldr	r3, [r5, #0]
 8005dea:	b103      	cbz	r3, 8005dee <_lseek_r+0x1e>
 8005dec:	6023      	str	r3, [r4, #0]
 8005dee:	bd38      	pop	{r3, r4, r5, pc}
 8005df0:	20000714 	.word	0x20000714

08005df4 <_read_r>:
 8005df4:	b538      	push	{r3, r4, r5, lr}
 8005df6:	4d07      	ldr	r5, [pc, #28]	@ (8005e14 <_read_r+0x20>)
 8005df8:	4604      	mov	r4, r0
 8005dfa:	4608      	mov	r0, r1
 8005dfc:	4611      	mov	r1, r2
 8005dfe:	2200      	movs	r2, #0
 8005e00:	602a      	str	r2, [r5, #0]
 8005e02:	461a      	mov	r2, r3
 8005e04:	f7fb fa90 	bl	8001328 <_read>
 8005e08:	1c43      	adds	r3, r0, #1
 8005e0a:	d102      	bne.n	8005e12 <_read_r+0x1e>
 8005e0c:	682b      	ldr	r3, [r5, #0]
 8005e0e:	b103      	cbz	r3, 8005e12 <_read_r+0x1e>
 8005e10:	6023      	str	r3, [r4, #0]
 8005e12:	bd38      	pop	{r3, r4, r5, pc}
 8005e14:	20000714 	.word	0x20000714

08005e18 <_write_r>:
 8005e18:	b538      	push	{r3, r4, r5, lr}
 8005e1a:	4d07      	ldr	r5, [pc, #28]	@ (8005e38 <_write_r+0x20>)
 8005e1c:	4604      	mov	r4, r0
 8005e1e:	4608      	mov	r0, r1
 8005e20:	4611      	mov	r1, r2
 8005e22:	2200      	movs	r2, #0
 8005e24:	602a      	str	r2, [r5, #0]
 8005e26:	461a      	mov	r2, r3
 8005e28:	f7fa fc94 	bl	8000754 <_write>
 8005e2c:	1c43      	adds	r3, r0, #1
 8005e2e:	d102      	bne.n	8005e36 <_write_r+0x1e>
 8005e30:	682b      	ldr	r3, [r5, #0]
 8005e32:	b103      	cbz	r3, 8005e36 <_write_r+0x1e>
 8005e34:	6023      	str	r3, [r4, #0]
 8005e36:	bd38      	pop	{r3, r4, r5, pc}
 8005e38:	20000714 	.word	0x20000714

08005e3c <__errno>:
 8005e3c:	4b01      	ldr	r3, [pc, #4]	@ (8005e44 <__errno+0x8>)
 8005e3e:	6818      	ldr	r0, [r3, #0]
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	20000050 	.word	0x20000050

08005e48 <__libc_init_array>:
 8005e48:	b570      	push	{r4, r5, r6, lr}
 8005e4a:	4d0d      	ldr	r5, [pc, #52]	@ (8005e80 <__libc_init_array+0x38>)
 8005e4c:	4c0d      	ldr	r4, [pc, #52]	@ (8005e84 <__libc_init_array+0x3c>)
 8005e4e:	1b64      	subs	r4, r4, r5
 8005e50:	10a4      	asrs	r4, r4, #2
 8005e52:	2600      	movs	r6, #0
 8005e54:	42a6      	cmp	r6, r4
 8005e56:	d109      	bne.n	8005e6c <__libc_init_array+0x24>
 8005e58:	4d0b      	ldr	r5, [pc, #44]	@ (8005e88 <__libc_init_array+0x40>)
 8005e5a:	4c0c      	ldr	r4, [pc, #48]	@ (8005e8c <__libc_init_array+0x44>)
 8005e5c:	f000 fec0 	bl	8006be0 <_init>
 8005e60:	1b64      	subs	r4, r4, r5
 8005e62:	10a4      	asrs	r4, r4, #2
 8005e64:	2600      	movs	r6, #0
 8005e66:	42a6      	cmp	r6, r4
 8005e68:	d105      	bne.n	8005e76 <__libc_init_array+0x2e>
 8005e6a:	bd70      	pop	{r4, r5, r6, pc}
 8005e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e70:	4798      	blx	r3
 8005e72:	3601      	adds	r6, #1
 8005e74:	e7ee      	b.n	8005e54 <__libc_init_array+0xc>
 8005e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e7a:	4798      	blx	r3
 8005e7c:	3601      	adds	r6, #1
 8005e7e:	e7f2      	b.n	8005e66 <__libc_init_array+0x1e>
 8005e80:	08008144 	.word	0x08008144
 8005e84:	08008144 	.word	0x08008144
 8005e88:	08008144 	.word	0x08008144
 8005e8c:	08008148 	.word	0x08008148

08005e90 <__retarget_lock_init_recursive>:
 8005e90:	4770      	bx	lr

08005e92 <__retarget_lock_acquire_recursive>:
 8005e92:	4770      	bx	lr

08005e94 <__retarget_lock_release_recursive>:
 8005e94:	4770      	bx	lr

08005e96 <memcpy>:
 8005e96:	440a      	add	r2, r1
 8005e98:	4291      	cmp	r1, r2
 8005e9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e9e:	d100      	bne.n	8005ea2 <memcpy+0xc>
 8005ea0:	4770      	bx	lr
 8005ea2:	b510      	push	{r4, lr}
 8005ea4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ea8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005eac:	4291      	cmp	r1, r2
 8005eae:	d1f9      	bne.n	8005ea4 <memcpy+0xe>
 8005eb0:	bd10      	pop	{r4, pc}
	...

08005eb4 <_free_r>:
 8005eb4:	b538      	push	{r3, r4, r5, lr}
 8005eb6:	4605      	mov	r5, r0
 8005eb8:	2900      	cmp	r1, #0
 8005eba:	d041      	beq.n	8005f40 <_free_r+0x8c>
 8005ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ec0:	1f0c      	subs	r4, r1, #4
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	bfb8      	it	lt
 8005ec6:	18e4      	addlt	r4, r4, r3
 8005ec8:	f000 f8e0 	bl	800608c <__malloc_lock>
 8005ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8005f44 <_free_r+0x90>)
 8005ece:	6813      	ldr	r3, [r2, #0]
 8005ed0:	b933      	cbnz	r3, 8005ee0 <_free_r+0x2c>
 8005ed2:	6063      	str	r3, [r4, #4]
 8005ed4:	6014      	str	r4, [r2, #0]
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005edc:	f000 b8dc 	b.w	8006098 <__malloc_unlock>
 8005ee0:	42a3      	cmp	r3, r4
 8005ee2:	d908      	bls.n	8005ef6 <_free_r+0x42>
 8005ee4:	6820      	ldr	r0, [r4, #0]
 8005ee6:	1821      	adds	r1, r4, r0
 8005ee8:	428b      	cmp	r3, r1
 8005eea:	bf01      	itttt	eq
 8005eec:	6819      	ldreq	r1, [r3, #0]
 8005eee:	685b      	ldreq	r3, [r3, #4]
 8005ef0:	1809      	addeq	r1, r1, r0
 8005ef2:	6021      	streq	r1, [r4, #0]
 8005ef4:	e7ed      	b.n	8005ed2 <_free_r+0x1e>
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	b10b      	cbz	r3, 8005f00 <_free_r+0x4c>
 8005efc:	42a3      	cmp	r3, r4
 8005efe:	d9fa      	bls.n	8005ef6 <_free_r+0x42>
 8005f00:	6811      	ldr	r1, [r2, #0]
 8005f02:	1850      	adds	r0, r2, r1
 8005f04:	42a0      	cmp	r0, r4
 8005f06:	d10b      	bne.n	8005f20 <_free_r+0x6c>
 8005f08:	6820      	ldr	r0, [r4, #0]
 8005f0a:	4401      	add	r1, r0
 8005f0c:	1850      	adds	r0, r2, r1
 8005f0e:	4283      	cmp	r3, r0
 8005f10:	6011      	str	r1, [r2, #0]
 8005f12:	d1e0      	bne.n	8005ed6 <_free_r+0x22>
 8005f14:	6818      	ldr	r0, [r3, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	6053      	str	r3, [r2, #4]
 8005f1a:	4408      	add	r0, r1
 8005f1c:	6010      	str	r0, [r2, #0]
 8005f1e:	e7da      	b.n	8005ed6 <_free_r+0x22>
 8005f20:	d902      	bls.n	8005f28 <_free_r+0x74>
 8005f22:	230c      	movs	r3, #12
 8005f24:	602b      	str	r3, [r5, #0]
 8005f26:	e7d6      	b.n	8005ed6 <_free_r+0x22>
 8005f28:	6820      	ldr	r0, [r4, #0]
 8005f2a:	1821      	adds	r1, r4, r0
 8005f2c:	428b      	cmp	r3, r1
 8005f2e:	bf04      	itt	eq
 8005f30:	6819      	ldreq	r1, [r3, #0]
 8005f32:	685b      	ldreq	r3, [r3, #4]
 8005f34:	6063      	str	r3, [r4, #4]
 8005f36:	bf04      	itt	eq
 8005f38:	1809      	addeq	r1, r1, r0
 8005f3a:	6021      	streq	r1, [r4, #0]
 8005f3c:	6054      	str	r4, [r2, #4]
 8005f3e:	e7ca      	b.n	8005ed6 <_free_r+0x22>
 8005f40:	bd38      	pop	{r3, r4, r5, pc}
 8005f42:	bf00      	nop
 8005f44:	20000720 	.word	0x20000720

08005f48 <sbrk_aligned>:
 8005f48:	b570      	push	{r4, r5, r6, lr}
 8005f4a:	4e0f      	ldr	r6, [pc, #60]	@ (8005f88 <sbrk_aligned+0x40>)
 8005f4c:	460c      	mov	r4, r1
 8005f4e:	6831      	ldr	r1, [r6, #0]
 8005f50:	4605      	mov	r5, r0
 8005f52:	b911      	cbnz	r1, 8005f5a <sbrk_aligned+0x12>
 8005f54:	f000 fdfe 	bl	8006b54 <_sbrk_r>
 8005f58:	6030      	str	r0, [r6, #0]
 8005f5a:	4621      	mov	r1, r4
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	f000 fdf9 	bl	8006b54 <_sbrk_r>
 8005f62:	1c43      	adds	r3, r0, #1
 8005f64:	d103      	bne.n	8005f6e <sbrk_aligned+0x26>
 8005f66:	f04f 34ff 	mov.w	r4, #4294967295
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	bd70      	pop	{r4, r5, r6, pc}
 8005f6e:	1cc4      	adds	r4, r0, #3
 8005f70:	f024 0403 	bic.w	r4, r4, #3
 8005f74:	42a0      	cmp	r0, r4
 8005f76:	d0f8      	beq.n	8005f6a <sbrk_aligned+0x22>
 8005f78:	1a21      	subs	r1, r4, r0
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	f000 fdea 	bl	8006b54 <_sbrk_r>
 8005f80:	3001      	adds	r0, #1
 8005f82:	d1f2      	bne.n	8005f6a <sbrk_aligned+0x22>
 8005f84:	e7ef      	b.n	8005f66 <sbrk_aligned+0x1e>
 8005f86:	bf00      	nop
 8005f88:	2000071c 	.word	0x2000071c

08005f8c <_malloc_r>:
 8005f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f90:	1ccd      	adds	r5, r1, #3
 8005f92:	f025 0503 	bic.w	r5, r5, #3
 8005f96:	3508      	adds	r5, #8
 8005f98:	2d0c      	cmp	r5, #12
 8005f9a:	bf38      	it	cc
 8005f9c:	250c      	movcc	r5, #12
 8005f9e:	2d00      	cmp	r5, #0
 8005fa0:	4606      	mov	r6, r0
 8005fa2:	db01      	blt.n	8005fa8 <_malloc_r+0x1c>
 8005fa4:	42a9      	cmp	r1, r5
 8005fa6:	d904      	bls.n	8005fb2 <_malloc_r+0x26>
 8005fa8:	230c      	movs	r3, #12
 8005faa:	6033      	str	r3, [r6, #0]
 8005fac:	2000      	movs	r0, #0
 8005fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006088 <_malloc_r+0xfc>
 8005fb6:	f000 f869 	bl	800608c <__malloc_lock>
 8005fba:	f8d8 3000 	ldr.w	r3, [r8]
 8005fbe:	461c      	mov	r4, r3
 8005fc0:	bb44      	cbnz	r4, 8006014 <_malloc_r+0x88>
 8005fc2:	4629      	mov	r1, r5
 8005fc4:	4630      	mov	r0, r6
 8005fc6:	f7ff ffbf 	bl	8005f48 <sbrk_aligned>
 8005fca:	1c43      	adds	r3, r0, #1
 8005fcc:	4604      	mov	r4, r0
 8005fce:	d158      	bne.n	8006082 <_malloc_r+0xf6>
 8005fd0:	f8d8 4000 	ldr.w	r4, [r8]
 8005fd4:	4627      	mov	r7, r4
 8005fd6:	2f00      	cmp	r7, #0
 8005fd8:	d143      	bne.n	8006062 <_malloc_r+0xd6>
 8005fda:	2c00      	cmp	r4, #0
 8005fdc:	d04b      	beq.n	8006076 <_malloc_r+0xea>
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	4639      	mov	r1, r7
 8005fe2:	4630      	mov	r0, r6
 8005fe4:	eb04 0903 	add.w	r9, r4, r3
 8005fe8:	f000 fdb4 	bl	8006b54 <_sbrk_r>
 8005fec:	4581      	cmp	r9, r0
 8005fee:	d142      	bne.n	8006076 <_malloc_r+0xea>
 8005ff0:	6821      	ldr	r1, [r4, #0]
 8005ff2:	1a6d      	subs	r5, r5, r1
 8005ff4:	4629      	mov	r1, r5
 8005ff6:	4630      	mov	r0, r6
 8005ff8:	f7ff ffa6 	bl	8005f48 <sbrk_aligned>
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	d03a      	beq.n	8006076 <_malloc_r+0xea>
 8006000:	6823      	ldr	r3, [r4, #0]
 8006002:	442b      	add	r3, r5
 8006004:	6023      	str	r3, [r4, #0]
 8006006:	f8d8 3000 	ldr.w	r3, [r8]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	bb62      	cbnz	r2, 8006068 <_malloc_r+0xdc>
 800600e:	f8c8 7000 	str.w	r7, [r8]
 8006012:	e00f      	b.n	8006034 <_malloc_r+0xa8>
 8006014:	6822      	ldr	r2, [r4, #0]
 8006016:	1b52      	subs	r2, r2, r5
 8006018:	d420      	bmi.n	800605c <_malloc_r+0xd0>
 800601a:	2a0b      	cmp	r2, #11
 800601c:	d917      	bls.n	800604e <_malloc_r+0xc2>
 800601e:	1961      	adds	r1, r4, r5
 8006020:	42a3      	cmp	r3, r4
 8006022:	6025      	str	r5, [r4, #0]
 8006024:	bf18      	it	ne
 8006026:	6059      	strne	r1, [r3, #4]
 8006028:	6863      	ldr	r3, [r4, #4]
 800602a:	bf08      	it	eq
 800602c:	f8c8 1000 	streq.w	r1, [r8]
 8006030:	5162      	str	r2, [r4, r5]
 8006032:	604b      	str	r3, [r1, #4]
 8006034:	4630      	mov	r0, r6
 8006036:	f000 f82f 	bl	8006098 <__malloc_unlock>
 800603a:	f104 000b 	add.w	r0, r4, #11
 800603e:	1d23      	adds	r3, r4, #4
 8006040:	f020 0007 	bic.w	r0, r0, #7
 8006044:	1ac2      	subs	r2, r0, r3
 8006046:	bf1c      	itt	ne
 8006048:	1a1b      	subne	r3, r3, r0
 800604a:	50a3      	strne	r3, [r4, r2]
 800604c:	e7af      	b.n	8005fae <_malloc_r+0x22>
 800604e:	6862      	ldr	r2, [r4, #4]
 8006050:	42a3      	cmp	r3, r4
 8006052:	bf0c      	ite	eq
 8006054:	f8c8 2000 	streq.w	r2, [r8]
 8006058:	605a      	strne	r2, [r3, #4]
 800605a:	e7eb      	b.n	8006034 <_malloc_r+0xa8>
 800605c:	4623      	mov	r3, r4
 800605e:	6864      	ldr	r4, [r4, #4]
 8006060:	e7ae      	b.n	8005fc0 <_malloc_r+0x34>
 8006062:	463c      	mov	r4, r7
 8006064:	687f      	ldr	r7, [r7, #4]
 8006066:	e7b6      	b.n	8005fd6 <_malloc_r+0x4a>
 8006068:	461a      	mov	r2, r3
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	42a3      	cmp	r3, r4
 800606e:	d1fb      	bne.n	8006068 <_malloc_r+0xdc>
 8006070:	2300      	movs	r3, #0
 8006072:	6053      	str	r3, [r2, #4]
 8006074:	e7de      	b.n	8006034 <_malloc_r+0xa8>
 8006076:	230c      	movs	r3, #12
 8006078:	6033      	str	r3, [r6, #0]
 800607a:	4630      	mov	r0, r6
 800607c:	f000 f80c 	bl	8006098 <__malloc_unlock>
 8006080:	e794      	b.n	8005fac <_malloc_r+0x20>
 8006082:	6005      	str	r5, [r0, #0]
 8006084:	e7d6      	b.n	8006034 <_malloc_r+0xa8>
 8006086:	bf00      	nop
 8006088:	20000720 	.word	0x20000720

0800608c <__malloc_lock>:
 800608c:	4801      	ldr	r0, [pc, #4]	@ (8006094 <__malloc_lock+0x8>)
 800608e:	f7ff bf00 	b.w	8005e92 <__retarget_lock_acquire_recursive>
 8006092:	bf00      	nop
 8006094:	20000718 	.word	0x20000718

08006098 <__malloc_unlock>:
 8006098:	4801      	ldr	r0, [pc, #4]	@ (80060a0 <__malloc_unlock+0x8>)
 800609a:	f7ff befb 	b.w	8005e94 <__retarget_lock_release_recursive>
 800609e:	bf00      	nop
 80060a0:	20000718 	.word	0x20000718

080060a4 <__ssputs_r>:
 80060a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060a8:	688e      	ldr	r6, [r1, #8]
 80060aa:	461f      	mov	r7, r3
 80060ac:	42be      	cmp	r6, r7
 80060ae:	680b      	ldr	r3, [r1, #0]
 80060b0:	4682      	mov	sl, r0
 80060b2:	460c      	mov	r4, r1
 80060b4:	4690      	mov	r8, r2
 80060b6:	d82d      	bhi.n	8006114 <__ssputs_r+0x70>
 80060b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80060bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80060c0:	d026      	beq.n	8006110 <__ssputs_r+0x6c>
 80060c2:	6965      	ldr	r5, [r4, #20]
 80060c4:	6909      	ldr	r1, [r1, #16]
 80060c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060ca:	eba3 0901 	sub.w	r9, r3, r1
 80060ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060d2:	1c7b      	adds	r3, r7, #1
 80060d4:	444b      	add	r3, r9
 80060d6:	106d      	asrs	r5, r5, #1
 80060d8:	429d      	cmp	r5, r3
 80060da:	bf38      	it	cc
 80060dc:	461d      	movcc	r5, r3
 80060de:	0553      	lsls	r3, r2, #21
 80060e0:	d527      	bpl.n	8006132 <__ssputs_r+0x8e>
 80060e2:	4629      	mov	r1, r5
 80060e4:	f7ff ff52 	bl	8005f8c <_malloc_r>
 80060e8:	4606      	mov	r6, r0
 80060ea:	b360      	cbz	r0, 8006146 <__ssputs_r+0xa2>
 80060ec:	6921      	ldr	r1, [r4, #16]
 80060ee:	464a      	mov	r2, r9
 80060f0:	f7ff fed1 	bl	8005e96 <memcpy>
 80060f4:	89a3      	ldrh	r3, [r4, #12]
 80060f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80060fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060fe:	81a3      	strh	r3, [r4, #12]
 8006100:	6126      	str	r6, [r4, #16]
 8006102:	6165      	str	r5, [r4, #20]
 8006104:	444e      	add	r6, r9
 8006106:	eba5 0509 	sub.w	r5, r5, r9
 800610a:	6026      	str	r6, [r4, #0]
 800610c:	60a5      	str	r5, [r4, #8]
 800610e:	463e      	mov	r6, r7
 8006110:	42be      	cmp	r6, r7
 8006112:	d900      	bls.n	8006116 <__ssputs_r+0x72>
 8006114:	463e      	mov	r6, r7
 8006116:	6820      	ldr	r0, [r4, #0]
 8006118:	4632      	mov	r2, r6
 800611a:	4641      	mov	r1, r8
 800611c:	f7ff fe26 	bl	8005d6c <memmove>
 8006120:	68a3      	ldr	r3, [r4, #8]
 8006122:	1b9b      	subs	r3, r3, r6
 8006124:	60a3      	str	r3, [r4, #8]
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	4433      	add	r3, r6
 800612a:	6023      	str	r3, [r4, #0]
 800612c:	2000      	movs	r0, #0
 800612e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006132:	462a      	mov	r2, r5
 8006134:	f000 fd1e 	bl	8006b74 <_realloc_r>
 8006138:	4606      	mov	r6, r0
 800613a:	2800      	cmp	r0, #0
 800613c:	d1e0      	bne.n	8006100 <__ssputs_r+0x5c>
 800613e:	6921      	ldr	r1, [r4, #16]
 8006140:	4650      	mov	r0, sl
 8006142:	f7ff feb7 	bl	8005eb4 <_free_r>
 8006146:	230c      	movs	r3, #12
 8006148:	f8ca 3000 	str.w	r3, [sl]
 800614c:	89a3      	ldrh	r3, [r4, #12]
 800614e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006152:	81a3      	strh	r3, [r4, #12]
 8006154:	f04f 30ff 	mov.w	r0, #4294967295
 8006158:	e7e9      	b.n	800612e <__ssputs_r+0x8a>
	...

0800615c <_svfiprintf_r>:
 800615c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006160:	4698      	mov	r8, r3
 8006162:	898b      	ldrh	r3, [r1, #12]
 8006164:	061b      	lsls	r3, r3, #24
 8006166:	b09d      	sub	sp, #116	@ 0x74
 8006168:	4607      	mov	r7, r0
 800616a:	460d      	mov	r5, r1
 800616c:	4614      	mov	r4, r2
 800616e:	d510      	bpl.n	8006192 <_svfiprintf_r+0x36>
 8006170:	690b      	ldr	r3, [r1, #16]
 8006172:	b973      	cbnz	r3, 8006192 <_svfiprintf_r+0x36>
 8006174:	2140      	movs	r1, #64	@ 0x40
 8006176:	f7ff ff09 	bl	8005f8c <_malloc_r>
 800617a:	6028      	str	r0, [r5, #0]
 800617c:	6128      	str	r0, [r5, #16]
 800617e:	b930      	cbnz	r0, 800618e <_svfiprintf_r+0x32>
 8006180:	230c      	movs	r3, #12
 8006182:	603b      	str	r3, [r7, #0]
 8006184:	f04f 30ff 	mov.w	r0, #4294967295
 8006188:	b01d      	add	sp, #116	@ 0x74
 800618a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800618e:	2340      	movs	r3, #64	@ 0x40
 8006190:	616b      	str	r3, [r5, #20]
 8006192:	2300      	movs	r3, #0
 8006194:	9309      	str	r3, [sp, #36]	@ 0x24
 8006196:	2320      	movs	r3, #32
 8006198:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800619c:	f8cd 800c 	str.w	r8, [sp, #12]
 80061a0:	2330      	movs	r3, #48	@ 0x30
 80061a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006340 <_svfiprintf_r+0x1e4>
 80061a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80061aa:	f04f 0901 	mov.w	r9, #1
 80061ae:	4623      	mov	r3, r4
 80061b0:	469a      	mov	sl, r3
 80061b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061b6:	b10a      	cbz	r2, 80061bc <_svfiprintf_r+0x60>
 80061b8:	2a25      	cmp	r2, #37	@ 0x25
 80061ba:	d1f9      	bne.n	80061b0 <_svfiprintf_r+0x54>
 80061bc:	ebba 0b04 	subs.w	fp, sl, r4
 80061c0:	d00b      	beq.n	80061da <_svfiprintf_r+0x7e>
 80061c2:	465b      	mov	r3, fp
 80061c4:	4622      	mov	r2, r4
 80061c6:	4629      	mov	r1, r5
 80061c8:	4638      	mov	r0, r7
 80061ca:	f7ff ff6b 	bl	80060a4 <__ssputs_r>
 80061ce:	3001      	adds	r0, #1
 80061d0:	f000 80a7 	beq.w	8006322 <_svfiprintf_r+0x1c6>
 80061d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061d6:	445a      	add	r2, fp
 80061d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80061da:	f89a 3000 	ldrb.w	r3, [sl]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f000 809f 	beq.w	8006322 <_svfiprintf_r+0x1c6>
 80061e4:	2300      	movs	r3, #0
 80061e6:	f04f 32ff 	mov.w	r2, #4294967295
 80061ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061ee:	f10a 0a01 	add.w	sl, sl, #1
 80061f2:	9304      	str	r3, [sp, #16]
 80061f4:	9307      	str	r3, [sp, #28]
 80061f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80061fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80061fc:	4654      	mov	r4, sl
 80061fe:	2205      	movs	r2, #5
 8006200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006204:	484e      	ldr	r0, [pc, #312]	@ (8006340 <_svfiprintf_r+0x1e4>)
 8006206:	f7f9 ffe3 	bl	80001d0 <memchr>
 800620a:	9a04      	ldr	r2, [sp, #16]
 800620c:	b9d8      	cbnz	r0, 8006246 <_svfiprintf_r+0xea>
 800620e:	06d0      	lsls	r0, r2, #27
 8006210:	bf44      	itt	mi
 8006212:	2320      	movmi	r3, #32
 8006214:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006218:	0711      	lsls	r1, r2, #28
 800621a:	bf44      	itt	mi
 800621c:	232b      	movmi	r3, #43	@ 0x2b
 800621e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006222:	f89a 3000 	ldrb.w	r3, [sl]
 8006226:	2b2a      	cmp	r3, #42	@ 0x2a
 8006228:	d015      	beq.n	8006256 <_svfiprintf_r+0xfa>
 800622a:	9a07      	ldr	r2, [sp, #28]
 800622c:	4654      	mov	r4, sl
 800622e:	2000      	movs	r0, #0
 8006230:	f04f 0c0a 	mov.w	ip, #10
 8006234:	4621      	mov	r1, r4
 8006236:	f811 3b01 	ldrb.w	r3, [r1], #1
 800623a:	3b30      	subs	r3, #48	@ 0x30
 800623c:	2b09      	cmp	r3, #9
 800623e:	d94b      	bls.n	80062d8 <_svfiprintf_r+0x17c>
 8006240:	b1b0      	cbz	r0, 8006270 <_svfiprintf_r+0x114>
 8006242:	9207      	str	r2, [sp, #28]
 8006244:	e014      	b.n	8006270 <_svfiprintf_r+0x114>
 8006246:	eba0 0308 	sub.w	r3, r0, r8
 800624a:	fa09 f303 	lsl.w	r3, r9, r3
 800624e:	4313      	orrs	r3, r2
 8006250:	9304      	str	r3, [sp, #16]
 8006252:	46a2      	mov	sl, r4
 8006254:	e7d2      	b.n	80061fc <_svfiprintf_r+0xa0>
 8006256:	9b03      	ldr	r3, [sp, #12]
 8006258:	1d19      	adds	r1, r3, #4
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	9103      	str	r1, [sp, #12]
 800625e:	2b00      	cmp	r3, #0
 8006260:	bfbb      	ittet	lt
 8006262:	425b      	neglt	r3, r3
 8006264:	f042 0202 	orrlt.w	r2, r2, #2
 8006268:	9307      	strge	r3, [sp, #28]
 800626a:	9307      	strlt	r3, [sp, #28]
 800626c:	bfb8      	it	lt
 800626e:	9204      	strlt	r2, [sp, #16]
 8006270:	7823      	ldrb	r3, [r4, #0]
 8006272:	2b2e      	cmp	r3, #46	@ 0x2e
 8006274:	d10a      	bne.n	800628c <_svfiprintf_r+0x130>
 8006276:	7863      	ldrb	r3, [r4, #1]
 8006278:	2b2a      	cmp	r3, #42	@ 0x2a
 800627a:	d132      	bne.n	80062e2 <_svfiprintf_r+0x186>
 800627c:	9b03      	ldr	r3, [sp, #12]
 800627e:	1d1a      	adds	r2, r3, #4
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	9203      	str	r2, [sp, #12]
 8006284:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006288:	3402      	adds	r4, #2
 800628a:	9305      	str	r3, [sp, #20]
 800628c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006350 <_svfiprintf_r+0x1f4>
 8006290:	7821      	ldrb	r1, [r4, #0]
 8006292:	2203      	movs	r2, #3
 8006294:	4650      	mov	r0, sl
 8006296:	f7f9 ff9b 	bl	80001d0 <memchr>
 800629a:	b138      	cbz	r0, 80062ac <_svfiprintf_r+0x150>
 800629c:	9b04      	ldr	r3, [sp, #16]
 800629e:	eba0 000a 	sub.w	r0, r0, sl
 80062a2:	2240      	movs	r2, #64	@ 0x40
 80062a4:	4082      	lsls	r2, r0
 80062a6:	4313      	orrs	r3, r2
 80062a8:	3401      	adds	r4, #1
 80062aa:	9304      	str	r3, [sp, #16]
 80062ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062b0:	4824      	ldr	r0, [pc, #144]	@ (8006344 <_svfiprintf_r+0x1e8>)
 80062b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80062b6:	2206      	movs	r2, #6
 80062b8:	f7f9 ff8a 	bl	80001d0 <memchr>
 80062bc:	2800      	cmp	r0, #0
 80062be:	d036      	beq.n	800632e <_svfiprintf_r+0x1d2>
 80062c0:	4b21      	ldr	r3, [pc, #132]	@ (8006348 <_svfiprintf_r+0x1ec>)
 80062c2:	bb1b      	cbnz	r3, 800630c <_svfiprintf_r+0x1b0>
 80062c4:	9b03      	ldr	r3, [sp, #12]
 80062c6:	3307      	adds	r3, #7
 80062c8:	f023 0307 	bic.w	r3, r3, #7
 80062cc:	3308      	adds	r3, #8
 80062ce:	9303      	str	r3, [sp, #12]
 80062d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062d2:	4433      	add	r3, r6
 80062d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80062d6:	e76a      	b.n	80061ae <_svfiprintf_r+0x52>
 80062d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80062dc:	460c      	mov	r4, r1
 80062de:	2001      	movs	r0, #1
 80062e0:	e7a8      	b.n	8006234 <_svfiprintf_r+0xd8>
 80062e2:	2300      	movs	r3, #0
 80062e4:	3401      	adds	r4, #1
 80062e6:	9305      	str	r3, [sp, #20]
 80062e8:	4619      	mov	r1, r3
 80062ea:	f04f 0c0a 	mov.w	ip, #10
 80062ee:	4620      	mov	r0, r4
 80062f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062f4:	3a30      	subs	r2, #48	@ 0x30
 80062f6:	2a09      	cmp	r2, #9
 80062f8:	d903      	bls.n	8006302 <_svfiprintf_r+0x1a6>
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d0c6      	beq.n	800628c <_svfiprintf_r+0x130>
 80062fe:	9105      	str	r1, [sp, #20]
 8006300:	e7c4      	b.n	800628c <_svfiprintf_r+0x130>
 8006302:	fb0c 2101 	mla	r1, ip, r1, r2
 8006306:	4604      	mov	r4, r0
 8006308:	2301      	movs	r3, #1
 800630a:	e7f0      	b.n	80062ee <_svfiprintf_r+0x192>
 800630c:	ab03      	add	r3, sp, #12
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	462a      	mov	r2, r5
 8006312:	4b0e      	ldr	r3, [pc, #56]	@ (800634c <_svfiprintf_r+0x1f0>)
 8006314:	a904      	add	r1, sp, #16
 8006316:	4638      	mov	r0, r7
 8006318:	f3af 8000 	nop.w
 800631c:	1c42      	adds	r2, r0, #1
 800631e:	4606      	mov	r6, r0
 8006320:	d1d6      	bne.n	80062d0 <_svfiprintf_r+0x174>
 8006322:	89ab      	ldrh	r3, [r5, #12]
 8006324:	065b      	lsls	r3, r3, #25
 8006326:	f53f af2d 	bmi.w	8006184 <_svfiprintf_r+0x28>
 800632a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800632c:	e72c      	b.n	8006188 <_svfiprintf_r+0x2c>
 800632e:	ab03      	add	r3, sp, #12
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	462a      	mov	r2, r5
 8006334:	4b05      	ldr	r3, [pc, #20]	@ (800634c <_svfiprintf_r+0x1f0>)
 8006336:	a904      	add	r1, sp, #16
 8006338:	4638      	mov	r0, r7
 800633a:	f000 f9bb 	bl	80066b4 <_printf_i>
 800633e:	e7ed      	b.n	800631c <_svfiprintf_r+0x1c0>
 8006340:	08008108 	.word	0x08008108
 8006344:	08008112 	.word	0x08008112
 8006348:	00000000 	.word	0x00000000
 800634c:	080060a5 	.word	0x080060a5
 8006350:	0800810e 	.word	0x0800810e

08006354 <__sfputc_r>:
 8006354:	6893      	ldr	r3, [r2, #8]
 8006356:	3b01      	subs	r3, #1
 8006358:	2b00      	cmp	r3, #0
 800635a:	b410      	push	{r4}
 800635c:	6093      	str	r3, [r2, #8]
 800635e:	da08      	bge.n	8006372 <__sfputc_r+0x1e>
 8006360:	6994      	ldr	r4, [r2, #24]
 8006362:	42a3      	cmp	r3, r4
 8006364:	db01      	blt.n	800636a <__sfputc_r+0x16>
 8006366:	290a      	cmp	r1, #10
 8006368:	d103      	bne.n	8006372 <__sfputc_r+0x1e>
 800636a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800636e:	f7ff bc68 	b.w	8005c42 <__swbuf_r>
 8006372:	6813      	ldr	r3, [r2, #0]
 8006374:	1c58      	adds	r0, r3, #1
 8006376:	6010      	str	r0, [r2, #0]
 8006378:	7019      	strb	r1, [r3, #0]
 800637a:	4608      	mov	r0, r1
 800637c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006380:	4770      	bx	lr

08006382 <__sfputs_r>:
 8006382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006384:	4606      	mov	r6, r0
 8006386:	460f      	mov	r7, r1
 8006388:	4614      	mov	r4, r2
 800638a:	18d5      	adds	r5, r2, r3
 800638c:	42ac      	cmp	r4, r5
 800638e:	d101      	bne.n	8006394 <__sfputs_r+0x12>
 8006390:	2000      	movs	r0, #0
 8006392:	e007      	b.n	80063a4 <__sfputs_r+0x22>
 8006394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006398:	463a      	mov	r2, r7
 800639a:	4630      	mov	r0, r6
 800639c:	f7ff ffda 	bl	8006354 <__sfputc_r>
 80063a0:	1c43      	adds	r3, r0, #1
 80063a2:	d1f3      	bne.n	800638c <__sfputs_r+0xa>
 80063a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063a8 <_vfiprintf_r>:
 80063a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ac:	460d      	mov	r5, r1
 80063ae:	b09d      	sub	sp, #116	@ 0x74
 80063b0:	4614      	mov	r4, r2
 80063b2:	4698      	mov	r8, r3
 80063b4:	4606      	mov	r6, r0
 80063b6:	b118      	cbz	r0, 80063c0 <_vfiprintf_r+0x18>
 80063b8:	6a03      	ldr	r3, [r0, #32]
 80063ba:	b90b      	cbnz	r3, 80063c0 <_vfiprintf_r+0x18>
 80063bc:	f7ff fb38 	bl	8005a30 <__sinit>
 80063c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063c2:	07d9      	lsls	r1, r3, #31
 80063c4:	d405      	bmi.n	80063d2 <_vfiprintf_r+0x2a>
 80063c6:	89ab      	ldrh	r3, [r5, #12]
 80063c8:	059a      	lsls	r2, r3, #22
 80063ca:	d402      	bmi.n	80063d2 <_vfiprintf_r+0x2a>
 80063cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063ce:	f7ff fd60 	bl	8005e92 <__retarget_lock_acquire_recursive>
 80063d2:	89ab      	ldrh	r3, [r5, #12]
 80063d4:	071b      	lsls	r3, r3, #28
 80063d6:	d501      	bpl.n	80063dc <_vfiprintf_r+0x34>
 80063d8:	692b      	ldr	r3, [r5, #16]
 80063da:	b99b      	cbnz	r3, 8006404 <_vfiprintf_r+0x5c>
 80063dc:	4629      	mov	r1, r5
 80063de:	4630      	mov	r0, r6
 80063e0:	f7ff fc6e 	bl	8005cc0 <__swsetup_r>
 80063e4:	b170      	cbz	r0, 8006404 <_vfiprintf_r+0x5c>
 80063e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063e8:	07dc      	lsls	r4, r3, #31
 80063ea:	d504      	bpl.n	80063f6 <_vfiprintf_r+0x4e>
 80063ec:	f04f 30ff 	mov.w	r0, #4294967295
 80063f0:	b01d      	add	sp, #116	@ 0x74
 80063f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063f6:	89ab      	ldrh	r3, [r5, #12]
 80063f8:	0598      	lsls	r0, r3, #22
 80063fa:	d4f7      	bmi.n	80063ec <_vfiprintf_r+0x44>
 80063fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063fe:	f7ff fd49 	bl	8005e94 <__retarget_lock_release_recursive>
 8006402:	e7f3      	b.n	80063ec <_vfiprintf_r+0x44>
 8006404:	2300      	movs	r3, #0
 8006406:	9309      	str	r3, [sp, #36]	@ 0x24
 8006408:	2320      	movs	r3, #32
 800640a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800640e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006412:	2330      	movs	r3, #48	@ 0x30
 8006414:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80065c4 <_vfiprintf_r+0x21c>
 8006418:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800641c:	f04f 0901 	mov.w	r9, #1
 8006420:	4623      	mov	r3, r4
 8006422:	469a      	mov	sl, r3
 8006424:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006428:	b10a      	cbz	r2, 800642e <_vfiprintf_r+0x86>
 800642a:	2a25      	cmp	r2, #37	@ 0x25
 800642c:	d1f9      	bne.n	8006422 <_vfiprintf_r+0x7a>
 800642e:	ebba 0b04 	subs.w	fp, sl, r4
 8006432:	d00b      	beq.n	800644c <_vfiprintf_r+0xa4>
 8006434:	465b      	mov	r3, fp
 8006436:	4622      	mov	r2, r4
 8006438:	4629      	mov	r1, r5
 800643a:	4630      	mov	r0, r6
 800643c:	f7ff ffa1 	bl	8006382 <__sfputs_r>
 8006440:	3001      	adds	r0, #1
 8006442:	f000 80a7 	beq.w	8006594 <_vfiprintf_r+0x1ec>
 8006446:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006448:	445a      	add	r2, fp
 800644a:	9209      	str	r2, [sp, #36]	@ 0x24
 800644c:	f89a 3000 	ldrb.w	r3, [sl]
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 809f 	beq.w	8006594 <_vfiprintf_r+0x1ec>
 8006456:	2300      	movs	r3, #0
 8006458:	f04f 32ff 	mov.w	r2, #4294967295
 800645c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006460:	f10a 0a01 	add.w	sl, sl, #1
 8006464:	9304      	str	r3, [sp, #16]
 8006466:	9307      	str	r3, [sp, #28]
 8006468:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800646c:	931a      	str	r3, [sp, #104]	@ 0x68
 800646e:	4654      	mov	r4, sl
 8006470:	2205      	movs	r2, #5
 8006472:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006476:	4853      	ldr	r0, [pc, #332]	@ (80065c4 <_vfiprintf_r+0x21c>)
 8006478:	f7f9 feaa 	bl	80001d0 <memchr>
 800647c:	9a04      	ldr	r2, [sp, #16]
 800647e:	b9d8      	cbnz	r0, 80064b8 <_vfiprintf_r+0x110>
 8006480:	06d1      	lsls	r1, r2, #27
 8006482:	bf44      	itt	mi
 8006484:	2320      	movmi	r3, #32
 8006486:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800648a:	0713      	lsls	r3, r2, #28
 800648c:	bf44      	itt	mi
 800648e:	232b      	movmi	r3, #43	@ 0x2b
 8006490:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006494:	f89a 3000 	ldrb.w	r3, [sl]
 8006498:	2b2a      	cmp	r3, #42	@ 0x2a
 800649a:	d015      	beq.n	80064c8 <_vfiprintf_r+0x120>
 800649c:	9a07      	ldr	r2, [sp, #28]
 800649e:	4654      	mov	r4, sl
 80064a0:	2000      	movs	r0, #0
 80064a2:	f04f 0c0a 	mov.w	ip, #10
 80064a6:	4621      	mov	r1, r4
 80064a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064ac:	3b30      	subs	r3, #48	@ 0x30
 80064ae:	2b09      	cmp	r3, #9
 80064b0:	d94b      	bls.n	800654a <_vfiprintf_r+0x1a2>
 80064b2:	b1b0      	cbz	r0, 80064e2 <_vfiprintf_r+0x13a>
 80064b4:	9207      	str	r2, [sp, #28]
 80064b6:	e014      	b.n	80064e2 <_vfiprintf_r+0x13a>
 80064b8:	eba0 0308 	sub.w	r3, r0, r8
 80064bc:	fa09 f303 	lsl.w	r3, r9, r3
 80064c0:	4313      	orrs	r3, r2
 80064c2:	9304      	str	r3, [sp, #16]
 80064c4:	46a2      	mov	sl, r4
 80064c6:	e7d2      	b.n	800646e <_vfiprintf_r+0xc6>
 80064c8:	9b03      	ldr	r3, [sp, #12]
 80064ca:	1d19      	adds	r1, r3, #4
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	9103      	str	r1, [sp, #12]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	bfbb      	ittet	lt
 80064d4:	425b      	neglt	r3, r3
 80064d6:	f042 0202 	orrlt.w	r2, r2, #2
 80064da:	9307      	strge	r3, [sp, #28]
 80064dc:	9307      	strlt	r3, [sp, #28]
 80064de:	bfb8      	it	lt
 80064e0:	9204      	strlt	r2, [sp, #16]
 80064e2:	7823      	ldrb	r3, [r4, #0]
 80064e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80064e6:	d10a      	bne.n	80064fe <_vfiprintf_r+0x156>
 80064e8:	7863      	ldrb	r3, [r4, #1]
 80064ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80064ec:	d132      	bne.n	8006554 <_vfiprintf_r+0x1ac>
 80064ee:	9b03      	ldr	r3, [sp, #12]
 80064f0:	1d1a      	adds	r2, r3, #4
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	9203      	str	r2, [sp, #12]
 80064f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80064fa:	3402      	adds	r4, #2
 80064fc:	9305      	str	r3, [sp, #20]
 80064fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80065d4 <_vfiprintf_r+0x22c>
 8006502:	7821      	ldrb	r1, [r4, #0]
 8006504:	2203      	movs	r2, #3
 8006506:	4650      	mov	r0, sl
 8006508:	f7f9 fe62 	bl	80001d0 <memchr>
 800650c:	b138      	cbz	r0, 800651e <_vfiprintf_r+0x176>
 800650e:	9b04      	ldr	r3, [sp, #16]
 8006510:	eba0 000a 	sub.w	r0, r0, sl
 8006514:	2240      	movs	r2, #64	@ 0x40
 8006516:	4082      	lsls	r2, r0
 8006518:	4313      	orrs	r3, r2
 800651a:	3401      	adds	r4, #1
 800651c:	9304      	str	r3, [sp, #16]
 800651e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006522:	4829      	ldr	r0, [pc, #164]	@ (80065c8 <_vfiprintf_r+0x220>)
 8006524:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006528:	2206      	movs	r2, #6
 800652a:	f7f9 fe51 	bl	80001d0 <memchr>
 800652e:	2800      	cmp	r0, #0
 8006530:	d03f      	beq.n	80065b2 <_vfiprintf_r+0x20a>
 8006532:	4b26      	ldr	r3, [pc, #152]	@ (80065cc <_vfiprintf_r+0x224>)
 8006534:	bb1b      	cbnz	r3, 800657e <_vfiprintf_r+0x1d6>
 8006536:	9b03      	ldr	r3, [sp, #12]
 8006538:	3307      	adds	r3, #7
 800653a:	f023 0307 	bic.w	r3, r3, #7
 800653e:	3308      	adds	r3, #8
 8006540:	9303      	str	r3, [sp, #12]
 8006542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006544:	443b      	add	r3, r7
 8006546:	9309      	str	r3, [sp, #36]	@ 0x24
 8006548:	e76a      	b.n	8006420 <_vfiprintf_r+0x78>
 800654a:	fb0c 3202 	mla	r2, ip, r2, r3
 800654e:	460c      	mov	r4, r1
 8006550:	2001      	movs	r0, #1
 8006552:	e7a8      	b.n	80064a6 <_vfiprintf_r+0xfe>
 8006554:	2300      	movs	r3, #0
 8006556:	3401      	adds	r4, #1
 8006558:	9305      	str	r3, [sp, #20]
 800655a:	4619      	mov	r1, r3
 800655c:	f04f 0c0a 	mov.w	ip, #10
 8006560:	4620      	mov	r0, r4
 8006562:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006566:	3a30      	subs	r2, #48	@ 0x30
 8006568:	2a09      	cmp	r2, #9
 800656a:	d903      	bls.n	8006574 <_vfiprintf_r+0x1cc>
 800656c:	2b00      	cmp	r3, #0
 800656e:	d0c6      	beq.n	80064fe <_vfiprintf_r+0x156>
 8006570:	9105      	str	r1, [sp, #20]
 8006572:	e7c4      	b.n	80064fe <_vfiprintf_r+0x156>
 8006574:	fb0c 2101 	mla	r1, ip, r1, r2
 8006578:	4604      	mov	r4, r0
 800657a:	2301      	movs	r3, #1
 800657c:	e7f0      	b.n	8006560 <_vfiprintf_r+0x1b8>
 800657e:	ab03      	add	r3, sp, #12
 8006580:	9300      	str	r3, [sp, #0]
 8006582:	462a      	mov	r2, r5
 8006584:	4b12      	ldr	r3, [pc, #72]	@ (80065d0 <_vfiprintf_r+0x228>)
 8006586:	a904      	add	r1, sp, #16
 8006588:	4630      	mov	r0, r6
 800658a:	f3af 8000 	nop.w
 800658e:	4607      	mov	r7, r0
 8006590:	1c78      	adds	r0, r7, #1
 8006592:	d1d6      	bne.n	8006542 <_vfiprintf_r+0x19a>
 8006594:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006596:	07d9      	lsls	r1, r3, #31
 8006598:	d405      	bmi.n	80065a6 <_vfiprintf_r+0x1fe>
 800659a:	89ab      	ldrh	r3, [r5, #12]
 800659c:	059a      	lsls	r2, r3, #22
 800659e:	d402      	bmi.n	80065a6 <_vfiprintf_r+0x1fe>
 80065a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065a2:	f7ff fc77 	bl	8005e94 <__retarget_lock_release_recursive>
 80065a6:	89ab      	ldrh	r3, [r5, #12]
 80065a8:	065b      	lsls	r3, r3, #25
 80065aa:	f53f af1f 	bmi.w	80063ec <_vfiprintf_r+0x44>
 80065ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065b0:	e71e      	b.n	80063f0 <_vfiprintf_r+0x48>
 80065b2:	ab03      	add	r3, sp, #12
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	462a      	mov	r2, r5
 80065b8:	4b05      	ldr	r3, [pc, #20]	@ (80065d0 <_vfiprintf_r+0x228>)
 80065ba:	a904      	add	r1, sp, #16
 80065bc:	4630      	mov	r0, r6
 80065be:	f000 f879 	bl	80066b4 <_printf_i>
 80065c2:	e7e4      	b.n	800658e <_vfiprintf_r+0x1e6>
 80065c4:	08008108 	.word	0x08008108
 80065c8:	08008112 	.word	0x08008112
 80065cc:	00000000 	.word	0x00000000
 80065d0:	08006383 	.word	0x08006383
 80065d4:	0800810e 	.word	0x0800810e

080065d8 <_printf_common>:
 80065d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065dc:	4616      	mov	r6, r2
 80065de:	4698      	mov	r8, r3
 80065e0:	688a      	ldr	r2, [r1, #8]
 80065e2:	690b      	ldr	r3, [r1, #16]
 80065e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80065e8:	4293      	cmp	r3, r2
 80065ea:	bfb8      	it	lt
 80065ec:	4613      	movlt	r3, r2
 80065ee:	6033      	str	r3, [r6, #0]
 80065f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80065f4:	4607      	mov	r7, r0
 80065f6:	460c      	mov	r4, r1
 80065f8:	b10a      	cbz	r2, 80065fe <_printf_common+0x26>
 80065fa:	3301      	adds	r3, #1
 80065fc:	6033      	str	r3, [r6, #0]
 80065fe:	6823      	ldr	r3, [r4, #0]
 8006600:	0699      	lsls	r1, r3, #26
 8006602:	bf42      	ittt	mi
 8006604:	6833      	ldrmi	r3, [r6, #0]
 8006606:	3302      	addmi	r3, #2
 8006608:	6033      	strmi	r3, [r6, #0]
 800660a:	6825      	ldr	r5, [r4, #0]
 800660c:	f015 0506 	ands.w	r5, r5, #6
 8006610:	d106      	bne.n	8006620 <_printf_common+0x48>
 8006612:	f104 0a19 	add.w	sl, r4, #25
 8006616:	68e3      	ldr	r3, [r4, #12]
 8006618:	6832      	ldr	r2, [r6, #0]
 800661a:	1a9b      	subs	r3, r3, r2
 800661c:	42ab      	cmp	r3, r5
 800661e:	dc26      	bgt.n	800666e <_printf_common+0x96>
 8006620:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006624:	6822      	ldr	r2, [r4, #0]
 8006626:	3b00      	subs	r3, #0
 8006628:	bf18      	it	ne
 800662a:	2301      	movne	r3, #1
 800662c:	0692      	lsls	r2, r2, #26
 800662e:	d42b      	bmi.n	8006688 <_printf_common+0xb0>
 8006630:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006634:	4641      	mov	r1, r8
 8006636:	4638      	mov	r0, r7
 8006638:	47c8      	blx	r9
 800663a:	3001      	adds	r0, #1
 800663c:	d01e      	beq.n	800667c <_printf_common+0xa4>
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	6922      	ldr	r2, [r4, #16]
 8006642:	f003 0306 	and.w	r3, r3, #6
 8006646:	2b04      	cmp	r3, #4
 8006648:	bf02      	ittt	eq
 800664a:	68e5      	ldreq	r5, [r4, #12]
 800664c:	6833      	ldreq	r3, [r6, #0]
 800664e:	1aed      	subeq	r5, r5, r3
 8006650:	68a3      	ldr	r3, [r4, #8]
 8006652:	bf0c      	ite	eq
 8006654:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006658:	2500      	movne	r5, #0
 800665a:	4293      	cmp	r3, r2
 800665c:	bfc4      	itt	gt
 800665e:	1a9b      	subgt	r3, r3, r2
 8006660:	18ed      	addgt	r5, r5, r3
 8006662:	2600      	movs	r6, #0
 8006664:	341a      	adds	r4, #26
 8006666:	42b5      	cmp	r5, r6
 8006668:	d11a      	bne.n	80066a0 <_printf_common+0xc8>
 800666a:	2000      	movs	r0, #0
 800666c:	e008      	b.n	8006680 <_printf_common+0xa8>
 800666e:	2301      	movs	r3, #1
 8006670:	4652      	mov	r2, sl
 8006672:	4641      	mov	r1, r8
 8006674:	4638      	mov	r0, r7
 8006676:	47c8      	blx	r9
 8006678:	3001      	adds	r0, #1
 800667a:	d103      	bne.n	8006684 <_printf_common+0xac>
 800667c:	f04f 30ff 	mov.w	r0, #4294967295
 8006680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006684:	3501      	adds	r5, #1
 8006686:	e7c6      	b.n	8006616 <_printf_common+0x3e>
 8006688:	18e1      	adds	r1, r4, r3
 800668a:	1c5a      	adds	r2, r3, #1
 800668c:	2030      	movs	r0, #48	@ 0x30
 800668e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006692:	4422      	add	r2, r4
 8006694:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006698:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800669c:	3302      	adds	r3, #2
 800669e:	e7c7      	b.n	8006630 <_printf_common+0x58>
 80066a0:	2301      	movs	r3, #1
 80066a2:	4622      	mov	r2, r4
 80066a4:	4641      	mov	r1, r8
 80066a6:	4638      	mov	r0, r7
 80066a8:	47c8      	blx	r9
 80066aa:	3001      	adds	r0, #1
 80066ac:	d0e6      	beq.n	800667c <_printf_common+0xa4>
 80066ae:	3601      	adds	r6, #1
 80066b0:	e7d9      	b.n	8006666 <_printf_common+0x8e>
	...

080066b4 <_printf_i>:
 80066b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066b8:	7e0f      	ldrb	r7, [r1, #24]
 80066ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80066bc:	2f78      	cmp	r7, #120	@ 0x78
 80066be:	4691      	mov	r9, r2
 80066c0:	4680      	mov	r8, r0
 80066c2:	460c      	mov	r4, r1
 80066c4:	469a      	mov	sl, r3
 80066c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80066ca:	d807      	bhi.n	80066dc <_printf_i+0x28>
 80066cc:	2f62      	cmp	r7, #98	@ 0x62
 80066ce:	d80a      	bhi.n	80066e6 <_printf_i+0x32>
 80066d0:	2f00      	cmp	r7, #0
 80066d2:	f000 80d2 	beq.w	800687a <_printf_i+0x1c6>
 80066d6:	2f58      	cmp	r7, #88	@ 0x58
 80066d8:	f000 80b9 	beq.w	800684e <_printf_i+0x19a>
 80066dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80066e4:	e03a      	b.n	800675c <_printf_i+0xa8>
 80066e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80066ea:	2b15      	cmp	r3, #21
 80066ec:	d8f6      	bhi.n	80066dc <_printf_i+0x28>
 80066ee:	a101      	add	r1, pc, #4	@ (adr r1, 80066f4 <_printf_i+0x40>)
 80066f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066f4:	0800674d 	.word	0x0800674d
 80066f8:	08006761 	.word	0x08006761
 80066fc:	080066dd 	.word	0x080066dd
 8006700:	080066dd 	.word	0x080066dd
 8006704:	080066dd 	.word	0x080066dd
 8006708:	080066dd 	.word	0x080066dd
 800670c:	08006761 	.word	0x08006761
 8006710:	080066dd 	.word	0x080066dd
 8006714:	080066dd 	.word	0x080066dd
 8006718:	080066dd 	.word	0x080066dd
 800671c:	080066dd 	.word	0x080066dd
 8006720:	08006861 	.word	0x08006861
 8006724:	0800678b 	.word	0x0800678b
 8006728:	0800681b 	.word	0x0800681b
 800672c:	080066dd 	.word	0x080066dd
 8006730:	080066dd 	.word	0x080066dd
 8006734:	08006883 	.word	0x08006883
 8006738:	080066dd 	.word	0x080066dd
 800673c:	0800678b 	.word	0x0800678b
 8006740:	080066dd 	.word	0x080066dd
 8006744:	080066dd 	.word	0x080066dd
 8006748:	08006823 	.word	0x08006823
 800674c:	6833      	ldr	r3, [r6, #0]
 800674e:	1d1a      	adds	r2, r3, #4
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6032      	str	r2, [r6, #0]
 8006754:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006758:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800675c:	2301      	movs	r3, #1
 800675e:	e09d      	b.n	800689c <_printf_i+0x1e8>
 8006760:	6833      	ldr	r3, [r6, #0]
 8006762:	6820      	ldr	r0, [r4, #0]
 8006764:	1d19      	adds	r1, r3, #4
 8006766:	6031      	str	r1, [r6, #0]
 8006768:	0606      	lsls	r6, r0, #24
 800676a:	d501      	bpl.n	8006770 <_printf_i+0xbc>
 800676c:	681d      	ldr	r5, [r3, #0]
 800676e:	e003      	b.n	8006778 <_printf_i+0xc4>
 8006770:	0645      	lsls	r5, r0, #25
 8006772:	d5fb      	bpl.n	800676c <_printf_i+0xb8>
 8006774:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006778:	2d00      	cmp	r5, #0
 800677a:	da03      	bge.n	8006784 <_printf_i+0xd0>
 800677c:	232d      	movs	r3, #45	@ 0x2d
 800677e:	426d      	negs	r5, r5
 8006780:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006784:	4859      	ldr	r0, [pc, #356]	@ (80068ec <_printf_i+0x238>)
 8006786:	230a      	movs	r3, #10
 8006788:	e011      	b.n	80067ae <_printf_i+0xfa>
 800678a:	6821      	ldr	r1, [r4, #0]
 800678c:	6833      	ldr	r3, [r6, #0]
 800678e:	0608      	lsls	r0, r1, #24
 8006790:	f853 5b04 	ldr.w	r5, [r3], #4
 8006794:	d402      	bmi.n	800679c <_printf_i+0xe8>
 8006796:	0649      	lsls	r1, r1, #25
 8006798:	bf48      	it	mi
 800679a:	b2ad      	uxthmi	r5, r5
 800679c:	2f6f      	cmp	r7, #111	@ 0x6f
 800679e:	4853      	ldr	r0, [pc, #332]	@ (80068ec <_printf_i+0x238>)
 80067a0:	6033      	str	r3, [r6, #0]
 80067a2:	bf14      	ite	ne
 80067a4:	230a      	movne	r3, #10
 80067a6:	2308      	moveq	r3, #8
 80067a8:	2100      	movs	r1, #0
 80067aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80067ae:	6866      	ldr	r6, [r4, #4]
 80067b0:	60a6      	str	r6, [r4, #8]
 80067b2:	2e00      	cmp	r6, #0
 80067b4:	bfa2      	ittt	ge
 80067b6:	6821      	ldrge	r1, [r4, #0]
 80067b8:	f021 0104 	bicge.w	r1, r1, #4
 80067bc:	6021      	strge	r1, [r4, #0]
 80067be:	b90d      	cbnz	r5, 80067c4 <_printf_i+0x110>
 80067c0:	2e00      	cmp	r6, #0
 80067c2:	d04b      	beq.n	800685c <_printf_i+0x1a8>
 80067c4:	4616      	mov	r6, r2
 80067c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80067ca:	fb03 5711 	mls	r7, r3, r1, r5
 80067ce:	5dc7      	ldrb	r7, [r0, r7]
 80067d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80067d4:	462f      	mov	r7, r5
 80067d6:	42bb      	cmp	r3, r7
 80067d8:	460d      	mov	r5, r1
 80067da:	d9f4      	bls.n	80067c6 <_printf_i+0x112>
 80067dc:	2b08      	cmp	r3, #8
 80067de:	d10b      	bne.n	80067f8 <_printf_i+0x144>
 80067e0:	6823      	ldr	r3, [r4, #0]
 80067e2:	07df      	lsls	r7, r3, #31
 80067e4:	d508      	bpl.n	80067f8 <_printf_i+0x144>
 80067e6:	6923      	ldr	r3, [r4, #16]
 80067e8:	6861      	ldr	r1, [r4, #4]
 80067ea:	4299      	cmp	r1, r3
 80067ec:	bfde      	ittt	le
 80067ee:	2330      	movle	r3, #48	@ 0x30
 80067f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80067f8:	1b92      	subs	r2, r2, r6
 80067fa:	6122      	str	r2, [r4, #16]
 80067fc:	f8cd a000 	str.w	sl, [sp]
 8006800:	464b      	mov	r3, r9
 8006802:	aa03      	add	r2, sp, #12
 8006804:	4621      	mov	r1, r4
 8006806:	4640      	mov	r0, r8
 8006808:	f7ff fee6 	bl	80065d8 <_printf_common>
 800680c:	3001      	adds	r0, #1
 800680e:	d14a      	bne.n	80068a6 <_printf_i+0x1f2>
 8006810:	f04f 30ff 	mov.w	r0, #4294967295
 8006814:	b004      	add	sp, #16
 8006816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	f043 0320 	orr.w	r3, r3, #32
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	4833      	ldr	r0, [pc, #204]	@ (80068f0 <_printf_i+0x23c>)
 8006824:	2778      	movs	r7, #120	@ 0x78
 8006826:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800682a:	6823      	ldr	r3, [r4, #0]
 800682c:	6831      	ldr	r1, [r6, #0]
 800682e:	061f      	lsls	r7, r3, #24
 8006830:	f851 5b04 	ldr.w	r5, [r1], #4
 8006834:	d402      	bmi.n	800683c <_printf_i+0x188>
 8006836:	065f      	lsls	r7, r3, #25
 8006838:	bf48      	it	mi
 800683a:	b2ad      	uxthmi	r5, r5
 800683c:	6031      	str	r1, [r6, #0]
 800683e:	07d9      	lsls	r1, r3, #31
 8006840:	bf44      	itt	mi
 8006842:	f043 0320 	orrmi.w	r3, r3, #32
 8006846:	6023      	strmi	r3, [r4, #0]
 8006848:	b11d      	cbz	r5, 8006852 <_printf_i+0x19e>
 800684a:	2310      	movs	r3, #16
 800684c:	e7ac      	b.n	80067a8 <_printf_i+0xf4>
 800684e:	4827      	ldr	r0, [pc, #156]	@ (80068ec <_printf_i+0x238>)
 8006850:	e7e9      	b.n	8006826 <_printf_i+0x172>
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	f023 0320 	bic.w	r3, r3, #32
 8006858:	6023      	str	r3, [r4, #0]
 800685a:	e7f6      	b.n	800684a <_printf_i+0x196>
 800685c:	4616      	mov	r6, r2
 800685e:	e7bd      	b.n	80067dc <_printf_i+0x128>
 8006860:	6833      	ldr	r3, [r6, #0]
 8006862:	6825      	ldr	r5, [r4, #0]
 8006864:	6961      	ldr	r1, [r4, #20]
 8006866:	1d18      	adds	r0, r3, #4
 8006868:	6030      	str	r0, [r6, #0]
 800686a:	062e      	lsls	r6, r5, #24
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	d501      	bpl.n	8006874 <_printf_i+0x1c0>
 8006870:	6019      	str	r1, [r3, #0]
 8006872:	e002      	b.n	800687a <_printf_i+0x1c6>
 8006874:	0668      	lsls	r0, r5, #25
 8006876:	d5fb      	bpl.n	8006870 <_printf_i+0x1bc>
 8006878:	8019      	strh	r1, [r3, #0]
 800687a:	2300      	movs	r3, #0
 800687c:	6123      	str	r3, [r4, #16]
 800687e:	4616      	mov	r6, r2
 8006880:	e7bc      	b.n	80067fc <_printf_i+0x148>
 8006882:	6833      	ldr	r3, [r6, #0]
 8006884:	1d1a      	adds	r2, r3, #4
 8006886:	6032      	str	r2, [r6, #0]
 8006888:	681e      	ldr	r6, [r3, #0]
 800688a:	6862      	ldr	r2, [r4, #4]
 800688c:	2100      	movs	r1, #0
 800688e:	4630      	mov	r0, r6
 8006890:	f7f9 fc9e 	bl	80001d0 <memchr>
 8006894:	b108      	cbz	r0, 800689a <_printf_i+0x1e6>
 8006896:	1b80      	subs	r0, r0, r6
 8006898:	6060      	str	r0, [r4, #4]
 800689a:	6863      	ldr	r3, [r4, #4]
 800689c:	6123      	str	r3, [r4, #16]
 800689e:	2300      	movs	r3, #0
 80068a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068a4:	e7aa      	b.n	80067fc <_printf_i+0x148>
 80068a6:	6923      	ldr	r3, [r4, #16]
 80068a8:	4632      	mov	r2, r6
 80068aa:	4649      	mov	r1, r9
 80068ac:	4640      	mov	r0, r8
 80068ae:	47d0      	blx	sl
 80068b0:	3001      	adds	r0, #1
 80068b2:	d0ad      	beq.n	8006810 <_printf_i+0x15c>
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	079b      	lsls	r3, r3, #30
 80068b8:	d413      	bmi.n	80068e2 <_printf_i+0x22e>
 80068ba:	68e0      	ldr	r0, [r4, #12]
 80068bc:	9b03      	ldr	r3, [sp, #12]
 80068be:	4298      	cmp	r0, r3
 80068c0:	bfb8      	it	lt
 80068c2:	4618      	movlt	r0, r3
 80068c4:	e7a6      	b.n	8006814 <_printf_i+0x160>
 80068c6:	2301      	movs	r3, #1
 80068c8:	4632      	mov	r2, r6
 80068ca:	4649      	mov	r1, r9
 80068cc:	4640      	mov	r0, r8
 80068ce:	47d0      	blx	sl
 80068d0:	3001      	adds	r0, #1
 80068d2:	d09d      	beq.n	8006810 <_printf_i+0x15c>
 80068d4:	3501      	adds	r5, #1
 80068d6:	68e3      	ldr	r3, [r4, #12]
 80068d8:	9903      	ldr	r1, [sp, #12]
 80068da:	1a5b      	subs	r3, r3, r1
 80068dc:	42ab      	cmp	r3, r5
 80068de:	dcf2      	bgt.n	80068c6 <_printf_i+0x212>
 80068e0:	e7eb      	b.n	80068ba <_printf_i+0x206>
 80068e2:	2500      	movs	r5, #0
 80068e4:	f104 0619 	add.w	r6, r4, #25
 80068e8:	e7f5      	b.n	80068d6 <_printf_i+0x222>
 80068ea:	bf00      	nop
 80068ec:	08008119 	.word	0x08008119
 80068f0:	0800812a 	.word	0x0800812a

080068f4 <__sflush_r>:
 80068f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80068f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068fc:	0716      	lsls	r6, r2, #28
 80068fe:	4605      	mov	r5, r0
 8006900:	460c      	mov	r4, r1
 8006902:	d454      	bmi.n	80069ae <__sflush_r+0xba>
 8006904:	684b      	ldr	r3, [r1, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	dc02      	bgt.n	8006910 <__sflush_r+0x1c>
 800690a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800690c:	2b00      	cmp	r3, #0
 800690e:	dd48      	ble.n	80069a2 <__sflush_r+0xae>
 8006910:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006912:	2e00      	cmp	r6, #0
 8006914:	d045      	beq.n	80069a2 <__sflush_r+0xae>
 8006916:	2300      	movs	r3, #0
 8006918:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800691c:	682f      	ldr	r7, [r5, #0]
 800691e:	6a21      	ldr	r1, [r4, #32]
 8006920:	602b      	str	r3, [r5, #0]
 8006922:	d030      	beq.n	8006986 <__sflush_r+0x92>
 8006924:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006926:	89a3      	ldrh	r3, [r4, #12]
 8006928:	0759      	lsls	r1, r3, #29
 800692a:	d505      	bpl.n	8006938 <__sflush_r+0x44>
 800692c:	6863      	ldr	r3, [r4, #4]
 800692e:	1ad2      	subs	r2, r2, r3
 8006930:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006932:	b10b      	cbz	r3, 8006938 <__sflush_r+0x44>
 8006934:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006936:	1ad2      	subs	r2, r2, r3
 8006938:	2300      	movs	r3, #0
 800693a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800693c:	6a21      	ldr	r1, [r4, #32]
 800693e:	4628      	mov	r0, r5
 8006940:	47b0      	blx	r6
 8006942:	1c43      	adds	r3, r0, #1
 8006944:	89a3      	ldrh	r3, [r4, #12]
 8006946:	d106      	bne.n	8006956 <__sflush_r+0x62>
 8006948:	6829      	ldr	r1, [r5, #0]
 800694a:	291d      	cmp	r1, #29
 800694c:	d82b      	bhi.n	80069a6 <__sflush_r+0xb2>
 800694e:	4a2a      	ldr	r2, [pc, #168]	@ (80069f8 <__sflush_r+0x104>)
 8006950:	410a      	asrs	r2, r1
 8006952:	07d6      	lsls	r6, r2, #31
 8006954:	d427      	bmi.n	80069a6 <__sflush_r+0xb2>
 8006956:	2200      	movs	r2, #0
 8006958:	6062      	str	r2, [r4, #4]
 800695a:	04d9      	lsls	r1, r3, #19
 800695c:	6922      	ldr	r2, [r4, #16]
 800695e:	6022      	str	r2, [r4, #0]
 8006960:	d504      	bpl.n	800696c <__sflush_r+0x78>
 8006962:	1c42      	adds	r2, r0, #1
 8006964:	d101      	bne.n	800696a <__sflush_r+0x76>
 8006966:	682b      	ldr	r3, [r5, #0]
 8006968:	b903      	cbnz	r3, 800696c <__sflush_r+0x78>
 800696a:	6560      	str	r0, [r4, #84]	@ 0x54
 800696c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800696e:	602f      	str	r7, [r5, #0]
 8006970:	b1b9      	cbz	r1, 80069a2 <__sflush_r+0xae>
 8006972:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006976:	4299      	cmp	r1, r3
 8006978:	d002      	beq.n	8006980 <__sflush_r+0x8c>
 800697a:	4628      	mov	r0, r5
 800697c:	f7ff fa9a 	bl	8005eb4 <_free_r>
 8006980:	2300      	movs	r3, #0
 8006982:	6363      	str	r3, [r4, #52]	@ 0x34
 8006984:	e00d      	b.n	80069a2 <__sflush_r+0xae>
 8006986:	2301      	movs	r3, #1
 8006988:	4628      	mov	r0, r5
 800698a:	47b0      	blx	r6
 800698c:	4602      	mov	r2, r0
 800698e:	1c50      	adds	r0, r2, #1
 8006990:	d1c9      	bne.n	8006926 <__sflush_r+0x32>
 8006992:	682b      	ldr	r3, [r5, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d0c6      	beq.n	8006926 <__sflush_r+0x32>
 8006998:	2b1d      	cmp	r3, #29
 800699a:	d001      	beq.n	80069a0 <__sflush_r+0xac>
 800699c:	2b16      	cmp	r3, #22
 800699e:	d11e      	bne.n	80069de <__sflush_r+0xea>
 80069a0:	602f      	str	r7, [r5, #0]
 80069a2:	2000      	movs	r0, #0
 80069a4:	e022      	b.n	80069ec <__sflush_r+0xf8>
 80069a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069aa:	b21b      	sxth	r3, r3
 80069ac:	e01b      	b.n	80069e6 <__sflush_r+0xf2>
 80069ae:	690f      	ldr	r7, [r1, #16]
 80069b0:	2f00      	cmp	r7, #0
 80069b2:	d0f6      	beq.n	80069a2 <__sflush_r+0xae>
 80069b4:	0793      	lsls	r3, r2, #30
 80069b6:	680e      	ldr	r6, [r1, #0]
 80069b8:	bf08      	it	eq
 80069ba:	694b      	ldreq	r3, [r1, #20]
 80069bc:	600f      	str	r7, [r1, #0]
 80069be:	bf18      	it	ne
 80069c0:	2300      	movne	r3, #0
 80069c2:	eba6 0807 	sub.w	r8, r6, r7
 80069c6:	608b      	str	r3, [r1, #8]
 80069c8:	f1b8 0f00 	cmp.w	r8, #0
 80069cc:	dde9      	ble.n	80069a2 <__sflush_r+0xae>
 80069ce:	6a21      	ldr	r1, [r4, #32]
 80069d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80069d2:	4643      	mov	r3, r8
 80069d4:	463a      	mov	r2, r7
 80069d6:	4628      	mov	r0, r5
 80069d8:	47b0      	blx	r6
 80069da:	2800      	cmp	r0, #0
 80069dc:	dc08      	bgt.n	80069f0 <__sflush_r+0xfc>
 80069de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069e6:	81a3      	strh	r3, [r4, #12]
 80069e8:	f04f 30ff 	mov.w	r0, #4294967295
 80069ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069f0:	4407      	add	r7, r0
 80069f2:	eba8 0800 	sub.w	r8, r8, r0
 80069f6:	e7e7      	b.n	80069c8 <__sflush_r+0xd4>
 80069f8:	dfbffffe 	.word	0xdfbffffe

080069fc <_fflush_r>:
 80069fc:	b538      	push	{r3, r4, r5, lr}
 80069fe:	690b      	ldr	r3, [r1, #16]
 8006a00:	4605      	mov	r5, r0
 8006a02:	460c      	mov	r4, r1
 8006a04:	b913      	cbnz	r3, 8006a0c <_fflush_r+0x10>
 8006a06:	2500      	movs	r5, #0
 8006a08:	4628      	mov	r0, r5
 8006a0a:	bd38      	pop	{r3, r4, r5, pc}
 8006a0c:	b118      	cbz	r0, 8006a16 <_fflush_r+0x1a>
 8006a0e:	6a03      	ldr	r3, [r0, #32]
 8006a10:	b90b      	cbnz	r3, 8006a16 <_fflush_r+0x1a>
 8006a12:	f7ff f80d 	bl	8005a30 <__sinit>
 8006a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d0f3      	beq.n	8006a06 <_fflush_r+0xa>
 8006a1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a20:	07d0      	lsls	r0, r2, #31
 8006a22:	d404      	bmi.n	8006a2e <_fflush_r+0x32>
 8006a24:	0599      	lsls	r1, r3, #22
 8006a26:	d402      	bmi.n	8006a2e <_fflush_r+0x32>
 8006a28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a2a:	f7ff fa32 	bl	8005e92 <__retarget_lock_acquire_recursive>
 8006a2e:	4628      	mov	r0, r5
 8006a30:	4621      	mov	r1, r4
 8006a32:	f7ff ff5f 	bl	80068f4 <__sflush_r>
 8006a36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a38:	07da      	lsls	r2, r3, #31
 8006a3a:	4605      	mov	r5, r0
 8006a3c:	d4e4      	bmi.n	8006a08 <_fflush_r+0xc>
 8006a3e:	89a3      	ldrh	r3, [r4, #12]
 8006a40:	059b      	lsls	r3, r3, #22
 8006a42:	d4e1      	bmi.n	8006a08 <_fflush_r+0xc>
 8006a44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a46:	f7ff fa25 	bl	8005e94 <__retarget_lock_release_recursive>
 8006a4a:	e7dd      	b.n	8006a08 <_fflush_r+0xc>

08006a4c <__swhatbuf_r>:
 8006a4c:	b570      	push	{r4, r5, r6, lr}
 8006a4e:	460c      	mov	r4, r1
 8006a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a54:	2900      	cmp	r1, #0
 8006a56:	b096      	sub	sp, #88	@ 0x58
 8006a58:	4615      	mov	r5, r2
 8006a5a:	461e      	mov	r6, r3
 8006a5c:	da0d      	bge.n	8006a7a <__swhatbuf_r+0x2e>
 8006a5e:	89a3      	ldrh	r3, [r4, #12]
 8006a60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006a64:	f04f 0100 	mov.w	r1, #0
 8006a68:	bf14      	ite	ne
 8006a6a:	2340      	movne	r3, #64	@ 0x40
 8006a6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006a70:	2000      	movs	r0, #0
 8006a72:	6031      	str	r1, [r6, #0]
 8006a74:	602b      	str	r3, [r5, #0]
 8006a76:	b016      	add	sp, #88	@ 0x58
 8006a78:	bd70      	pop	{r4, r5, r6, pc}
 8006a7a:	466a      	mov	r2, sp
 8006a7c:	f000 f848 	bl	8006b10 <_fstat_r>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	dbec      	blt.n	8006a5e <__swhatbuf_r+0x12>
 8006a84:	9901      	ldr	r1, [sp, #4]
 8006a86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006a8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006a8e:	4259      	negs	r1, r3
 8006a90:	4159      	adcs	r1, r3
 8006a92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a96:	e7eb      	b.n	8006a70 <__swhatbuf_r+0x24>

08006a98 <__smakebuf_r>:
 8006a98:	898b      	ldrh	r3, [r1, #12]
 8006a9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a9c:	079d      	lsls	r5, r3, #30
 8006a9e:	4606      	mov	r6, r0
 8006aa0:	460c      	mov	r4, r1
 8006aa2:	d507      	bpl.n	8006ab4 <__smakebuf_r+0x1c>
 8006aa4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006aa8:	6023      	str	r3, [r4, #0]
 8006aaa:	6123      	str	r3, [r4, #16]
 8006aac:	2301      	movs	r3, #1
 8006aae:	6163      	str	r3, [r4, #20]
 8006ab0:	b003      	add	sp, #12
 8006ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ab4:	ab01      	add	r3, sp, #4
 8006ab6:	466a      	mov	r2, sp
 8006ab8:	f7ff ffc8 	bl	8006a4c <__swhatbuf_r>
 8006abc:	9f00      	ldr	r7, [sp, #0]
 8006abe:	4605      	mov	r5, r0
 8006ac0:	4639      	mov	r1, r7
 8006ac2:	4630      	mov	r0, r6
 8006ac4:	f7ff fa62 	bl	8005f8c <_malloc_r>
 8006ac8:	b948      	cbnz	r0, 8006ade <__smakebuf_r+0x46>
 8006aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ace:	059a      	lsls	r2, r3, #22
 8006ad0:	d4ee      	bmi.n	8006ab0 <__smakebuf_r+0x18>
 8006ad2:	f023 0303 	bic.w	r3, r3, #3
 8006ad6:	f043 0302 	orr.w	r3, r3, #2
 8006ada:	81a3      	strh	r3, [r4, #12]
 8006adc:	e7e2      	b.n	8006aa4 <__smakebuf_r+0xc>
 8006ade:	89a3      	ldrh	r3, [r4, #12]
 8006ae0:	6020      	str	r0, [r4, #0]
 8006ae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ae6:	81a3      	strh	r3, [r4, #12]
 8006ae8:	9b01      	ldr	r3, [sp, #4]
 8006aea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006aee:	b15b      	cbz	r3, 8006b08 <__smakebuf_r+0x70>
 8006af0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006af4:	4630      	mov	r0, r6
 8006af6:	f000 f81d 	bl	8006b34 <_isatty_r>
 8006afa:	b128      	cbz	r0, 8006b08 <__smakebuf_r+0x70>
 8006afc:	89a3      	ldrh	r3, [r4, #12]
 8006afe:	f023 0303 	bic.w	r3, r3, #3
 8006b02:	f043 0301 	orr.w	r3, r3, #1
 8006b06:	81a3      	strh	r3, [r4, #12]
 8006b08:	89a3      	ldrh	r3, [r4, #12]
 8006b0a:	431d      	orrs	r5, r3
 8006b0c:	81a5      	strh	r5, [r4, #12]
 8006b0e:	e7cf      	b.n	8006ab0 <__smakebuf_r+0x18>

08006b10 <_fstat_r>:
 8006b10:	b538      	push	{r3, r4, r5, lr}
 8006b12:	4d07      	ldr	r5, [pc, #28]	@ (8006b30 <_fstat_r+0x20>)
 8006b14:	2300      	movs	r3, #0
 8006b16:	4604      	mov	r4, r0
 8006b18:	4608      	mov	r0, r1
 8006b1a:	4611      	mov	r1, r2
 8006b1c:	602b      	str	r3, [r5, #0]
 8006b1e:	f7fa fc2c 	bl	800137a <_fstat>
 8006b22:	1c43      	adds	r3, r0, #1
 8006b24:	d102      	bne.n	8006b2c <_fstat_r+0x1c>
 8006b26:	682b      	ldr	r3, [r5, #0]
 8006b28:	b103      	cbz	r3, 8006b2c <_fstat_r+0x1c>
 8006b2a:	6023      	str	r3, [r4, #0]
 8006b2c:	bd38      	pop	{r3, r4, r5, pc}
 8006b2e:	bf00      	nop
 8006b30:	20000714 	.word	0x20000714

08006b34 <_isatty_r>:
 8006b34:	b538      	push	{r3, r4, r5, lr}
 8006b36:	4d06      	ldr	r5, [pc, #24]	@ (8006b50 <_isatty_r+0x1c>)
 8006b38:	2300      	movs	r3, #0
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	4608      	mov	r0, r1
 8006b3e:	602b      	str	r3, [r5, #0]
 8006b40:	f7fa fc2b 	bl	800139a <_isatty>
 8006b44:	1c43      	adds	r3, r0, #1
 8006b46:	d102      	bne.n	8006b4e <_isatty_r+0x1a>
 8006b48:	682b      	ldr	r3, [r5, #0]
 8006b4a:	b103      	cbz	r3, 8006b4e <_isatty_r+0x1a>
 8006b4c:	6023      	str	r3, [r4, #0]
 8006b4e:	bd38      	pop	{r3, r4, r5, pc}
 8006b50:	20000714 	.word	0x20000714

08006b54 <_sbrk_r>:
 8006b54:	b538      	push	{r3, r4, r5, lr}
 8006b56:	4d06      	ldr	r5, [pc, #24]	@ (8006b70 <_sbrk_r+0x1c>)
 8006b58:	2300      	movs	r3, #0
 8006b5a:	4604      	mov	r4, r0
 8006b5c:	4608      	mov	r0, r1
 8006b5e:	602b      	str	r3, [r5, #0]
 8006b60:	f7fa fc34 	bl	80013cc <_sbrk>
 8006b64:	1c43      	adds	r3, r0, #1
 8006b66:	d102      	bne.n	8006b6e <_sbrk_r+0x1a>
 8006b68:	682b      	ldr	r3, [r5, #0]
 8006b6a:	b103      	cbz	r3, 8006b6e <_sbrk_r+0x1a>
 8006b6c:	6023      	str	r3, [r4, #0]
 8006b6e:	bd38      	pop	{r3, r4, r5, pc}
 8006b70:	20000714 	.word	0x20000714

08006b74 <_realloc_r>:
 8006b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b78:	4680      	mov	r8, r0
 8006b7a:	4615      	mov	r5, r2
 8006b7c:	460c      	mov	r4, r1
 8006b7e:	b921      	cbnz	r1, 8006b8a <_realloc_r+0x16>
 8006b80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b84:	4611      	mov	r1, r2
 8006b86:	f7ff ba01 	b.w	8005f8c <_malloc_r>
 8006b8a:	b92a      	cbnz	r2, 8006b98 <_realloc_r+0x24>
 8006b8c:	f7ff f992 	bl	8005eb4 <_free_r>
 8006b90:	2400      	movs	r4, #0
 8006b92:	4620      	mov	r0, r4
 8006b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b98:	f000 f81a 	bl	8006bd0 <_malloc_usable_size_r>
 8006b9c:	4285      	cmp	r5, r0
 8006b9e:	4606      	mov	r6, r0
 8006ba0:	d802      	bhi.n	8006ba8 <_realloc_r+0x34>
 8006ba2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006ba6:	d8f4      	bhi.n	8006b92 <_realloc_r+0x1e>
 8006ba8:	4629      	mov	r1, r5
 8006baa:	4640      	mov	r0, r8
 8006bac:	f7ff f9ee 	bl	8005f8c <_malloc_r>
 8006bb0:	4607      	mov	r7, r0
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	d0ec      	beq.n	8006b90 <_realloc_r+0x1c>
 8006bb6:	42b5      	cmp	r5, r6
 8006bb8:	462a      	mov	r2, r5
 8006bba:	4621      	mov	r1, r4
 8006bbc:	bf28      	it	cs
 8006bbe:	4632      	movcs	r2, r6
 8006bc0:	f7ff f969 	bl	8005e96 <memcpy>
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	4640      	mov	r0, r8
 8006bc8:	f7ff f974 	bl	8005eb4 <_free_r>
 8006bcc:	463c      	mov	r4, r7
 8006bce:	e7e0      	b.n	8006b92 <_realloc_r+0x1e>

08006bd0 <_malloc_usable_size_r>:
 8006bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bd4:	1f18      	subs	r0, r3, #4
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	bfbc      	itt	lt
 8006bda:	580b      	ldrlt	r3, [r1, r0]
 8006bdc:	18c0      	addlt	r0, r0, r3
 8006bde:	4770      	bx	lr

08006be0 <_init>:
 8006be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be2:	bf00      	nop
 8006be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006be6:	bc08      	pop	{r3}
 8006be8:	469e      	mov	lr, r3
 8006bea:	4770      	bx	lr

08006bec <_fini>:
 8006bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bee:	bf00      	nop
 8006bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bf2:	bc08      	pop	{r3}
 8006bf4:	469e      	mov	lr, r3
 8006bf6:	4770      	bx	lr
